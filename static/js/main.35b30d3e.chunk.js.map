{"version":3,"sources":["types.ts","calculator.ts","GridView.tsx","DateQuestion.tsx","MultipleChoiceQuestion.tsx","InHouseExposureQuestion.tsx","InHouseExposureQuestions.tsx","util.tsx","Person.tsx","Household.tsx","App.tsx","index.tsx"],"names":["CovidEventName","computeHouseHoldQuarantinePeriod","household","inHouseExposureEvents","_","map","person","illnessOnset","covidEvents","SymptomsStart","PositiveTest","compact","date","parse","Date","thru","dates","min","value","tenDaysAfterOnset","addDays","symptomsEnd","SymptomsEnd","undefined","dayAfterSymptomsEnd","isolationEndDate","max","computeIsolationPeriod","isValid","startDate","endDate","infected","partition","quarantined","quarantinedCalculations","calculation","exposureDates","filter","event","quarantinedPerson","id","exposed","ongoing","find","contagiousPerson","latestStatedExposureDate","LastCloseContact","earliestExposureDate","latestExposureDate","fourteenDaysFromLastExposure","GridView","props","members","membersState","get","selectingDateField","selectingDateFieldState","className","plugins","dayGridPlugin","interactionPlugin","initialView","events","result","classNames","title","name","start","end","computeEvents","dateClick","info","editing","set","format","DateQuestion","twoDigitYearPattern","RegExp","dayMonthPattern","htmlFor","questionNumber","questionFieldTextState","questionFieldName","type","onChange","e","onFocus","onBlur","fixedDate","exec","slice","onUnfocus","MultipleChoiceQuestion","checked","questionText","InHouseExposureQuestion","inHouseExposureEvent","inHouseExposureEventState","isExposed","isOngoing","index","v","otherPerson","target","InHouseExposureQuestions","meaningfulInHouseExposures","relevantInHouseExposureEventsState","eventState","key","getRandomInt","Math","floor","random","isContagious","Boolean","Person","personState","covidEventsState","editingState","inHouseExposureEventsState","relevantInHouseExposureEvents","selectionsState","useState","Object","values","reduce","selections","contagious","buildQuestion","fieldName","firstQuestionText","nextContagious","setContagiousState","handleChange","handleFocusDateField","handleUnfocusDateField","none","newExposureEvents","otherContagious","merge","onClick","aria-hidden","isNewPerson","entries","quarantinedPersonName","member","contagiousPersonName","Household","handleAddNewPerson","App","initialMembers","length","href","currentId","newPerson","createInHouseExposureEvents","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.35b30d3e.chunk.js","sourcesContent":["export interface PersonData {\n  id: number;\n  name: string;\n  covidEvents: CovidEvents;\n  isNewPerson: boolean;\n  editing: boolean;\n}\n\nexport enum CovidEventName {\n  LastCloseContact = \"Most Recent Close Contact\",\n  SymptomsStart = \"Illness Onset\",\n  SymptomsEnd = \"Most Recent Symptoms\",\n  PositiveTest = \"Most Recent Positive Test\"\n}\n\nexport type CovidEvents = {\n  [key in CovidEventName]: string;\n};\n\nexport interface InHouseExposureEvent {\n  contagiousPerson: number;\n  quarantinedPerson: number;\n  exposed: boolean;\n  ongoing: boolean;\n  date: string;\n}\n\nexport interface CalculationResult {\n  person: PersonData;\n  startDate: Date;\n  endDate: Date;\n  infected?: boolean;\n}\n","import {\n  CalculationResult,\n  CovidEventName,\n  InHouseExposureEvent,\n  PersonData\n} from \"./types\";\nimport * as _ from \"lodash\";\nimport { addDays, max, min, isValid, parse } from \"date-fns\";\n\nexport function computeHouseHoldQuarantinePeriod(\n  household: PersonData[],\n  inHouseExposureEvents: InHouseExposureEvent[]\n): CalculationResult[] {\n  const [infected, quarantined] = _.chain(household)\n    .map((person: PersonData) => {\n      const [illnessOnset, isolationEndDate] = computeIsolationPeriod(person);\n      if (isValid(isolationEndDate)) {\n        return {\n          person: person,\n          startDate: illnessOnset,\n          endDate: isolationEndDate,\n          infected: true\n        };\n      } else {\n        return {\n          person: person,\n          startDate: new Date(),\n          endDate: new Date(),\n          infected: false\n        };\n      }\n    })\n    .partition(\"infected\")\n    .value();\n  const quarantinedCalculations: CalculationResult[] = _.map(\n    quarantined,\n    calculation => {\n      const person = calculation.person;\n      const exposureEvents = inHouseExposureEvents.filter(\n        event => event.quarantinedPerson === person.id && event.exposed\n      );\n      const exposureDates = exposureEvents.map(event => {\n        if (event.ongoing) {\n          return (\n            infected.find(\n              calculation => calculation.person.id === event.contagiousPerson\n            )?.endDate || new Date()\n          );\n        } else {\n          return parse(event.date, \"M/dd/yyyy\", new Date());\n        }\n      });\n      const latestStatedExposureDate = person.covidEvents[\n        CovidEventName.LastCloseContact\n      ]\n        ? parse(\n            person.covidEvents[CovidEventName.LastCloseContact],\n            \"M/dd/yyyy\",\n            new Date()\n          )\n        : undefined;\n      const earliestExposureDate = latestStatedExposureDate\n        ? min([...exposureDates, latestStatedExposureDate])\n        : min(exposureDates);\n      const latestExposureDate = latestStatedExposureDate\n        ? max([...exposureDates, latestStatedExposureDate])\n        : max(exposureDates);\n      const fourteenDaysFromLastExposure = addDays(latestExposureDate, 14);\n      return {\n        person: person,\n        startDate: earliestExposureDate,\n        endDate: fourteenDaysFromLastExposure,\n        infected: false\n      };\n    }\n  );\n  return [...infected, ...quarantinedCalculations];\n}\n\nexport function computeIsolationPeriod(person: PersonData): [Date, Date] {\n  const illnessOnset = _.chain([\n    person.covidEvents[CovidEventName.SymptomsStart],\n    person.covidEvents[CovidEventName.PositiveTest]\n  ])\n    .compact()\n    .map(date => parse(date, \"M/dd/yyyy\", new Date()))\n    .thru(dates => min(dates))\n    .value();\n  const tenDaysAfterOnset = illnessOnset && addDays(illnessOnset, 10);\n  const symptomsEnd = person.covidEvents[CovidEventName.SymptomsEnd]\n    ? parse(\n        person.covidEvents[CovidEventName.SymptomsEnd],\n        \"M/dd/yyyy\",\n        new Date()\n      )\n    : undefined;\n  const dayAfterSymptomsEnd = symptomsEnd && addDays(symptomsEnd, 1);\n  const isolationEndDate = _.chain([tenDaysAfterOnset, dayAfterSymptomsEnd])\n    .compact()\n    .thru(dates => max(dates))\n    .value();\n  return [illnessOnset, isolationEndDate];\n}\n","import React from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport {\n  PersonData,\n  CalculationResult,\n  InHouseExposureEvent,\n  CovidEventName\n} from \"./types\";\nimport { format, isValid } from \"date-fns\";\nimport { State } from \"@hookstate/core/dist\";\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEvents: InHouseExposureEvent[];\n  editing: number;\n  selectingDateFieldState: State<CovidEventName | undefined>;\n}\n\nexport default function GridView(props: Props) {\n  const members = props.membersState.get();\n  const selectingDateField = props.selectingDateFieldState.get();\n  function computeEvents(\n    members: PersonData[],\n    inHouseExposureEvents: InHouseExposureEvent[]\n  ) {\n    return computeHouseHoldQuarantinePeriod(members, inHouseExposureEvents).map(\n      (result: CalculationResult) => {\n        return {\n          classNames: [\"TODO\"],\n          title: result.person.name,\n          start: result.startDate,\n          end: result.endDate\n        };\n      }\n    );\n  }\n\n  return (\n    <div className={\"p-3\"}>\n      {\n        <div className={selectingDateField ? \"ba bw2 b--light-yellow\" : \"\"}>\n          <FullCalendar\n            plugins={[dayGridPlugin, interactionPlugin]}\n            initialView=\"dayGridMonth\"\n            events={computeEvents(members, props.inHouseExposureEvents)}\n            dateClick={(info: any) => {\n              if (props.editing >= 0 && selectingDateField) {\n                props.membersState[props.editing - 1].covidEvents[\n                  selectingDateField\n                ].set(format(info.date, \"MM/dd/yyyy\"));\n              }\n            }}\n          />\n        </div>\n      }\n    </div>\n  );\n}\n","import React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  id: number;\n  questionNumber: number;\n  questionFieldTextState: State<string>;\n  questionFieldName: string;\n  onChange: Function;\n  onFocus: Function;\n  onUnfocus: Function;\n}\n\nexport default function DateQuestion(props: Props) {\n  const twoDigitYearPattern = new RegExp(\n    \"^([0-9][0-9]?/[0-9][0-9]?/)([0-9][0-9])$\"\n  );\n  const dayMonthPattern = new RegExp(\"^[0-9][0-9]?/[0-9][0-9]?$\");\n\n  const handleTextChange = (e: React.BaseSyntheticEvent) => {\n    props.onChange(e);\n  };\n\n  const handleUnfocus = () => {\n    let fixedDate = props.questionFieldTextState.get();\n    const twoDigitYearMatch = twoDigitYearPattern.exec(fixedDate);\n    if (twoDigitYearMatch) {\n      fixedDate = fixedDate.slice(0, -2) + \"20\" + fixedDate.slice(-2);\n    }\n    const dayMonthMatch = dayMonthPattern.exec(fixedDate);\n    if (dayMonthMatch) {\n      fixedDate = fixedDate + \"/2020\";\n    }\n    props.questionFieldTextState.set(fixedDate);\n    props.onUnfocus(props.questionFieldName);\n  };\n\n  const handleFocus = () => {\n    props.onFocus(props.questionFieldName);\n  };\n\n  return (\n    <div className=\"\">\n      <label htmlFor={`${props.id}-${props.questionNumber}`}>\n        Date <span className=\"f6 fw3\">mm/dd/yyyy</span>\n      </label>\n      <input\n        className=\"form-control\"\n        value={props.questionFieldTextState.get()}\n        name={props.questionFieldName}\n        id={`${props.id}-${props.questionNumber}`}\n        type=\"text\"\n        onChange={handleTextChange}\n        onFocus={handleFocus}\n        onBlur={handleUnfocus}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { parse, format } from \"date-fns\";\n\ninterface Props {\n  id: number;\n  questionText: string;\n  checked: boolean;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n}\n\nexport default function MultipleChoiceQuestion(props: Props) {\n  return (\n    <div className=\"custom-control custom-checkbox mb-3\">\n      <input\n        className=\"custom-control-input\"\n        checked={props.checked}\n        id={`checkbox-${props.id}-${props.questionText}`}\n        type=\"checkbox\"\n        onChange={props.onChange}\n      />\n      <label\n        className=\"custom-control-label\"\n        htmlFor={`checkbox-${props.id}-${props.questionText}`}\n      >\n        {props.questionText}\n      </label>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { InHouseExposureEvent, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  id: number;\n  index: number;\n  otherPerson: PersonData;\n  inHouseExposureEventState: State<InHouseExposureEvent>;\n}\n\nexport default function InHouseExposureQuestion(props: Props) {\n  const inHouseExposureEvent = props.inHouseExposureEventState.get();\n  const isExposed = inHouseExposureEvent.exposed;\n  const isOngoing = inHouseExposureEvent.ongoing;\n  return (\n    <div className=\"mb-3\">\n      <div className=\"custom-control custom-checkbox mb-3\">\n        <input\n          className=\"custom-control-input\"\n          checked={isExposed}\n          name={`crossExposure-${props.index}-checkbox-exposure`}\n          id={`crossExposure-${props.id}-${props.index}-checkbox-exposure`}\n          type=\"checkbox\"\n          onChange={() => props.inHouseExposureEventState.exposed.set(v => !v)}\n        />\n        <label\n          className=\"custom-control-label\"\n          htmlFor={`crossExposure-${props.id}-${props.index}-checkbox-exposure`}\n        >\n          I was exposed to {props.otherPerson.name}\n        </label>\n      </div>\n      {isExposed && (\n        <div className=\"custom-control custom-checkbox mb-3\">\n          <input\n            className=\"custom-control-input\"\n            checked={isOngoing}\n            name={`crossExposure-${props.index}-checkbox-ongoing`}\n            id={`crossExposure-${props.id}-${props.index}-checkbox-ongoing`}\n            type=\"checkbox\"\n            onChange={() =>\n              props.inHouseExposureEventState.ongoing.set(v => !v)\n            }\n          />\n          <label\n            className=\"custom-control-label\"\n            htmlFor={`crossExposure-${props.id}-${props.index}-checkbox-ongoing`}\n          >\n            My exposure to {props.otherPerson.name} is ongoing\n          </label>\n        </div>\n      )}\n      {isExposed && !isOngoing && (\n        <>\n          <label htmlFor={`crossExposure-${props.id}-${props.index}`}>\n            Date exposed to {props.otherPerson.name}{\" \"}\n            <span className=\"f6 fw3\">mm/dd/yyyy</span>\n          </label>\n          <input\n            className=\"form-control\"\n            value={inHouseExposureEvent.date}\n            name={`crossExposure-${props.index}`}\n            id={`crossExposure-${props.id}-${props.index}`}\n            type=\"text\"\n            onChange={(e: React.BaseSyntheticEvent) =>\n              props.inHouseExposureEventState.date.set(e.target.value)\n            }\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","import { InHouseExposureEvent, PersonData } from \"./types\";\nimport InHouseExposureQuestion from \"./InHouseExposureQuestion\";\nimport React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  id: number;\n  meaningfulInHouseExposures: PersonData[];\n  relevantInHouseExposureEventsState: State<InHouseExposureEvent>[];\n}\n\nexport default function InHouseExposureQuestions(props: Props) {\n  return (\n    <>\n      {props.meaningfulInHouseExposures.map((otherPerson, index) => {\n        const inHouseExposureEventState = props.relevantInHouseExposureEventsState.find(\n          (eventState: State<InHouseExposureEvent>) => {\n            const event = eventState.get();\n            return (\n              event.quarantinedPerson === otherPerson.id ||\n              event.contagiousPerson === otherPerson.id\n            );\n          }\n        );\n        if (inHouseExposureEventState) {\n          return (\n            <>\n              <InHouseExposureQuestion\n                key={props.id + \"-\" + index}\n                id={props.id}\n                index={index}\n                otherPerson={otherPerson}\n                inHouseExposureEventState={inHouseExposureEventState}\n              />\n              <hr />\n            </>\n          );\n        } else {\n          return <></>;\n        }\n      })}\n    </>\n  );\n}\n","import { flow, remove, concat } from \"lodash/fp\";\nimport { CovidEventName, PersonData } from \"./types\";\n\nexport function replace<T>(array: Array<T>, old: T, updated: T): Array<T> {\n  return flow(\n    remove(e => e === old),\n    concat([updated])\n  )(array);\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function isContagious(person: PersonData) {\n  return Boolean(\n    person.covidEvents[CovidEventName.PositiveTest] ||\n      person.covidEvents[CovidEventName.SymptomsStart]\n  );\n}\n","import React from \"react\";\nimport { useState } from \"@hookstate/core\";\n\nimport { CovidEventName, InHouseExposureEvent, PersonData } from \"./types\";\nimport DateQuestion from \"./DateQuestion\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport InHouseExposureQuestions from \"./InHouseExposureQuestions\";\nimport { none, State } from \"@hookstate/core/dist\";\nimport { compact, unset } from \"lodash/fp\";\nimport { isContagious } from \"./util\";\n\ninterface Props {\n  index: number;\n  handleFocusDateField: Function;\n  handleUnfocusDateField: Function;\n\n  personState: State<PersonData>;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingState: State<number>;\n}\n\nexport default function Person(props: Props) {\n  const person = props.personState.get();\n  const members = props.membersState.get();\n  const covidEventsState = props.personState.covidEvents;\n  const editing = props.editingState.get();\n  const relevantInHouseExposureEventsState: State<\n    InHouseExposureEvent\n  >[] = props.inHouseExposureEventsState.filter(\n    (eventState: State<InHouseExposureEvent>) => {\n      const event: InHouseExposureEvent = eventState.get();\n      return (\n        event.contagiousPerson === person.id ||\n        event.quarantinedPerson === person.id\n      );\n    }\n  );\n  const relevantInHouseExposureEvents = relevantInHouseExposureEventsState.map(\n    e => e.get()\n  );\n  const selectionsState: any = useState(\n    Object.values(CovidEventName).reduce(\n      (selections: any, key: CovidEventName) => (\n        (selections[key] = covidEventsState[key].get() !== \"\"), selections\n      ),\n      {}\n    )\n  );\n  const selections = selectionsState.get();\n  const contagious =\n    selections[CovidEventName.PositiveTest] ||\n    selections[CovidEventName.SymptomsStart];\n\n  const buildQuestion = (\n    questionNumber: number,\n    fieldName: CovidEventName,\n    firstQuestionText: string\n  ) => {\n    return (\n      <div className=\"mb-3\">\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={firstQuestionText}\n          checked={selectionsState[fieldName].get()}\n          onChange={(e: React.BaseSyntheticEvent) => {\n            const checked = e.target.checked;\n            selectionsState[fieldName].set(checked);\n            if (fieldName === CovidEventName.PositiveTest) {\n              const nextContagious = Boolean(\n                checked || selections[CovidEventName.SymptomsStart]\n              );\n              if (contagious !== nextContagious) {\n                setContagiousState(nextContagious);\n              }\n            } else if (fieldName === CovidEventName.SymptomsStart) {\n              const nextContagious = Boolean(\n                checked || selections[CovidEventName.PositiveTest]\n              );\n              if (contagious !== nextContagious) {\n                setContagiousState(nextContagious);\n              }\n            }\n            if (!checked) {\n              covidEventsState[fieldName].set(\"\");\n            }\n          }}\n        />\n        {selectionsState[fieldName].get() ? (\n          <DateQuestion\n            id={person.id}\n            questionNumber={questionNumber}\n            questionFieldTextState={covidEventsState[fieldName]}\n            questionFieldName={fieldName}\n            onChange={handleChange}\n            onFocus={() => {\n              props.handleFocusDateField(fieldName);\n            }}\n            onUnfocus={() => {\n              props.handleUnfocusDateField(fieldName);\n            }}\n          />\n        ) : null}\n        <hr />\n      </div>\n    );\n  };\n\n  const handleChange = (e: React.BaseSyntheticEvent) => {\n    const name: CovidEventName = e.target.name;\n    const value: string = e.target.value;\n    covidEventsState[name].set(value);\n  };\n\n  function setContagiousState(contagious: boolean) {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    const newExposureEvents = members.map((otherPerson: PersonData) => {\n      const otherContagious = isContagious(otherPerson);\n      if (person !== otherPerson && contagious !== otherContagious) {\n        return {\n          contagiousPerson: contagious ? person.id : otherPerson.id,\n          quarantinedPerson: contagious ? otherPerson.id : person.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\"\n        };\n      }\n    });\n    props.inHouseExposureEventsState.merge(compact(newExposureEvents));\n  }\n\n  const meaningfulInHouseExposures = members.filter(\n    (otherPerson: PersonData) =>\n      person !== otherPerson && contagious !== isContagious(otherPerson)\n  );\n\n  function removeFromMembers() {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    props.membersState.set(membersState => [\n      ...membersState.slice(0, props.index),\n      ...membersState.slice(props.index + 1)\n    ]);\n  }\n\n  return (\n    <div className={\"card shadow-sm mb-2\"}>\n      {props.editingState.get() === person.id ? (\n        <div className=\"p-2\">\n          <div className=\"mb-3\">\n            <label htmlFor={`${person.id}-name`}>Name</label>\n            <input\n              className=\"form-control\"\n              value={person.name}\n              name=\"name\"\n              id={`${person.id}-name`}\n              type=\"text\"\n              onChange={(e: React.BaseSyntheticEvent) =>\n                props.personState.name.set(e.target.value)\n              }\n            />\n          </div>\n          {buildQuestion(\n            1,\n            CovidEventName.LastCloseContact,\n            \"I have been exposed to someone covid positive (outside the household)\"\n          )}\n          {buildQuestion(\n            2,\n            CovidEventName.PositiveTest,\n            \"I have received a positive test result\"\n          )}\n          {buildQuestion(\n            2,\n            CovidEventName.SymptomsStart,\n            \"I have shown positive symptoms\"\n          )}\n          <InHouseExposureQuestions\n            id={person.id}\n            meaningfulInHouseExposures={meaningfulInHouseExposures}\n            relevantInHouseExposureEventsState={\n              relevantInHouseExposureEventsState\n            }\n          />\n          <div className={\"d-flex justify-content-between align-items-center\"}>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => {\n                removeFromMembers();\n                props.editingState.set(-1);\n              }}\n            >\n              <span className=\"visually-hidden\">Remove</span>\n              Remove\n              <i\n                aria-hidden=\"true\"\n                className=\"pl2 fas fa-times-circle white\"\n              ></i>\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => props.editingState.set(-1)}\n            >\n              {person.isNewPerson ? \"Submit\" : \"Update\"}\n            </button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"card-body\">\n          <h4 className=\"d-flex justify-content-between align-items-center mb-3\">\n            <span>{person.name + \" \"}</span>\n            <span>\n              {editing === -1 && (\n                <button onClick={() => props.editingState.set(person.id)}>\n                  <span className=\"visually-hidden\">Edit Person</span>\n                  <span aria-hidden=\"true\" className=\"f5 fas fa-pen\"></span>\n                </button>\n              )}\n            </span>\n          </h4>\n          <div className=\"\">\n            {Object.entries(person.covidEvents).map(\n              ([name, date]: [string, string]) => {\n                if (date !== \"\") {\n                  return (\n                    <div className=\"f5\">\n                      {name}\n                      {\": \"} {date}\n                    </div>\n                  );\n                }\n              }\n            )}\n            {Object.values(relevantInHouseExposureEvents).map(\n              (event: InHouseExposureEvent) => {\n                if (event.exposed) {\n                  const quarantinedPersonName = members.find(\n                    member => member.id === event.quarantinedPerson\n                  )?.name;\n                  const contagiousPersonName = members.find(\n                    member => member.id === event.contagiousPerson\n                  )?.name;\n                  if (event.ongoing) {\n                    return (\n                      <div className=\"f5\">\n                        {quarantinedPersonName} has an ongoing exposure to{\" \"}\n                        {contagiousPersonName}{\" \"}\n                      </div>\n                    );\n                  } else {\n                    return (\n                      <div className=\"f5\">\n                        {quarantinedPersonName} exposed to{\" \"}\n                        {contagiousPersonName} at {event.date}\n                      </div>\n                    );\n                  }\n                }\n              }\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { CalculationResult, InHouseExposureEvent, PersonData } from \"./types\";\nimport Person from \"./Person\";\nimport { State } from \"@hookstate/core/dist\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { format, isValid } from \"date-fns\";\n\ninterface Props {\n  handleAddNewPerson: Function;\n  handleFocusDateField: Function;\n  handleUnfocusDateField: Function;\n\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingState: State<number>;\n}\n\nexport default function Household(props: Props) {\n  const editing = props.editingState.get();\n  const members = props.membersState.get();\n  const inHouseExposureEvents = props.inHouseExposureEventsState.get();\n  return (\n    <>\n      <div className=\"p-3\">\n        {editing === -1 && (\n          <button\n            className=\"btn btn-primary mb-2\"\n            onClick={() => {\n              props.handleAddNewPerson();\n            }}\n          >\n            <i className=\"fa fa-user-plus\" aria-hidden=\"true\"></i> Add Person\n          </button>\n        )}\n        {props.membersState.map(\n          (personState: State<PersonData>, index: number) => {\n            const person = personState.get();\n            const id = person.id;\n            return (\n              <Person\n                key={id}\n                index={index}\n                personState={personState}\n                membersState={props.membersState}\n                inHouseExposureEventsState={props.inHouseExposureEventsState}\n                editingState={props.editingState}\n                handleFocusDateField={props.handleFocusDateField}\n                handleUnfocusDateField={props.handleUnfocusDateField}\n              />\n            );\n          }\n        )}\n        <hr />\n        <div className={\"p-1\"}>\n          <h4>Guidance</h4>\n          {computeHouseHoldQuarantinePeriod(members, inHouseExposureEvents).map(\n            (result: CalculationResult) => {\n              return (\n                <div className=\"p32\">\n                  {result.person.name} {\" should quarantine from \"}{\" \"}\n                  {isValid(result.startDate) &&\n                    format(result.startDate, \"MM/dd/yyyy\")}\n                  {\" until \"}{\" \"}\n                  {isValid(result.endDate) &&\n                    format(result.endDate, \"MM/dd/yyyy\")}\n                  {\".\"}\n                </div>\n              );\n            }\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { useState } from \"@hookstate/core\";\nimport GridView from \"./GridView\";\nimport Household from \"./Household\";\nimport { CovidEventName, InHouseExposureEvent, PersonData } from \"./types\";\nimport { compact } from \"lodash/fp\";\nimport { getRandomInt, isContagious } from \"./util\";\n\nexport default function App() {\n  const initialMembers: PersonData[] = [\n    {\n      id: 1,\n      name: `Alice`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"8/25/2020\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.SymptomsEnd]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      isNewPerson: false,\n      editing: false\n    },\n    {\n      id: 2,\n      name: `Bob`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"8/28/2020\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.SymptomsEnd]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      isNewPerson: false,\n      editing: false\n    }\n  ];\n  const members = useState(initialMembers);\n  const inHouseExposureEvents = useState([] as InHouseExposureEvent[]);\n  const editing = useState(-1); // ID of person being edited or -1 if no one\n  const id = useState(members.length + 1);\n  const selectingDateFieldState = useState<CovidEventName | undefined>(\n    undefined\n  );\n\n  function createInHouseExposureEvents(newPerson: PersonData) {\n    const newExposureEvents = members.get().map((person: PersonData) => {\n      if (isContagious(person)) {\n        return {\n          contagiousPerson: person.id,\n          quarantinedPerson: newPerson.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\"\n        };\n      }\n    });\n    inHouseExposureEvents.merge(compact(newExposureEvents));\n  }\n\n  const handleAddNewPerson = () => {\n    const currentId = id.get();\n    const newPerson = {\n      id: currentId,\n      name: `Person ${getRandomInt(1000)}`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.SymptomsEnd]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      isNewPerson: true,\n      editing: true\n    };\n    id.set(id => id + 1);\n    members.set(members => [...members, newPerson]);\n    editing.set(currentId);\n    createInHouseExposureEvents(newPerson);\n  };\n\n  return (\n    <>\n      <div className=\"navbar navbar-dark bg-dark shadow-sm\">\n        <div className=\"container d-flex justify-content-between\">\n          <a href=\"#\" className=\"navbar-brand d-flex align-items-center\">\n            <strong>Covid Quarantine Calculator</strong>\n          </a>\n          <div className=\"white f7 fw5\">\n            This page is a work in progress.\n            Its instructions may be incorrect.\n            Consult <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-have-been-around-someone-covid-19\">\n              the MultCo website</a> or the latest CDC guildlines for accurate Covid information. </div>\n        </div>\n      </div>\n      <main className={\"row\"}>\n        <div className={\"col-md-5\"}>\n          <Household\n            membersState={members}\n            inHouseExposureEventsState={inHouseExposureEvents}\n            editingState={editing}\n            handleAddNewPerson={handleAddNewPerson}\n            handleFocusDateField={(fieldName: CovidEventName) => {\n              selectingDateFieldState.set(fieldName);\n            }}\n            handleUnfocusDateField={(fieldName: CovidEventName) => {\n              selectingDateFieldState.set(undefined);\n            }}\n          />\n        </div>\n        <div className={\"col-md-7\"}>\n          <GridView\n            membersState={members}\n            editing={editing.get()}\n            selectingDateFieldState={selectingDateFieldState}\n            inHouseExposureEvents={inHouseExposureEvents.get()}\n          />\n        </div>\n      </main>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}