{"version":3,"sources":["types.ts","DateQuestion.tsx","MultipleChoiceQuestion.tsx","InHouseExposureQuestion.tsx","InHouseExposureQuestions.tsx","util.tsx","Person.tsx","calculator.ts","Household.tsx","GridView.tsx","Home.tsx","App.tsx","index.tsx"],"names":["CovidEventName","colors","DateQuestion","props","questionFieldText","questionFieldTextState","get","parsedDate","parse","Date","questionFieldDate","isValid","className","htmlFor","id","questionFieldName","selected","onChange","date","validDate","set","format","name","MultipleChoiceQuestion","checked","questionText","type","tooltip","aria-hidden","InHouseExposureQuestion","inHouseExposureEvent","inHouseExposureEventState","isExposed","exposed","isOngoing","ongoing","person","otherPerson","v","ongoingState","newOngoing","index","InHouseExposureQuestions","meaningfulInHouseExposures","map","relevantInHouseExposureEventsState","find","eventState","event","quarantinedPerson","contagiousPerson","key","isContagious","Boolean","covidEvents","PositiveTest","SymptomsStart","Person","personState","members","membersState","covidEventsState","editingPerson","editingPersonState","editingHousehold","editingHouseholdState","inHouseExposureEventsState","filter","relevantInHouseExposureEvents","e","selectionsState","useState","Object","values","reduce","selections","contagious","onCheckboxChange","fieldName","target","nextContagious","setContagiousState","buildCovidEventQuestion","none","newExposureEvents","otherContagious","dateMissing","dateInvalid","merge","compact","value","LastCloseContact","href","symptomsStart","noSymptomsFor24Hours","c","buildSymptomsQuestion","onClick","undefined","isNewPerson","guidance","endDate","infected","peopleWithOngoingExposureWithSymptoms","length","names","join","guidanceMessage","entries","quarantinedPersonName","member","contagiousPersonName","computeHouseHoldQuarantinePeriod","household","inHouseExposures","flow","isolationPeriod","covidPositiveEvents","illnessOnset","thru","dates","min","tenDaysAfterOnset","addDays","symptomsEnd","isolationEndDate","max","computeIsolationPeriod","startDate","partition","infectedGuidances","updatedQuarantinedGuidance","relevantInHouseExposures","normalize","infectedGuidance","infectionSource","normalizedInHouseExposures","exposures","outHouseExposureDateString","outHouseExposureDate","outHouseExposure","addOutsideExposures","earliestExposure","minBy","exposure","latestExposure","maxBy","personWithOngoingExposure","computeQuarantineGuidance","Household","style","display","flexWrap","minHeight","height","to","personGuidance","addNewPerson","GridView","plugins","dayGridPlugin","interactionPlugin","initialView","events","inHouseExposureEvents","classNames","title","start","end","color","textColor","computeEvents","dateClick","info","Home","role","App","window","innerHeight","updateHeight","useEffect","addEventListener","removeEventListener","basename","process","path","currentId","newPerson","Math","floor","random","editing","rootElement","document","getElementById","ReactDOM","render"],"mappings":"iHASYA,E,mFAAAA,K,6CAAAA,E,8BAAAA,E,0CAAAA,M,KAiCL,IAAMC,EAAS,CACpB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,W,mDCvCa,SAASC,EAAaC,GACnC,IAAMC,EAAoBD,EAAME,uBAAuBC,MACjDC,EAAaC,kBAAMJ,EAAmB,YAAa,IAAIK,MACvDC,EAAoBC,kBAAQJ,GAAcA,EAAa,IAAIE,KAEjE,OACE,yBAAKG,UAAU,IACb,2BAAOC,QAAO,UAAKV,EAAMW,GAAX,YAAiBX,EAAMY,oBAArC,QACO,0BAAMH,UAAU,UAAhB,eAEP,kBAAC,IAAD,CACEA,UAAU,eACVI,SAAUN,EACVO,SAAU,SAACC,GACT,IAAMC,EAAYR,kBAAQO,GAAQA,EAAO,IAAIT,KAC7CN,EAAME,uBAAuBe,IAAIC,kBAAOF,EAAW,gBAErDG,KAAMnB,EAAMY,kBACZD,GAAE,UAAKX,EAAMW,GAAX,YAAiBX,EAAMY,sB,YCblB,SAASQ,EAAuBpB,GAC7C,OACE,yBAAKS,UAAU,uCACb,2BACEA,UAAU,uBACVY,QAASrB,EAAMqB,QACfV,GAAE,mBAAcX,EAAMW,GAApB,YAA0BX,EAAMsB,cAClCC,KAAK,WACLT,SAAUd,EAAMc,WAElB,kBAAC,IAAD,KACE,2BACEL,UAAU,uBACVC,QAAO,mBAAcV,EAAMW,GAApB,YAA0BX,EAAMsB,eAEtCtB,EAAMsB,aACNtB,EAAMwB,SACL,kBAAC,IAAD,KACE,uBACEC,cAAY,OACZhB,UAAU,4DAKjBT,EAAMwB,SACL,kBAAC,IAAD,KACE,yBAAKf,UAAU,WAAWT,EAAMwB,YC5B7B,SAASE,EAAwB1B,GAC9C,IAAM2B,EAAuB3B,EAAM4B,0BAA0BzB,MACvD0B,EAAYF,EAAqBG,QACjCC,EAAYJ,EAAqBK,QACvC,OACE,yBAAKvB,UAAU,QACb,kBAACW,EAAD,CACET,GAAIX,EAAMW,GACVW,aAAY,UAAKtB,EAAMiC,OAAOd,KAAlB,mCAAiDnB,EAAMkC,YAAYf,MAC/EE,QAASQ,EACTf,SAAU,kBAAMd,EAAM4B,0BAA0BE,QAAQb,KAAI,SAAAkB,GAAC,OAAKA,QAEnEN,GACC,kBAACT,EAAD,CACET,GAAIX,EAAMW,GACVW,aAAY,UAAKtB,EAAMiC,OAAOd,KAAlB,iCAA+CnB,EAAMkC,YAAYf,KAAjE,eACZE,QAASU,EACTjB,SAAU,WACR,IAAMsB,EAAepC,EAAM4B,0BAA0BI,QAE/CK,GADUD,EAAajC,MAE7BiC,EAAanB,IAAIoB,GACbA,EACFrC,EAAM4B,0BAA0Bb,KAAKE,IAAI,IAEzCjB,EAAM4B,0BAA0Bb,KAAKE,IACnCC,kBAAO,IAAIZ,KAAQ,kBAM5BuB,IAAcE,GACb,kBAAChC,EAAD,CACEY,GAAIX,EAAMW,GACVT,uBAAwBF,EAAM4B,0BAA0Bb,KACxDH,kBAAiB,wBAAmBZ,EAAMsC,UCxCrC,SAASC,EAAyBvC,GAC/C,OACE,oCACGA,EAAMwC,2BAA2BC,KAAI,SAACP,EAAaI,GAClD,IAAMV,EAA4B5B,EAAM0C,mCAAmCC,MACzE,SAACC,GACC,IAAMC,EAAQD,EAAWzC,MACzB,OACE0C,EAAMC,oBAAsBZ,EAAYvB,IACxCkC,EAAME,mBAAqBb,EAAYvB,MAI7C,OAAIiB,EAEA,oCACE,kBAACF,EAAD,CACEsB,IAAKhD,EAAMiC,OAAOtB,GAAK,IAAM2B,EAC7B3B,GAAIX,EAAMiC,OAAOtB,GACjB2B,MAAOA,EACPL,OAAQjC,EAAMiC,OACdC,YAAaA,EACbN,0BAA2BA,IAE7B,8BAIG,yC,WCzBV,SAASqB,EAAahB,GAC3B,OAAOiB,QACLjB,EAAOkB,YAAYtD,EAAeuD,eAChCnB,EAAOkB,YAAYtD,EAAewD,gBCGzB,SAASC,EAAOtD,GAC7B,IAAMiC,EAASjC,EAAMuD,YAAYpD,MAC3BqD,EAAUxD,EAAMyD,aAAatD,MAC7BuD,EAAmB1D,EAAMuD,YAAYJ,YACrCQ,EAAgB3D,EAAM4D,mBAAmBzD,MACzC0D,EAAmB7D,EAAM8D,sBAAsB3D,MAC/CuC,EAEA1C,EAAM+D,2BAA2BC,QACrC,SAACpB,GACC,IAAMC,EAAyBD,EAAWzC,MAC1C,OACE0C,EAAME,mBAAqBd,EAAOtB,IAClCkC,EAAMC,oBAAsBb,EAAOtB,MAInCsD,EAAgCvB,EAAmCD,KACvE,SAAAyB,GAAC,OAAIA,EAAE/D,SAEHgE,EAAuBC,YAC3BC,OAAOC,OAAOzE,GAAgB0E,QAC5B,SAACC,EAAiBxB,GAAlB,OACGwB,EAAWxB,GAAuC,KAAhCU,EAAiBV,GAAK7C,MAAeqE,IAE1D,KAGEA,EAAaL,EAAgBhE,MAC7BsE,EACJD,EAAW3E,EAAeuD,eAC1BoB,EAAW3E,EAAewD,eAE5B,SAASqB,EAAiBC,GACxB,OAAO,SAACT,GACN,IAAM7C,EAAU6C,EAAEU,OAAOvD,QAEzB,GADA8C,EAAgBQ,GAAW1D,IAAII,GAC3BsD,IAAc9E,EAAeuD,aAAc,CAC7C,IAAMyB,EAAiB3B,QACrB7B,GAAWmD,EAAW3E,EAAewD,gBAEnCoB,IAAeI,GACjBC,EAAmBD,QAEhB,GAAIF,IAAc9E,EAAewD,cAAe,CACrD,IAAMwB,EAAiB3B,QACrB7B,GAAWmD,EAAW3E,EAAeuD,eAEnCqB,IAAeI,GACjBC,EAAmBD,GAGlBxD,EAGHqC,EAAiBiB,GAAW1D,IAAIC,kBAAO,IAAIZ,KAAQ,eAFnDoD,EAAiBiB,GAAW1D,IAAI,KAOtC,SAAS8D,EACPJ,EACArD,EACAE,GAEA,OACE,oCACE,kBAACJ,EAAD,CACET,GAAIsB,EAAOtB,GACXW,aAAcA,EACdD,QAAS8C,EAAgBQ,GAAWxE,MACpCW,SAAU4D,EAAiBC,GAC3BnD,QAASA,IAEV2C,EAAgBQ,GAAWxE,OAC1B,kBAACJ,EAAD,CACEY,GAAIsB,EAAOtB,GACXT,uBAAwBwD,EAAiBiB,GACzC/D,kBAAmB+D,KA2D7B,SAASG,EAAmBL,GAC1B/B,EAAmCD,KAAI,SAAAyB,GAAC,OAAIA,EAAEjD,IAAI+D,QAClD,IAAMC,EAAoBzB,EAAQf,KAAI,SAACP,GACrC,IAAMgD,EAAkBjC,EAAaf,GACrC,GAAID,IAAWC,GAAeuC,IAAeS,EAC3C,MAAO,CACLnC,iBAAkB0B,EAAaxC,EAAOtB,GAAKuB,EAAYvB,GACvDmC,kBAAmB2B,EAAavC,EAAYvB,GAAKsB,EAAOtB,GACxDmB,SAAS,EACTE,SAAS,EACTjB,KAAM,GACNoE,aAAa,EACbC,aAAa,MAInBpF,EAAM+D,2BAA2BsB,MAAMC,kBAAQL,IAGjD,IAAMzC,EAA6BgB,EAAQQ,QACzC,SAAC9B,GAAD,OACED,IAAWC,GAAeuC,IAAexB,EAAaf,MA0N1D,OAAOyB,IAAkB1B,EAAOtB,GAhI5B,yBAAKF,UAAW,uBACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,QACb,2BAAOC,QAAO,UAAKuB,EAAOtB,GAAZ,UAAd,QACA,2BACEF,UAAU,eACV8E,MAAOtD,EAAOd,KACdA,KAAK,OACLR,GAAE,UAAKsB,EAAOtB,GAAZ,SACFY,KAAK,OACLT,SAAU,SAACoD,GAAD,OACRlE,EAAMuD,YAAYpC,KAAKF,IAAIiD,EAAEU,OAAOW,WAI1C,yBAAK9E,UAAU,QACZsE,EACClF,EAAe2F,iBADO,UAEnBvD,EAAOd,KAFY,qFAGtB,yEAEE,wBAAIV,UAAU,aACZ,gGAIA,uEACA,uGAIA,sEACA,kGAII,IACN,uBAAGgF,KAAK,6EAAR,WAKJ,8BAEF,yBAAKhF,UAAU,QACZsE,EACClF,EAAeuD,aADO,UAEnBnB,EAAOd,KAFY,yCAIxB,8BAEF,yBAAKV,UAAU,QAtNvB,WACE,IACMiF,EADqBvB,EAAgBtE,EAAewD,eACjBlD,MACzC,OACE,oCACE,kBAACiB,EAAD,CACET,GAAIsB,EAAOtB,GACXW,aAAY,UAAKW,EAAOd,KAAZ,gCACZE,QAASqE,EACT5E,SAAU4D,EAAiB7E,EAAewD,eAC1C7B,QACE,4CACc,IACZ,uBAAGiE,KAAK,4EAAR,eAEK,IAJP,0CAK0C,OAI7CC,EACC,kBAAC3F,EAAD,CACEY,GAAIsB,EAAOtB,GACXT,uBACEwD,EAAiB7D,EAAewD,eAElCzC,kBAAmBf,EAAewD,gBAElC,KACJ,yBAAK5C,UAAW,SACfiF,EACC,kBAACtE,EAAD,CACET,GAAIsB,EAAOtB,GACXW,aAAY,UAAKW,EAAOd,KAAZ,gDACZE,QAASrB,EAAMuD,YAAYoC,qBAAqBxF,MAChDW,SAAU,kBAAMd,EAAMuD,YAAYoC,qBAAqB1E,KAAI,SAAA2E,GAAC,OAAKA,MACjEpE,QACE,2MAG+C,IAC7C,uBAAGiE,KAAK,8EAAR,SAEK,OAIT,MAwKCI,GACD,8BAEF,kBAACtD,EAAD,CACEN,OAAQA,EACRO,2BAA4BA,EAC5BE,mCACEA,IAGJ,yBAAKjC,UAAW,qDACd,4BACEA,UAAU,oBACVqF,QAAS,WAvJnBpD,EAAmCD,KAAI,SAAAyB,GAAC,OAAIA,EAAEjD,IAAI+D,QAClDhF,EAAMuD,YAAYtC,IAAI+D,KAwJVhF,EAAM4D,mBAAmB3C,SAAI8E,KAG/B,0BAAMtF,UAAU,mBAAhB,UAPF,SASE,uBACEgB,cAAY,OACZhB,UAAU,mCAGd,4BACEA,UAAU,kBACVqF,QAAS,WACP9F,EAAM4D,mBAAmB3C,SAAI8E,KAG9B9D,EAAO+D,YAAc,SAAW,aAUzC,yBAAKvF,UAAW,uBACd,yBAAKA,UAAU,aACb,yBAAKA,UAAW,IACd,wBAAIA,UAAU,qDACZ,0BAAMA,UAAU,IACbwB,EAAOd,KAAO,GAnLvB0C,EACK,KAEH7D,EAAMiG,SAASC,QACVlG,EAAMiG,SAASE,SAAW,aAAe,gBAEzC,MAgLD,+BACIxC,GACA,4BACEmC,QAAS,WACP9F,EAAM8D,sBAAsB7C,KAAI,GAChCjB,EAAM4D,mBAAmB3C,IAAIgB,EAAOtB,MAGtC,0BAAMF,UAAU,mBAAhB,eACA,0BAAMgB,cAAY,OAAOhB,UAAU,sBAKzCoD,GACA,uBAAGpD,UAAU,mBA1LzB,SAAyBwF,GACvB,GAAIA,EAASC,QAAS,CACpB,IAOO,EAPDnF,EAAOG,kBAAO+E,EAASC,QAAS,cACtC,GAAID,EAASE,SACX,OAAIF,EAAShE,OAAO0D,qBACZ,SAAN,OAAgB5E,GAEV,kBAAN,OAAyBA,EAAzB,wCAGF,aAAIkF,EAASG,6CAAb,aAAI,EAAgDC,OAAQ,CAAC,IAAD,EACpDC,EAAK,UAAGL,EAASG,6CAAZ,aAAG,EAAgDG,KAC5D,MAEF,MAAM,kBAAN,OAAyBxF,EAAzB,wDAA6EuF,GAE7E,MAAM,SAAN,OAAgBvF,IA2KTyF,CAAgBxG,EAAMiG,YAI7B,yBAAKxF,UAAW,SACfoD,GAxKL,yBAAKpD,UAAU,IACZ4D,OAAOoC,QAAQxE,EAAOkB,aAAaV,KAClC,YAAqC,IAAD,mBAAlCtB,EAAkC,KAA5BJ,EAA4B,KAClC,GAAa,KAATA,EACF,OACE,yBAAKN,UAAU,MACZU,EACA,KAFH,IAEUJ,MAMjBsD,OAAOC,OAAOL,GAA+BxB,KAC5C,SAACI,GACC,GAAIA,EAAMf,QAAS,CAAC,IAAD,IACX4E,EAAqB,UAAGlD,EAAQb,MACpC,SAAAgE,GAAM,OAAIA,EAAOhG,KAAOkC,EAAMC,4BADL,aAAG,EAE3B3B,KACGyF,EAAoB,UAAGpD,EAAQb,MACnC,SAAAgE,GAAM,OAAIA,EAAOhG,KAAOkC,EAAME,2BADN,aAAG,EAE1B5B,KACH,OAAI0B,EAAMb,QAEN,yBAAKvB,UAAU,MACZiG,EADH,8BACqD,IAClDE,EAAsB,KAKzB,yBAAKnG,UAAU,MACZiG,EADH,eACsCE,EADtC,MAC+D,IAC5D/D,EAAM9B,a,YC1OpB,SAAS8F,EACdC,EACAC,GACa,IAAD,EACsCC,eAChDvE,eAAI,SAACR,GACH,IAAMgF,EAyBL,SAAgChF,GACrC,IAAMiF,EAAsB,CAC1BjF,EAAOkB,YAAYtD,EAAewD,eAClCpB,EAAOkB,YAAYtD,EAAeuD,eAE9B+D,EAAeH,eACnB1B,UACA7C,eAAI,SAAC1B,GAAD,OAAkBV,kBAAMU,EAAM,YAAa,IAAIT,SACnD8G,gBAAK,SAACC,GAAD,OAAmBC,cAAID,MAHTL,CAInBE,GACF,GAAIC,EAAc,CAChB,IAAMI,EAAoBC,kBAAQL,EAAc,IAC1CM,EAAcxF,EAAO0D,0BAAuBI,EAAY,IAAIzF,KAC5DoH,EAAmBV,eACvB1B,UACA8B,gBAAK,SAACC,GAAD,OAAmBM,cAAIN,MAFLL,CAGvB,CAACO,EAAmBE,IACtB,MAAO,CAACN,EAAcO,IA1CIE,CAAuB3F,GAC/C,GAAIgF,EAAiB,CAAC,IAAD,cACUA,EADV,GAEnB,MAAO,CACLhF,OAAQA,EACRkE,UAAU,EACV0B,UALiB,KAMjB3B,QANiB,MASnB,MAAO,CACLjE,OAAQA,EACRkE,UAAU,MAIhB2B,qBAAU,SAAAlC,GAAC,OAAIA,EAAEO,YAlB+Ba,CAmBhDF,GApBU,mBACLiB,EADK,KAqBNC,EArBM,KAqBwDvF,KAClE,SAAAwD,GAAQ,OA2BZ,SACEA,EACAc,EACAgB,GAEA,IAAM9F,EAASgE,EAAShE,OAClBgG,EAA2BjE,kBAC/B,SAACnB,GAAD,OACEA,EAAMC,oBAAsBb,EAAOtB,IAAMkC,EAAMf,UAFlBkC,CAG/B+C,GACImB,EAAYzF,eAAI,SAACI,GACrB,IAAMsF,EAAmBJ,EAAkBpF,MACzC,SAAAsD,GAAQ,OAAIA,EAAShE,OAAOtB,KAAOkC,EAAME,oBAE3C,OAAIF,EAAMb,QACD,CACL6F,UAAWM,EAAiBN,UAC5B3B,QAASiC,EAAiBjC,QAC1BkC,gBAAiBD,EAAiBlG,QAG7B,CACL4F,UAAWM,EAAiBN,UAC5B3B,QAAS7F,kBAAMwC,EAAM9B,KAAM,YAAa,IAAIT,MAC5C8H,gBAAiBD,EAAiBlG,WAIlCoG,EAA6B/C,kBACjC4C,EAAUD,IAENK,EA+BR,SAA6BrG,EAAoBqG,GAC/C,IAAMC,EACJtG,EAAOkB,YAAYtD,EAAe2F,kBACpC,GAAI+C,EAA4B,CAC9B,IAAMC,EAAuBnI,kBAC3BkI,EACA,YACA,IAAIjI,MAEAmI,EAAmB,CACvBZ,UAAWW,EACXtC,QAASsC,EACTJ,qBAAiBrC,GAEnBuC,EAAS,sBAAOA,GAAP,CAAkBG,IAE7B,OAAOH,EA/CWI,CAAoBzG,EAAQoG,GACxCM,EAAmBC,iBAAM,SAAAC,GAAQ,OAAIA,EAAShB,YAAWS,GACzDQ,EAAiBC,iBAAM,SAAAF,GAAQ,OAAIA,EAAS3C,UAASoC,GACvDT,EAAS,OAAGc,QAAH,IAAGA,OAAH,EAAGA,EAAkBd,UAC9B3B,OAAUH,EACV+C,IACF5C,EAAUsB,kBAAQsB,EAAe5C,QAAS,KAE5C,IAAME,EAAwCY,eAC5CvE,eAAI,SAACI,GACH,GAAIA,EAAMb,QAAS,CAAC,IAAD,EACXgH,EAAyB,UAAGjB,EAAkBpF,MAClD,SAAAsD,GAAQ,OAAIA,EAAShE,OAAOtB,KAAOkC,EAAME,2BADZ,aAAG,EAE/Bd,OACH,KAAI,OAAC+G,QAAD,IAACA,OAAD,EAACA,EAA2BrD,sBAC9B,cAAOqD,QAAP,IAAOA,OAAP,EAAOA,EAA2B7H,SAIxCmE,UAX4C0B,CAY5CiB,GACF,MAAO,CACLhG,OAAQA,EACRkE,UAAU,EACV0B,UAAWA,EACX3B,QAASA,EACTkC,gBAAiBU,GAAkBA,EAAeV,gBAClDhC,sCAAuCA,GApFrC6C,CAA0BhD,EAAUc,EAAkBgB,MAE1D,MAAM,GAAN,mBAAWA,GAAX,YAAiCC,I,YCjCpB,SAASkB,EAAUlJ,GAChC,IAAM6D,EAAmB7D,EAAM8D,sBAAsB3D,MAC/CwD,EAAgB3D,EAAM4D,mBAAmBzD,MAGzC8F,EAAWY,EAFD7G,EAAMyD,aAAatD,MACLH,EAAM+D,2BAA2B5D,OAqD/D,OACE,oCACE,yBACEgJ,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,UAAWtJ,EAAMuJ,OAAOpJ,MAAQ,OAGlC,yBAAKM,UAAW,YACd,gCACE,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,4CACb,8BACA,kBAAC,IAAD,CAAM+I,GAAG,IAAI/I,UAAW,QAAxB,YAMN,yBAAKA,UAAW,aACd,yBAAKA,UAAW,SAnEpBoD,EAEA,oCACE,kDACA,uBAAGpD,UAAU,mBAAb,+CAOF,oCACE,kDACA,uBAAGA,UAAU,mBAAb,kLAGyC,IACvC,uBAAGgF,KAAK,wEAAR,oBAJF,MAwDE,6BACGzF,EAAMyD,aAAahB,KAAI,SAACc,GACvB,IACM5C,EADS4C,EAAYpD,MACTQ,GACZ8I,EAAiBxD,EAAStD,MAAK,SAAAiD,GAAC,OAAIA,EAAE3D,OAAOtB,KAAOA,KAC1D,GAAI8I,EACF,OACE,kBAACnG,EAAD,CACEN,IAAKrC,EACL4C,YAAaA,EACbE,aAAczD,EAAMyD,aACpBM,2BACE/D,EAAM+D,2BAERD,sBAAuB9D,EAAM8D,sBAC7BF,mBAAoB5D,EAAM4D,mBAC1BqC,SAAUwD,SAMlB9F,GACA,yBACElD,UAAW,sBACXqF,QAAS,WACP9F,EAAM8D,sBAAsB7C,KAAI,GAChCjB,EAAM0J,iBAGR,4BAAQjJ,UAAW,aACjB,wBAAIA,UAAW,IAAf,kBAEE,uBAAGA,UAAU,kBAAkBgB,cAAY,YA1EvDoC,EAEA,4BACEpD,UAAU,uBACVqF,QAAS,kBAAM9F,EAAM8D,sBAAsB7C,KAAI,KAFjD,sBASA,kBAAC,IAAD,CAAMuI,GAAG,KACP,4BAAQ/I,UAAU,wBAAlB,sBAsEF,yBAAKA,UAAW,qB,4BCxHT,SAASkJ,EAAS3J,GAC/B,IAAMwD,EAAUxD,EAAMyD,aAAatD,MAsBnC,OACE,yBAAKM,UAAW,OACd,6BACE,kBAAC,IAAD,CACEmJ,QAAS,CAACC,IAAeC,KACzBC,YAAY,eACZC,OA3BR,SACExG,EACAyG,GAEA,OAAOjD,eACLvE,eAAI,SAACwD,GACH,GAAIA,EAASC,QACX,MAAO,CACLgE,WAAY,CAAC,QACbC,MAAOlE,EAAShE,OAAOd,KACvBiJ,MAAOnE,EAAS4B,UAChBwC,IAAKpE,EAASC,QACdoE,MAAOxK,EAAOmG,EAAShE,OAAOtB,GAAM,EAAIb,EAAOuG,QAC/CkE,UAAW,cAIjBjF,UAbK0B,CAcLH,EAAiCrD,EAASyG,IAS9BO,CAAchH,EAASxD,EAAMiK,uBACrCQ,UAAW,SAACC,SCpCP,SAASC,EAAK3K,GAC3B,IAAMwD,EAAUxD,EAAMyD,aAAatD,MAyCnC,OACE,oCACE,gCACE,yBAAKM,UAAU,UACb,yBAAKA,UAAU,4CACb,yBAAKA,UAAU,0CAAf,kDAGA,2CAIN,0BAAMA,UAAW,OAAQmK,KAAM,QAC7B,6BAASnK,UAAW,aAClB,yBAAKA,UAAU,aApDjB+C,EAAQ6C,OAER,oCACE,6EACA,uBAAG5F,UAAU,mBAAb,kLAGyC,IACvC,uBAAGgF,KAAK,wEAAR,oBAJF,KASA,2BACE,kBAAC,IAAD,CAAM+D,GAAG,aAAa/I,UAAU,wBAAhC,kBAQJ,oCACE,wFACA,uBAAGA,UAAU,mBAAb,0EAIA,2BACE,kBAAC,IAAD,CAAM+I,GAAG,aAAa/I,UAAU,wBAAhC,oBA0BL+C,EAAQ6C,OACP,kBAACsD,EAAD,CACElG,aAAczD,EAAMyD,aACpBwG,sBAAuBjK,EAAM+D,2BAA2B5D,QAExD,KACJ,4BAAQM,UAAW,QACjB,yBAAKA,UAAW,4CACd,uBAAGgF,KAAM,+BAAT,gBACA,uBAAGA,KAAK,4EAAR,+BAGA,uBAAGA,KAAK,6EAAR,mC,WCzEK,SAASoF,IACtB,IAAMtB,EAASnF,YAAS0G,OAAOC,aACzBC,EAAe,WACnBzB,EAAOtI,IAAI6J,OAAOC,cAEpBE,qBAAU,WAER,OADAH,OAAOI,iBAAiB,SAAUF,GAC3B,kBAAMF,OAAOK,oBAAoB,SAAUH,MACjD,IACH,IAAMxH,EAAUY,YAAS,IACnB6F,EAAwB7F,YAA4B,IACpDzD,EAAKyD,YAASZ,EAAQ6C,OAAS,GAC/BvC,EAAwBM,aAAS,GACjCR,EAAqBQ,iBAA6B2B,GAmCxD,OACE,kBAAC,IAAD,CAAQqF,SAAQ,UAAKC,oBACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cACV,kBAACpC,EAAD,CACEQ,aAtCV,WAAyB,IAAD,ENdG/B,EMenB4D,EAAY5K,EAAGR,MACfqL,EAAY,CAChB7K,GAAI4K,EACJpK,KAAK,UAAD,QNlBmBwG,EMkBM,INjB1B8D,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM/D,MMkBzCxE,aAAW,mBACRtD,EAAe2F,iBAAmB,IAD1B,cAER3F,EAAewD,cAAgB,IAFvB,cAGRxD,EAAeuD,aAAe,IAHtB,GAKXuC,sBAAsB,EACtBK,aAAa,EACb4F,SAAS,GAEXjL,EAAGM,KAAI,SAAAN,GAAE,OAAIA,EAAK,KAClB6C,EAAQvC,KAAI,SAAAuC,GAAO,4BAAQA,GAAR,CAAiBgI,OACpC5H,EAAmB3C,IAAIsK,GACvB,IAAMtG,EAAoBzB,EAAQrD,MAAMsC,KAAI,SAACR,GAC3C,GAAIgB,EAAahB,GACf,MAAO,CACLc,iBAAkBd,EAAOtB,GACzBmC,kBAAmB0I,EAAU7K,GAC7BmB,SAAS,EACTE,SAAS,EACTjB,KAAM,GACNoE,aAAa,EACbC,aAAa,MAInB6E,EAAsB5E,MAAMC,kBAAQL,KAS5BnB,sBAAuBA,EACvBF,mBAAoBA,EACpB2F,OAAQA,EACRxF,2BAA4BkG,EAC5BxG,aAAcD,KAGlB,kBAAC,IAAD,CAAO8H,KAAK,KACV,kBAACX,EAAD,CACElH,aAAcD,EACdO,2BAA4BkG,OCpExC,IAAM4B,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAACpB,EAAD,MAASgB,I","file":"static/js/main.7a232daa.chunk.js","sourcesContent":["export interface PersonData {\n  id: number;\n  name: string;\n  covidEvents: CovidEvents;\n  noSymptomsFor24Hours: boolean;\n  isNewPerson: boolean;\n  editing: boolean;\n}\n\nexport enum CovidEventName {\n  LastCloseContact = \"Most Recent Close Contact\",\n  SymptomsStart = \"Illness Onset\",\n  PositiveTest = \"Most Recent Positive Test\"\n}\n\nexport type CovidEvents = {\n  [key in CovidEventName]: string;\n};\n\nexport interface InHouseExposure {\n  contagiousPerson: number;\n  quarantinedPerson: number;\n  exposed: boolean;\n  ongoing: boolean;\n  date: string;\n}\n\nexport interface Exposure {\n  startDate: Date;\n  endDate: Date;\n  infectionSource?: PersonData;\n}\n\nexport interface Guidance {\n  person: PersonData;\n  infected: boolean;\n  startDate?: Date;\n  endDate?: Date;\n  infectionSource?: PersonData;\n  peopleWithOngoingExposureWithSymptoms?: string[];\n}\n\nexport const colors = [\n  \"#b35806\",\n  \"#e08214\",\n  \"#fdb863\",\n  \"#fee0b6\",\n  \"#d8daeb\",\n  \"#b2abd2\",\n  \"#8073ac\",\n  \"#542788\"\n];\n","import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { State } from \"@hookstate/core\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { parse, format, isValid } from \"date-fns\";\ninterface Props {\n  id: number;\n  questionFieldTextState: State<string>;\n  questionFieldName: string;\n}\n\nexport default function DateQuestion(props: Props) {\n  const questionFieldText = props.questionFieldTextState.get();\n  const parsedDate = parse(questionFieldText, \"M/dd/yyyy\", new Date());\n  const questionFieldDate = isValid(parsedDate) ? parsedDate : new Date();\n\n  return (\n    <div className=\"\">\n      <label htmlFor={`${props.id}-${props.questionFieldName}`}>\n        Date <span className=\"f6 fw3\">mm/dd/yyyy</span>\n      </label>\n      <DatePicker\n        className=\"form-control\"\n        selected={questionFieldDate}\n        onChange={(date: Date) => {\n          const validDate = isValid(date) ? date : new Date(); // Default to today\n          props.questionFieldTextState.set(format(validDate, \"MM/dd/yyyy\"));\n        }}\n        name={props.questionFieldName}\n        id={`${props.id}-${props.questionFieldName}`}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { parse, format } from \"date-fns\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel\n} from \"@reach/disclosure\";\n\ninterface Props {\n  id: number;\n  questionText: string;\n  checked: boolean;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  tooltip?: JSX.Element;\n}\n\nexport default function MultipleChoiceQuestion(props: Props) {\n  return (\n    <div className=\"custom-control custom-checkbox mb-3\">\n      <input\n        className=\"custom-control-input\"\n        checked={props.checked}\n        id={`checkbox-${props.id}-${props.questionText}`}\n        type=\"checkbox\"\n        onChange={props.onChange}\n      />\n      <Disclosure>\n        <label\n          className=\"custom-control-label\"\n          htmlFor={`checkbox-${props.id}-${props.questionText}`}\n        >\n          {props.questionText}\n          {props.tooltip && (\n            <DisclosureButton>\n              <i\n                aria-hidden=\"true\"\n                className=\"px-1 fas fa-question-circle link hover-dark-blue gray\"\n              ></i>\n            </DisclosureButton>\n          )}\n        </label>\n        {props.tooltip && (\n          <DisclosurePanel>\n            <div className=\"f5 gray\">{props.tooltip}</div>\n          </DisclosurePanel>\n        )}\n      </Disclosure>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport DateQuestion from \"./DateQuestion\";\nimport { format } from \"date-fns\";\n\ninterface Props {\n  id: number;\n  index: number;\n  person: PersonData;\n  otherPerson: PersonData;\n  inHouseExposureEventState: State<InHouseExposure>;\n}\n\nexport default function InHouseExposureQuestion(props: Props) {\n  const inHouseExposureEvent = props.inHouseExposureEventState.get();\n  const isExposed = inHouseExposureEvent.exposed;\n  const isOngoing = inHouseExposureEvent.ongoing;\n  return (\n    <div className=\"mb-3\">\n      <MultipleChoiceQuestion\n        id={props.id}\n        questionText={`${props.person.name} had close contact with ${props.otherPerson.name}`}\n        checked={isExposed}\n        onChange={() => props.inHouseExposureEventState.exposed.set(v => !v)}\n      />\n      {isExposed && (\n        <MultipleChoiceQuestion\n          id={props.id}\n          questionText={`${props.person.name}'s close contact with ${props.otherPerson.name} is ongoing`}\n          checked={isOngoing}\n          onChange={() => {\n            const ongoingState = props.inHouseExposureEventState.ongoing;\n            const ongoing = ongoingState.get();\n            const newOngoing = !ongoing;\n            ongoingState.set(newOngoing);\n            if (newOngoing) {\n              props.inHouseExposureEventState.date.set(\"\");\n            } else {\n              props.inHouseExposureEventState.date.set(\n                format(new Date(), \"MM/dd/yyyy\")\n              );\n            }\n          }}\n        />\n      )}\n      {isExposed && !isOngoing && (\n        <DateQuestion\n          id={props.id}\n          questionFieldTextState={props.inHouseExposureEventState.date}\n          questionFieldName={`crossExposure-${props.index}`}\n        />\n      )}\n    </div>\n  );\n}\n","import { InHouseExposure, PersonData } from \"./types\";\nimport InHouseExposureQuestion from \"./InHouseExposureQuestion\";\nimport React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  person: PersonData;\n  meaningfulInHouseExposures: PersonData[];\n  relevantInHouseExposureEventsState: State<InHouseExposure>[];\n}\n\nexport default function InHouseExposureQuestions(props: Props) {\n  return (\n    <>\n      {props.meaningfulInHouseExposures.map((otherPerson, index) => {\n        const inHouseExposureEventState = props.relevantInHouseExposureEventsState.find(\n          (eventState: State<InHouseExposure>) => {\n            const event = eventState.get();\n            return (\n              event.quarantinedPerson === otherPerson.id ||\n              event.contagiousPerson === otherPerson.id\n            );\n          }\n        );\n        if (inHouseExposureEventState) {\n          return (\n            <>\n              <InHouseExposureQuestion\n                key={props.person.id + \"-\" + index}\n                id={props.person.id}\n                index={index}\n                person={props.person}\n                otherPerson={otherPerson}\n                inHouseExposureEventState={inHouseExposureEventState}\n              />\n              <hr />\n            </>\n          );\n        } else {\n          return <></>;\n        }\n      })}\n    </>\n  );\n}\n","import { flow, remove, concat } from \"lodash/fp\";\nimport { CovidEventName, PersonData } from \"./types\";\n\nexport function replace<T>(array: Array<T>, old: T, updated: T): Array<T> {\n  return flow(\n    remove(e => e === old),\n    concat([updated])\n  )(array);\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function isContagious(person: PersonData) {\n  return Boolean(\n    person.covidEvents[CovidEventName.PositiveTest] ||\n      person.covidEvents[CovidEventName.SymptomsStart]\n  );\n}\n","import React from \"react\";\nimport { useState, none, State } from \"@hookstate/core\";\n\nimport { CovidEventName, InHouseExposure, PersonData, Guidance } from \"./types\";\nimport DateQuestion from \"./DateQuestion\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport InHouseExposureQuestions from \"./InHouseExposureQuestions\";\nimport { compact } from \"lodash/fp\";\nimport { isContagious } from \"./util\";\nimport { format, isValid } from \"date-fns\";\n\ninterface Props {\n  personState: State<PersonData>;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  editingPersonState: State<number | undefined>;\n  guidance: Guidance;\n}\n\nexport default function Person(props: Props) {\n  const person = props.personState.get();\n  const members = props.membersState.get();\n  const covidEventsState = props.personState.covidEvents;\n  const editingPerson = props.editingPersonState.get();\n  const editingHousehold = props.editingHouseholdState.get();\n  const relevantInHouseExposureEventsState: State<\n    InHouseExposure\n  >[] = props.inHouseExposureEventsState.filter(\n    (eventState: State<InHouseExposure>) => {\n      const event: InHouseExposure = eventState.get();\n      return (\n        event.contagiousPerson === person.id ||\n        event.quarantinedPerson === person.id\n      );\n    }\n  );\n  const relevantInHouseExposureEvents = relevantInHouseExposureEventsState.map(\n    e => e.get()\n  );\n  const selectionsState: any = useState(\n    Object.values(CovidEventName).reduce(\n      (selections: any, key: CovidEventName) => (\n        (selections[key] = covidEventsState[key].get() !== \"\"), selections\n      ),\n      {}\n    )\n  );\n  const selections = selectionsState.get();\n  const contagious =\n    selections[CovidEventName.PositiveTest] ||\n    selections[CovidEventName.SymptomsStart];\n\n  function onCheckboxChange(fieldName: CovidEventName) {\n    return (e: React.BaseSyntheticEvent) => {\n      const checked = e.target.checked;\n      selectionsState[fieldName].set(checked);\n      if (fieldName === CovidEventName.PositiveTest) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.SymptomsStart]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      } else if (fieldName === CovidEventName.SymptomsStart) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.PositiveTest]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      }\n      if (!checked) {\n        covidEventsState[fieldName].set(\"\");\n      } else {\n        covidEventsState[fieldName].set(format(new Date(), \"MM/dd/yyyy\"));\n      }\n    };\n  }\n\n  function buildCovidEventQuestion(\n    fieldName: CovidEventName,\n    questionText: string,\n    tooltip?: JSX.Element\n  ) {\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={questionText}\n          checked={selectionsState[fieldName].get()}\n          onChange={onCheckboxChange(fieldName)}\n          tooltip={tooltip}\n        />\n        {selectionsState[fieldName].get() && (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={covidEventsState[fieldName]}\n            questionFieldName={fieldName}\n          />\n        )}\n      </>\n    );\n  }\n\n  function buildSymptomsQuestion() {\n    const symptomsStartState = selectionsState[CovidEventName.SymptomsStart];\n    const symptomsStart = symptomsStartState.get();\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={`${person.name} has shown positive symptoms`}\n          checked={symptomsStart}\n          onChange={onCheckboxChange(CovidEventName.SymptomsStart)}\n          tooltip={\n            <span>\n              Consult the{\" \"}\n              <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html\">\n                CDC website\n              </a>{\" \"}\n              for a common list of symptoms of Covid.{\" \"}\n            </span>\n          }\n        />\n        {symptomsStart ? (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={\n              covidEventsState[CovidEventName.SymptomsStart]\n            }\n            questionFieldName={CovidEventName.SymptomsStart}\n          />\n        ) : null}\n        <div className={\"mb-3\"} />\n        {symptomsStart ? (\n          <MultipleChoiceQuestion\n            id={person.id}\n            questionText={`${person.name}'s symptoms have been improved for 24 hours.`}\n            checked={props.personState.noSymptomsFor24Hours.get()}\n            onChange={() => props.personState.noSymptomsFor24Hours.set(c => !c)}\n            tooltip={\n              <span>\n                Improved symptoms are a requirement for you to end isolation. If\n                your symptoms improve AND you have had no fever for 24 hours\n                without the use of medicine, check this box.{\" \"}\n                <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-test-positive-covid-19\">\n                  Link.\n                </a>{\" \"}\n              </span>\n            }\n          />\n        ) : null}\n      </>\n    );\n  }\n\n  function setContagiousState(contagious: boolean) {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    const newExposureEvents = members.map((otherPerson: PersonData) => {\n      const otherContagious = isContagious(otherPerson);\n      if (person !== otherPerson && contagious !== otherContagious) {\n        return {\n          contagiousPerson: contagious ? person.id : otherPerson.id,\n          quarantinedPerson: contagious ? otherPerson.id : person.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    props.inHouseExposureEventsState.merge(compact(newExposureEvents));\n  }\n\n  const meaningfulInHouseExposures = members.filter(\n    (otherPerson: PersonData) =>\n      person !== otherPerson && contagious !== isContagious(otherPerson)\n  );\n\n  function removeFromMembers() {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    props.personState.set(none);\n  }\n\n  function renderGuidance() {\n    if (editingHousehold) {\n      return null;\n    } else {\n      if (props.guidance.endDate) {\n        return props.guidance.infected ? \" - Isolate\" : \" - Quarantine\";\n      } else {\n        return null;\n      }\n    }\n  }\n\n  function guidanceMessage(guidance: Guidance) {\n    if (guidance.endDate) {\n      const date = format(guidance.endDate, \"MM/dd/yyyy\");\n      if (guidance.infected) {\n        if (guidance.person.noSymptomsFor24Hours) {\n          return `Until ${date}`;\n        } else {\n          return `Until at least ${date} and 24 hours after symptoms improve`;\n        }\n      } else {\n        if (guidance.peopleWithOngoingExposureWithSymptoms?.length) {\n          const names = guidance.peopleWithOngoingExposureWithSymptoms?.join(\n            \", \"\n          );\n          return `Until at least ${date} and 14 days after isolation period ends for ${names}`;\n        } else {\n          return `Until ${date}`;\n        }\n      }\n    }\n  }\n\n  function renderFeedback() {\n    return (\n      <div className=\"\">\n        {Object.entries(person.covidEvents).map(\n          ([name, date]: [string, string]) => {\n            if (date !== \"\") {\n              return (\n                <div className=\"f5\">\n                  {name}\n                  {\": \"} {date}\n                </div>\n              );\n            }\n          }\n        )}\n        {Object.values(relevantInHouseExposureEvents).map(\n          (event: InHouseExposure) => {\n            if (event.exposed) {\n              const quarantinedPersonName = members.find(\n                member => member.id === event.quarantinedPerson\n              )?.name;\n              const contagiousPersonName = members.find(\n                member => member.id === event.contagiousPerson\n              )?.name;\n              if (event.ongoing) {\n                return (\n                  <div className=\"f5\">\n                    {quarantinedPersonName} has an ongoing exposure to{\" \"}\n                    {contagiousPersonName}{\" \"}\n                  </div>\n                );\n              } else {\n                return (\n                  <div className=\"f5\">\n                    {quarantinedPersonName} exposed to {contagiousPersonName} at{\" \"}\n                    {event.date}\n                  </div>\n                );\n              }\n            }\n          }\n        )}\n      </div>\n    );\n  }\n\n  function renderEditing() {\n    return (\n      <div className={\"card shadow-sm mb-2\"}>\n        <div className=\"p-2\">\n          <div className=\"mb-3\">\n            <label htmlFor={`${person.id}-name`}>Name</label>\n            <input\n              className=\"form-control\"\n              value={person.name}\n              name=\"name\"\n              id={`${person.id}-name`}\n              type=\"text\"\n              onChange={(e: React.BaseSyntheticEvent) =>\n                props.personState.name.set(e.target.value)\n              }\n            />\n          </div>\n          <div className=\"mb-3\">\n            {buildCovidEventQuestion(\n              CovidEventName.LastCloseContact,\n              `${person.name} has had close contact to someone presumed covid positive (outside the household)`,\n              <div>\n                Close contact means any of the following:\n                <ul className=\"mx-3 mb-1\">\n                  <li>\n                    You were within 6 feet of them for a total of 15 minutes or\n                    more\n                  </li>\n                  <li>You provided care at home to the person</li>\n                  <li>\n                    You had direct physical contact with the person (hugged or\n                    kissed them)\n                  </li>\n                  <li>You shared eating or drinking utensils</li>\n                  <li>\n                    They sneezed, coughed, or somehow got respiratory droplets\n                    on you\n                  </li>\n                </ul>{\" \"}\n                <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n                  Link.\n                </a>\n              </div>\n            )}\n            <hr />\n          </div>\n          <div className=\"mb-3\">\n            {buildCovidEventQuestion(\n              CovidEventName.PositiveTest,\n              `${person.name} has received a positive test result`\n            )}\n            <hr />\n          </div>\n          <div className=\"mb-3\">\n            {buildSymptomsQuestion()}\n            <hr />\n          </div>\n          <InHouseExposureQuestions\n            person={person}\n            meaningfulInHouseExposures={meaningfulInHouseExposures}\n            relevantInHouseExposureEventsState={\n              relevantInHouseExposureEventsState\n            }\n          />\n          <div className={\"d-flex justify-content-between align-items-center\"}>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => {\n                removeFromMembers();\n                props.editingPersonState.set(undefined);\n              }}\n            >\n              <span className=\"visually-hidden\">Remove</span>\n              Remove\n              <i\n                aria-hidden=\"true\"\n                className=\"pl2 fas fa-times-circle white\"\n              ></i>\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                props.editingPersonState.set(undefined);\n              }}\n            >\n              {person.isNewPerson ? \"Submit\" : \"Update\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderNonEditing() {\n    return (\n      <div className={\"card shadow-sm mb-2\"}>\n        <div className=\"card-body\">\n          <div className={\"\"}>\n            <h4 className=\"d-flex justify-content-between align-items-center\">\n              <span className=\"\">\n                {person.name + \"\"}\n                {renderGuidance()}\n              </span>\n              <span>\n                {!editingPerson && (\n                  <button\n                    onClick={() => {\n                      props.editingHouseholdState.set(true);\n                      props.editingPersonState.set(person.id);\n                    }}\n                  >\n                    <span className=\"visually-hidden\">Edit Person</span>\n                    <span aria-hidden=\"true\" className=\"f5 fas fa-pen\"></span>\n                  </button>\n                )}\n              </span>\n            </h4>\n            {!editingHousehold && (\n              <p className=\"lead text-muted\">\n                {guidanceMessage(props.guidance)}\n              </p>\n            )}\n          </div>\n          <div className={\"my-3\"} />\n          {editingHousehold && renderFeedback()}\n        </div>\n      </div>\n    );\n  }\n\n  return editingPerson === person.id ? renderEditing() : renderNonEditing();\n}\n","import {\n  Guidance,\n  CovidEventName,\n  InHouseExposure,\n  PersonData,\n  Exposure\n} from \"./types\";\nimport { addDays, parse } from \"date-fns\";\nimport {\n  flow,\n  compact,\n  map,\n  thru,\n  partition,\n  filter,\n  max,\n  maxBy,\n  min,\n  minBy\n} from \"lodash/fp\";\n\nexport function computeHouseHoldQuarantinePeriod(\n  household: PersonData[],\n  inHouseExposures: InHouseExposure[]\n): Guidance[] {\n  const [infectedGuidances, quarantinedGuidances] = flow(\n    map((person: PersonData) => {\n      const isolationPeriod = computeIsolationPeriod(person);\n      if (isolationPeriod) {\n        const [startDate, endDate] = isolationPeriod;\n        return {\n          person: person,\n          infected: true,\n          startDate: startDate,\n          endDate: endDate\n        };\n      } else {\n        return {\n          person: person,\n          infected: false\n        };\n      }\n    }),\n    partition(c => c.infected)\n  )(household);\n  const updatedQuarantinedGuidance: Guidance[] = quarantinedGuidances.map(\n    guidance =>\n      computeQuarantineGuidance(guidance, inHouseExposures, infectedGuidances)\n  );\n  return [...infectedGuidances, ...updatedQuarantinedGuidance];\n}\n\nexport function computeIsolationPeriod(person: PersonData): Date[] | undefined {\n  const covidPositiveEvents = [\n    person.covidEvents[CovidEventName.SymptomsStart],\n    person.covidEvents[CovidEventName.PositiveTest]\n  ];\n  const illnessOnset = flow(\n    compact,\n    map((date: string) => parse(date, \"M/dd/yyyy\", new Date())),\n    thru((dates: Date[]) => min(dates))\n  )(covidPositiveEvents);\n  if (illnessOnset) {\n    const tenDaysAfterOnset = addDays(illnessOnset, 10);\n    const symptomsEnd = person.noSymptomsFor24Hours ? undefined : new Date(); // TODO: Rethink\n    const isolationEndDate = flow(\n      compact,\n      thru((dates: Date[]) => max(dates))\n    )([tenDaysAfterOnset, symptomsEnd]);\n    return [illnessOnset, isolationEndDate];\n  }\n}\n\nfunction computeQuarantineGuidance(\n  guidance: Guidance,\n  inHouseExposures: InHouseExposure[],\n  infectedGuidances: Guidance[]\n) {\n  const person = guidance.person;\n  const relevantInHouseExposures = filter(\n    (event: InHouseExposure) =>\n      event.quarantinedPerson === person.id && event.exposed\n  )(inHouseExposures);\n  const normalize = map((event: InHouseExposure) => {\n    const infectedGuidance = infectedGuidances.find(\n      guidance => guidance.person.id === event.contagiousPerson\n    ) as Guidance;\n    if (event.ongoing) {\n      return {\n        startDate: infectedGuidance.startDate as Date,\n        endDate: infectedGuidance.endDate as Date,\n        infectionSource: infectedGuidance.person\n      };\n    } else {\n      return {\n        startDate: infectedGuidance.startDate as Date,\n        endDate: parse(event.date, \"M/dd/yyyy\", new Date()),\n        infectionSource: infectedGuidance.person\n      };\n    }\n  });\n  const normalizedInHouseExposures = compact(\n    normalize(relevantInHouseExposures)\n  );\n  const exposures = addOutsideExposures(person, normalizedInHouseExposures);\n  const earliestExposure = minBy(exposure => exposure.startDate, exposures);\n  const latestExposure = maxBy(exposure => exposure.endDate, exposures);\n  let startDate = earliestExposure?.startDate;\n  let endDate = undefined;\n  if (latestExposure) {\n    endDate = addDays(latestExposure.endDate, 14);\n  }\n  const peopleWithOngoingExposureWithSymptoms = flow(\n    map((event: InHouseExposure) => {\n      if (event.ongoing) {\n        const personWithOngoingExposure = infectedGuidances.find(\n          guidance => guidance.person.id === event.contagiousPerson\n        )?.person;\n        if (!personWithOngoingExposure?.noSymptomsFor24Hours) {\n          return personWithOngoingExposure?.name;\n        }\n      }\n    }),\n    compact\n  )(relevantInHouseExposures);\n  return {\n    person: person,\n    infected: false,\n    startDate: startDate,\n    endDate: endDate,\n    infectionSource: latestExposure && latestExposure.infectionSource,\n    peopleWithOngoingExposureWithSymptoms: peopleWithOngoingExposureWithSymptoms\n  };\n}\n\nfunction addOutsideExposures(person: PersonData, exposures: Exposure[]) {\n  const outHouseExposureDateString =\n    person.covidEvents[CovidEventName.LastCloseContact];\n  if (outHouseExposureDateString) {\n    const outHouseExposureDate = parse(\n      outHouseExposureDateString,\n      \"M/dd/yyyy\",\n      new Date()\n    );\n    const outHouseExposure = {\n      startDate: outHouseExposureDate,\n      endDate: outHouseExposureDate,\n      infectionSource: undefined\n    };\n    exposures = [...exposures, outHouseExposure];\n  }\n  return exposures;\n}\n","import React from \"react\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport Person from \"./Person\";\nimport { State } from \"@hookstate/core\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  editingPersonState: State<number | undefined>;\n  height: State<number>;\n}\n\nexport default function Household(props: Props) {\n  const editingHousehold = props.editingHouseholdState.get();\n  const editingPerson = props.editingPersonState.get();\n  const members = props.membersState.get();\n  const inHouseExposureEvents = props.inHouseExposureEventsState.get();\n  const guidance = computeHouseHoldQuarantinePeriod(\n    members,\n    inHouseExposureEvents\n  );\n\n  function renderTitle() {\n    if (editingHousehold) {\n      return (\n        <>\n          <h2>Add your household</h2>\n          <p className=\"lead text-muted\">\n            Be sure to add everyone in your household.\n          </p>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h2>Our recommendation</h2>\n          <p className=\"lead text-muted\">\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n        </>\n      );\n    }\n  }\n\n  function renderAction() {\n    if (editingHousehold) {\n      return (\n        <button\n          className=\"btn btn-primary my-3\"\n          onClick={() => props.editingHouseholdState.set(false)}\n        >\n          Get recommendation\n        </button>\n      );\n    } else {\n      return (\n        <Link to=\"/\">\n          <button className=\"btn btn-primary my-3\">See on calendar</button>\n        </Link>\n      );\n    }\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          minHeight: props.height.get() + \"px\"\n        }}\n      >\n        <div className={\"col-md-6\"}>\n          <header>\n            <div className=\"navbar household\">\n              <div className=\"container d-flex justify-content-between\">\n                <div />\n                <Link to=\"/\" className={\"my-2\"}>\n                  Close\n                </Link>\n              </div>\n            </div>\n          </header>\n          <div className={\"container\"}>\n            <div className={\"my-3\"} />\n            {renderTitle()}\n            <div>\n              {props.membersState.map((personState: State<PersonData>) => {\n                const person = personState.get();\n                const id = person.id;\n                const personGuidance = guidance.find(c => c.person.id === id);\n                if (personGuidance) {\n                  return (\n                    <Person\n                      key={id}\n                      personState={personState}\n                      membersState={props.membersState}\n                      inHouseExposureEventsState={\n                        props.inHouseExposureEventsState\n                      }\n                      editingHouseholdState={props.editingHouseholdState}\n                      editingPersonState={props.editingPersonState}\n                      guidance={personGuidance}\n                    />\n                  );\n                }\n              })}\n            </div>\n            {!editingPerson && (\n              <div\n                className={\"card shadow-sm mb-2\"}\n                onClick={() => {\n                  props.editingHouseholdState.set(true);\n                  props.addNewPerson();\n                }}\n              >\n                <button className={\"card-body\"}>\n                  <h4 className={\"\"}>\n                    Add Person &nbsp;\n                    <i className=\"fa fa-user-plus\" aria-hidden=\"true\"></i>\n                  </h4>\n                </button>\n              </div>\n            )}\n            {renderAction()}\n          </div>\n        </div>\n        <div className={\"col-md-6 empty\"} />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { DateClickArg } from \"@fullcalendar/interaction\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { colors } from \"./types\";\n\nimport { PersonData, Guidance, InHouseExposure } from \"./types\";\nimport { parseISO } from \"date-fns\";\nimport { State } from \"@hookstate/core\";\nimport { compact, map, flow } from \"lodash/fp\";\n\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEvents: InHouseExposure[];\n}\n\nexport default function GridView(props: Props) {\n  const members = props.membersState.get();\n  function computeEvents(\n    members: PersonData[],\n    inHouseExposureEvents: InHouseExposure[]\n  ) {\n    return flow(\n      map((guidance: Guidance) => {\n        if (guidance.endDate) {\n          return {\n            classNames: [\"TODO\"],\n            title: guidance.person.name,\n            start: guidance.startDate, // startDate is guaranteed if endDate exists\n            end: guidance.endDate,\n            color: colors[guidance.person.id - (1 % colors.length)],\n            textColor: \"#000000\"\n          };\n        }\n      }),\n      compact\n    )(computeHouseHoldQuarantinePeriod(members, inHouseExposureEvents));\n  }\n\n  return (\n    <div className={\"p-3\"}>\n      <div>\n        <FullCalendar\n          plugins={[dayGridPlugin, interactionPlugin]}\n          initialView=\"dayGridMonth\"\n          events={computeEvents(members, props.inHouseExposureEvents)}\n          dateClick={(info: DateClickArg) => {}}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GridView from \"./GridView\";\nimport { Link } from \"react-router-dom\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n}\n\nexport default function Home(props: Props) {\n  const members = props.membersState.get();\n\n  function renderTitle() {\n    if (members.length) {\n      return (\n        <>\n          <h1>Here is our recommendation for your household</h1>\n          <p className=\"lead text-muted\">\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n          <p>\n            <Link to=\"/household\" className=\"btn btn-primary my-2\">\n              Edit Answers\n            </Link>\n          </p>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h1>Get quarantine and isolation guidance for your household</h1>\n          <p className=\"lead text-muted\">\n            We'll let you know who should quarantine or isolate, and for how\n            long.\n          </p>\n          <p>\n            <Link to=\"/household\" className=\"btn btn-primary my-2\">\n              Get Started\n            </Link>\n          </p>\n        </>\n      );\n    }\n  }\n\n  return (\n    <>\n      <header>\n        <div className=\"navbar\">\n          <div className=\"container d-flex justify-content-between\">\n            <div className=\"navbar-brand d-flex align-items-center\">\n              COVID Quarantine Calculator (Work in Progress)\n            </div>\n            <div>English</div>\n          </div>\n        </div>\n      </header>\n      <main className={\"main\"} role={\"main\"}>\n        <section className={\"jumbotron\"}>\n          <div className=\"container\">{renderTitle()}</div>\n        </section>\n      </main>\n      {members.length ? (\n        <GridView\n          membersState={props.membersState}\n          inHouseExposureEvents={props.inHouseExposureEventsState.get()}\n        />\n      ) : null}\n      <footer className={\"mb-3\"}>\n        <div className={\"container d-flex justify-content-between\"}>\n          <a href={\"https://www.codeforpdx.org/\"}>Code For PDX</a>\n          <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/isolation.html\">\n            CDC guidelines on isolation\n          </a>\n          <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n            CDC guidelines on quarantine\n          </a>\n        </div>\n      </footer>\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useState } from \"@hookstate/core\";\nimport Household from \"./Household\";\nimport Home from \"./Home\";\nimport { CovidEventName, InHouseExposure, PersonData } from \"./types\";\nimport { compact } from \"lodash/fp\";\nimport { getRandomInt, isContagious } from \"./util\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  const height = useState(window.innerHeight);\n  const updateHeight = () => {\n    height.set(window.innerHeight);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateHeight);\n    return () => window.removeEventListener(\"resize\", updateHeight);\n  }, []);\n  const members = useState([] as PersonData[]);\n  const inHouseExposureEvents = useState<InHouseExposure[]>([]);\n  const id = useState(members.length + 1);\n  const editingHouseholdState = useState(true);\n  const editingPersonState = useState<number | undefined>(undefined);\n\n  function addNewPerson() {\n    const currentId = id.get();\n    const newPerson = {\n      id: currentId,\n      name: `Person ${getRandomInt(1000)}`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      noSymptomsFor24Hours: true,\n      isNewPerson: true,\n      editing: true\n    };\n    id.set(id => id + 1);\n    members.set(members => [...members, newPerson]);\n    editingPersonState.set(currentId);\n    const newExposureEvents = members.get().map((person: PersonData) => {\n      if (isContagious(person)) {\n        return {\n          contagiousPerson: person.id,\n          quarantinedPerson: newPerson.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    inHouseExposureEvents.merge(compact(newExposureEvents));\n  }\n\n  return (\n    <Router basename={`${process.env.PUBLIC_URL}`}>\n      <Switch>\n        <Route path=\"/household\">\n          <Household\n            addNewPerson={addNewPerson}\n            editingHouseholdState={editingHouseholdState}\n            editingPersonState={editingPersonState}\n            height={height}\n            inHouseExposureEventsState={inHouseExposureEvents}\n            membersState={members}\n          />\n        </Route>\n        <Route path=\"/\">\n          <Home\n            membersState={members}\n            inHouseExposureEventsState={inHouseExposureEvents}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}