{"version":3,"sources":["types.ts","DateQuestion.tsx","MultipleChoiceQuestion.tsx","InHouseExposureQuestion.tsx","InHouseExposureQuestions.tsx","util.tsx","calendar.ts","Person.tsx","calculator.ts","Household.tsx","GridView.tsx","Home.tsx","App.tsx","index.tsx"],"names":["CovidEventName","colors","DateQuestion","props","questionFieldText","questionFieldTextState","get","parsedDate","parse","Date","questionFieldDate","isValid","className","htmlFor","id","questionFieldName","promptText","selected","onChange","date","validDate","set","format","name","MultipleChoiceQuestion","checked","questionText","type","tooltip","aria-hidden","InHouseExposureQuestion","inHouseExposureEvent","inHouseExposureEventState","isExposed","exposed","isOngoing","ongoing","person","otherPerson","v","ongoingState","newOngoing","index","InHouseExposureQuestions","meaningfulInHouseExposures","map","relevantInHouseExposureEventsState","find","eventState","event","quarantinedPerson","contagiousPerson","key","isContagious","Boolean","covidEvents","PositiveTest","SymptomsStart","downloadEvent","title","message","start","end","startDateArray","split","s","Number","endDateArray","createEvent","description","error","value","console","log","fileDownload","Person","personState","members","membersState","covidEventsState","editingHousehold","editingHouseholdState","inHouseExposureEventsState","filter","selectionsState","useState","Object","values","reduce","selections","contagious","onCheckboxChange","fieldName","e","target","nextContagious","setContagiousState","onSymptomCheckboxChange","symptomsCheckedState","symptomsChecked","numCheckedBefore","sum","val","c","numCheckedAfter","toggleSymptomStart","buildCovidEventQuestion","datePromptText","reverse","none","newExposureEvents","otherContagious","dateMissing","dateInvalid","merge","compact","calendarIcon","guidance","startDate","endDate","infected","onClick","stopPropagation","LastCloseContact","href","symptomsStartState","symptomsStart","atLeastOneState","atLeastOne","noSymptomsFor24Hours","buildSymptomsQuestion","peopleWithOngoingExposureWithSymptoms","length","names","join","guidanceMessage","renderNonEditing","computeHouseHoldQuarantinePeriod","household","inHouseExposures","flow","isolationPeriod","covidPositiveEvents","illnessOnset","thru","dates","min","tenDaysAfterOnset","addDays","symptomsEnd","undefined","isolationEndDate","max","computeIsolationPeriod","partition","infectedGuidances","updatedQuarantinedGuidance","relevantInHouseExposures","normalize","infectedGuidance","infectionSource","normalizedInHouseExposures","exposures","outHouseExposureDateString","outHouseExposureDate","outHouseExposure","addOutsideExposures","earliestExposure","minBy","exposure","latestExposure","maxBy","personWithOngoingExposure","computeQuarantineGuidance","Household","inHouseExposureEvents","editingPersonRef","useRef","style","display","flexWrap","backgroundColor","minHeight","height","showModalState","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","letterSpacing","textAlign","color","personGuidance","addNewPerson","width","src","process","marginLeft","renderAction","GridView","plugins","dayGridPlugin","interactionPlugin","initialView","events","classNames","textColor","computeEvents","dateClick","info","Home","position","textTransform","role","paddingBottom","background","flexDirection","alignItems","padding","borderRadius","left","top","flex","order","flexGrow","margin","justifyContent","paddingTop","marginTop","marginBottom","bottom","opacity","border","transform","App","window","innerHeight","updateHeight","useEffect","addEventListener","removeEventListener","editingPersonState","isOpen","overlay","zIndex","content","inset","overflow","WebkitOverflowScrolling","outline","currentId","newPerson","Math","floor","random","isNewPerson","editing","rootElement","document","getElementById","ReactModal","setAppElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.7d8b13e1.chunk.js","sourcesContent":["export interface PersonData {\n  id: number;\n  name: string;\n  covidEvents: CovidEvents;\n  noSymptomsFor24Hours: boolean;\n  symptomsChecked: boolean[];\n  atLeastOne: boolean;\n  isNewPerson: boolean;\n  editing: boolean;\n}\n\nexport enum CovidEventName {\n  LastCloseContact = \"Most Recent Close Contact\",\n  SymptomsStart = \"Illness Onset\",\n  PositiveTest = \"Most Recent Positive Test\"\n}\n\nexport type CovidEvents = {\n  [key in CovidEventName]: string;\n};\n\nexport interface InHouseExposure {\n  contagiousPerson: number;\n  quarantinedPerson: number;\n  exposed: boolean;\n  ongoing: boolean;\n  date: string;\n}\n\nexport interface Exposure {\n  startDate: Date;\n  endDate: Date;\n  infectionSource?: PersonData;\n}\n\nexport interface Guidance {\n  person: PersonData;\n  infected: boolean;\n  startDate?: Date;\n  endDate?: Date;\n  infectionSource?: PersonData;\n  peopleWithOngoingExposureWithSymptoms?: string[];\n}\n\nexport const colors = [\n  \"#b35806\",\n  \"#e08214\",\n  \"#fdb863\",\n  \"#fee0b6\",\n  \"#d8daeb\",\n  \"#b2abd2\",\n  \"#8073ac\",\n  \"#542788\"\n];\n","import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { State } from \"@hookstate/core\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { parse, format, isValid } from \"date-fns\";\ninterface Props {\n  id: number;\n  promptText: string;\n  questionFieldTextState: State<string>;\n  questionFieldName: string;\n}\n\nexport default function DateQuestion(props: Props) {\n  const questionFieldText = props.questionFieldTextState.get();\n  const parsedDate = parse(questionFieldText, \"M/dd/yyyy\", new Date());\n  const questionFieldDate = isValid(parsedDate) ? parsedDate : new Date();\n\n  return (\n    <div className=\"subquestion questionnaire-text\">\n      <label htmlFor={`${props.id}-${props.questionFieldName}`}>\n        {props.promptText} <span className=\"f6 fw3\">mm/dd/yyyy</span>\n      </label>\n      <DatePicker\n        className=\"form-control\"\n        selected={questionFieldDate}\n        onChange={(date: Date) => {\n          const validDate = isValid(date) ? date : new Date(); // Default to today\n          props.questionFieldTextState.set(format(validDate, \"MM/dd/yyyy\"));\n        }}\n        name={props.questionFieldName}\n        id={`${props.id}-${props.questionFieldName}`}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { parse, format } from \"date-fns\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel\n} from \"@reach/disclosure\";\n\ninterface Props {\n  id: number;\n  questionText: string;\n  checked: boolean;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  tooltip?: JSX.Element;\n}\n\nexport default function MultipleChoiceQuestion(props: Props) {\n  return (\n    <div className=\"custom-control custom-checkbox mb-2\">\n      <input\n        className=\"custom-control-input\"\n        checked={props.checked}\n        id={`checkbox-${props.id}-${props.questionText}`}\n        type=\"checkbox\"\n        onChange={props.onChange}\n      />\n      <Disclosure>\n        <label\n          className=\"custom-control-label\"\n          htmlFor={`checkbox-${props.id}-${props.questionText}`}\n        >\n          <div className=\"questionnaire-text\">\n            {props.questionText}\n            {props.tooltip && (\n              <DisclosureButton>\n                <i\n                  aria-hidden=\"true\"\n                  className=\"px-1 fas fa-question-circle link hover-dark-blue gray\"\n                ></i>\n              </DisclosureButton>\n            )}\n          </div>\n        </label>\n        {props.tooltip && (\n          <DisclosurePanel>\n            <div className=\"f5 gray\">{props.tooltip}</div>\n          </DisclosurePanel>\n        )}\n      </Disclosure>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport DateQuestion from \"./DateQuestion\";\nimport { format } from \"date-fns\";\n\ninterface Props {\n  id: number;\n  index: number;\n  person: PersonData;\n  otherPerson: PersonData;\n  inHouseExposureEventState: State<InHouseExposure>;\n}\n\nexport default function InHouseExposureQuestion(props: Props) {\n  const inHouseExposureEvent = props.inHouseExposureEventState.get();\n  const isExposed = inHouseExposureEvent.exposed;\n  const isOngoing = inHouseExposureEvent.ongoing;\n  return (\n    <div className=\"mb-3\">\n      <MultipleChoiceQuestion\n        id={props.id}\n        questionText={`${props.person.name} had close contact with ${props.otherPerson.name}`}\n        checked={isExposed}\n        onChange={() => props.inHouseExposureEventState.exposed.set(v => !v)}\n      />\n      {isExposed && (\n        <MultipleChoiceQuestion\n          id={props.id}\n          questionText={`${props.person.name}'s close contact with ${props.otherPerson.name} is ongoing`}\n          checked={isOngoing}\n          onChange={() => {\n            const ongoingState = props.inHouseExposureEventState.ongoing;\n            const ongoing = ongoingState.get();\n            const newOngoing = !ongoing;\n            ongoingState.set(newOngoing);\n            if (newOngoing) {\n              props.inHouseExposureEventState.date.set(\"\");\n            } else {\n              props.inHouseExposureEventState.date.set(\n                format(new Date(), \"MM/dd/yyyy\")\n              );\n            }\n          }}\n        />\n      )}\n      {isExposed && !isOngoing && (\n        <DateQuestion\n          id={props.id}\n          promptText=\"Date of last contact\"\n          questionFieldTextState={props.inHouseExposureEventState.date}\n          questionFieldName={`crossExposure-${props.index}`}\n        />\n      )}\n    </div>\n  );\n}\n","import { InHouseExposure, PersonData } from \"./types\";\nimport InHouseExposureQuestion from \"./InHouseExposureQuestion\";\nimport React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  person: PersonData;\n  meaningfulInHouseExposures: PersonData[];\n  relevantInHouseExposureEventsState: State<InHouseExposure>[];\n}\n\nexport default function InHouseExposureQuestions(props: Props) {\n  return (\n    <>\n      {props.meaningfulInHouseExposures.map((otherPerson, index) => {\n        const inHouseExposureEventState = props.relevantInHouseExposureEventsState.find(\n          (eventState: State<InHouseExposure>) => {\n            const event = eventState.get();\n            return (\n              event.quarantinedPerson === otherPerson.id ||\n              event.contagiousPerson === otherPerson.id\n            );\n          }\n        );\n        if (inHouseExposureEventState) {\n          return (\n            <div key={props.person.id + \"-\" + index}>\n              <hr />\n              <InHouseExposureQuestion\n                id={props.person.id}\n                index={index}\n                person={props.person}\n                otherPerson={otherPerson}\n                inHouseExposureEventState={inHouseExposureEventState}\n              />\n            </div>\n          );\n        } else {\n          return <></>;\n        }\n      })}\n    </>\n  );\n}\n","import { flow, remove, concat } from \"lodash/fp\";\nimport { CovidEventName, PersonData } from \"./types\";\n\nexport function replace<T>(array: Array<T>, old: T, updated: T): Array<T> {\n  return flow(\n    remove(e => e === old),\n    concat([updated])\n  )(array);\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function isContagious(person: PersonData) {\n  return Boolean(\n    person.covidEvents[CovidEventName.PositiveTest] ||\n      person.covidEvents[CovidEventName.SymptomsStart]\n  );\n}\n","import fileDownload from \"js-file-download\";\nimport { createEvent, DateArray } from \"ics\";\nimport { format } from \"date-fns\";\n\nexport function downloadEvent(\n  title: string,\n  message: string,\n  start: Date,\n  end: Date\n) {\n  return () => {\n    const startDateArray = format(start, \"yyyy-M-d\")\n      .split(\"-\")\n      .map(s => Number(s)) as DateArray;\n    const endDateArray = format(end, \"yyyy-M-d\")\n      .split(\"-\")\n      .map(s => Number(s)) as DateArray;\n    createEvent(\n      {\n        title: title,\n        description: message,\n        start: startDateArray,\n        end: endDateArray\n      },\n      (error, value) => {\n        if (error) {\n          console.log(error);\n        } else {\n          fileDownload(value, \"covid_event.ics\");\n        }\n      }\n    );\n  };\n}\n","import React, { Ref } from \"react\";\nimport { useState, none, State } from \"@hookstate/core\";\nimport { CovidEventName, InHouseExposure, PersonData, Guidance } from \"./types\";\nimport DateQuestion from \"./DateQuestion\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport InHouseExposureQuestions from \"./InHouseExposureQuestions\";\nimport { compact } from \"lodash/fp\";\nimport { isContagious } from \"./util\";\nimport { format } from \"date-fns\";\nimport { downloadEvent } from \"./calendar\";\n\ninterface Props {\n  personState: State<PersonData>;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  guidance: Guidance;\n  editingPersonRef: Ref<HTMLDivElement>;\n}\n\nexport default function Person(props: Props) {\n  const person = props.personState.get();\n  const members = props.membersState.get();\n  const covidEventsState = props.personState.covidEvents;\n  const editingHousehold = props.editingHouseholdState.get();\n  const relevantInHouseExposureEventsState: State<\n    InHouseExposure\n  >[] = props.inHouseExposureEventsState.filter(\n    (eventState: State<InHouseExposure>) => {\n      const event: InHouseExposure = eventState.get();\n      return (\n        event.contagiousPerson === person.id ||\n        event.quarantinedPerson === person.id\n      );\n    }\n  );\n  const selectionsState: any = useState(\n    Object.values(CovidEventName).reduce(\n      (selections: any, key: CovidEventName) => (\n        (selections[key] = covidEventsState[key].get() !== \"\"), selections\n      ),\n      {}\n    )\n  );\n  const selections = selectionsState.get();\n  const contagious =\n    selections[CovidEventName.PositiveTest] ||\n    selections[CovidEventName.SymptomsStart];\n\n  function onCheckboxChange(fieldName: CovidEventName) {\n    return (e: React.BaseSyntheticEvent) => {\n      const checked = e.target.checked;\n      selectionsState[fieldName].set(checked);\n      if (fieldName === CovidEventName.PositiveTest) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.SymptomsStart]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      } else if (fieldName === CovidEventName.SymptomsStart) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.PositiveTest]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      }\n      if (!checked) {\n        covidEventsState[fieldName].set(\"\");\n      } else {\n        covidEventsState[fieldName].set(format(new Date(), \"MM/dd/yyyy\"));\n      }\n    };\n  }\n\n  function onSymptomCheckboxChange(index: number) {\n    return (e: React.BaseSyntheticEvent) => {\n      const symptomsCheckedState = props.personState.symptomsChecked;\n      const numCheckedBefore = symptomsCheckedState\n        .get()\n        .reduce((sum, val) => sum + (val ? 1 : 0), 0);\n      symptomsCheckedState[index].set(c => !c);\n      const numCheckedAfter = symptomsCheckedState\n        .get()\n        .reduce((sum, val) => sum + (val ? 1 : 0), 0);\n      if (\n        (numCheckedBefore == 1 && numCheckedAfter == 2) ||\n        (numCheckedBefore == 2 && numCheckedAfter == 1)\n      ) {\n        const toggleSymptomStart = onCheckboxChange(\n          CovidEventName.SymptomsStart\n        );\n        toggleSymptomStart(e);\n      } else {\n      }\n    };\n  }\n\n  function buildCovidEventQuestion(\n    fieldName: CovidEventName,\n    questionText: string,\n    datePromptText: string,\n    tooltip?: JSX.Element\n  ) {\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={questionText}\n          checked={selectionsState[fieldName].get()}\n          onChange={onCheckboxChange(fieldName)}\n          tooltip={tooltip}\n        />\n        {selectionsState[fieldName].get() && (\n          <DateQuestion\n            id={person.id}\n            promptText={datePromptText}\n            questionFieldTextState={covidEventsState[fieldName]}\n            questionFieldName={fieldName}\n          />\n        )}\n      </>\n    );\n  }\n\n  function buildSymptomsQuestion() {\n    const symptomsStartState = selectionsState[CovidEventName.SymptomsStart];\n    const symptomsStart = symptomsStartState.get();\n    const atLeastOneState = props.personState.atLeastOne;\n    const symptomsChecked = props.personState.symptomsChecked;\n\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={`${person.name} has been feeling sick`}\n          checked={atLeastOneState.get()}\n          onChange={() => {\n            if (atLeastOneState.get() && symptomsStart) {\n              covidEventsState[CovidEventName.SymptomsStart].set(\"\");\n              symptomsStartState.set(false);\n              symptomsChecked.set([false, false, false, false]);\n            }\n            atLeastOneState.set(c => !c);\n          }}\n          tooltip={\n            <div>\n              Common symptoms include:\n              <ul className=\"mx-3 mb-1\">\n                <li>Fever or chills</li>\n                <li>Cough</li>\n                <li>Shortness of breath or difficulty breathing</li>\n                <li>Fatigue</li>\n                <li>Muscle or body aches</li>\n                <li>Headache</li>\n                <li>New loss of taste or smell</li>\n                <li>Sore throat</li>\n                <li>Congestion or runny nose</li>\n                <li>Nausea or vomiting</li>\n                <li>Diarrhea</li>\n              </ul>{\" \"}\n              <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html\">\n                Link.\n              </a>\n            </div>\n          }\n        />\n        {atLeastOneState.get() ? (\n          <div className=\"questionnaire-text subquestion\">\n            <div className=\"mb-3\">Check the boxes if you are experiencing:</div>\n\n            <MultipleChoiceQuestion\n              id={person.id}\n              questionText={`Fever`}\n              checked={symptomsChecked[0].get()}\n              onChange={e => onSymptomCheckboxChange(0)(e)}\n            />\n            <MultipleChoiceQuestion\n              id={person.id}\n              questionText={`Sore Throat`}\n              checked={symptomsChecked[1].get()}\n              onChange={e => onSymptomCheckboxChange(1)(e)}\n            />\n            <MultipleChoiceQuestion\n              id={person.id}\n              questionText={`Loss of smell`}\n              checked={symptomsChecked[2].get()}\n              onChange={e => onSymptomCheckboxChange(2)(e)}\n            />\n            <MultipleChoiceQuestion\n              id={person.id}\n              questionText={`Loss of taste`}\n              checked={symptomsChecked[3].get()}\n              onChange={e => onSymptomCheckboxChange(3)(e)}\n            />\n          </div>\n        ) : null}\n        {symptomsStart ? (\n          <DateQuestion\n            id={person.id}\n            promptText=\"Date of first appearance of symptoms\"\n            questionFieldTextState={\n              covidEventsState[CovidEventName.SymptomsStart]\n            }\n            questionFieldName={CovidEventName.SymptomsStart}\n          />\n        ) : null}\n        <div className={\"mb-3\"} />\n        {symptomsStart ? (\n          <MultipleChoiceQuestion\n            id={person.id}\n            questionText={`${person.name}'s symptoms have been improved for 24 hours.`}\n            checked={props.personState.noSymptomsFor24Hours.get()}\n            onChange={() => props.personState.noSymptomsFor24Hours.set(c => !c)}\n            tooltip={\n              <span>\n                Improved symptoms are a requirement for you to end isolation. If\n                your symptoms improve AND you have had no fever for 24 hours\n                without the use of medicine, check this box.{\" \"}\n                <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-test-positive-covid-19\">\n                  Link.\n                </a>{\" \"}\n              </span>\n            }\n          />\n        ) : null}\n      </>\n    );\n  }\n\n  function setContagiousState(contagious: boolean) {\n    relevantInHouseExposureEventsState.reverse().map(e => e.set(none)); // Remove all current exposures\n    const newExposureEvents = members.map((otherPerson: PersonData) => {\n      const otherContagious = isContagious(otherPerson);\n      if (person.id !== otherPerson.id && contagious !== otherContagious) {\n        return {\n          contagiousPerson: contagious ? person.id : otherPerson.id,\n          quarantinedPerson: contagious ? otherPerson.id : person.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    props.inHouseExposureEventsState.merge(compact(newExposureEvents));\n  }\n\n  const meaningfulInHouseExposures = members.filter(\n    (otherPerson: PersonData) =>\n      person !== otherPerson && contagious !== isContagious(otherPerson)\n  );\n\n  function removeFromMembers() {\n    relevantInHouseExposureEventsState.reverse().map(e => e.set(none)); // Remove all current exposures\n    props.personState.set(none);\n  }\n\n  function renderGuidance() {\n    if (editingHousehold) {\n      return null;\n    } else {\n      if (props.guidance.endDate) {\n        return props.guidance.infected ? \" - Isolate\" : \" - Quarantine\";\n      } else {\n        return null;\n      }\n    }\n  }\n\n  function guidanceDefinition(infected: boolean) {\n    return (\n      <p>\n        {infected\n          ? \"Avoid contact with everyone, including your household.\"\n          : \"Avoid contact with everyone outside of your household.\"}\n      </p>\n    );\n  }\n\n  function guidanceMessage(guidance: Guidance) {\n    if (guidance.endDate) {\n      const date = format(guidance.endDate, \"PPPP\");\n      if (guidance.infected) {\n        if (guidance.person.noSymptomsFor24Hours) {\n          return (\n            <>\n              <p>\n                Until {date} &nbsp;{calendarIcon(guidance)}\n              </p>\n              <p>\n                This is 10 days after the earliest known date of illness onset.\n              </p>\n            </>\n          );\n        } else {\n          return (\n            <>\n              <p>Until at least {date} and 24 hours after symptoms improve</p>\n              <p>\n                This is 10 days after the earliest known date of illness onset.\n              </p>\n            </>\n          );\n        }\n      } else {\n        if (guidance.peopleWithOngoingExposureWithSymptoms?.length) {\n          const names = guidance.peopleWithOngoingExposureWithSymptoms?.join(\n            \", \"\n          );\n          return (\n            <>\n              <p>\n                Until 14 days after isolation period ends for {names} (at least{\" \"}\n                {date})\n              </p>\n              <p>\n                Please come back when symptoms for {names} have improved for an\n                exact date.\n              </p>\n              {guidance.person.atLeastOne ? (\n                <p>\n                  {\" \"}\n                  We recommend you get a covid test because you have shown a\n                  symptom.{\" \"}\n                </p>\n              ) : null}\n            </>\n          );\n        } else {\n          return (\n            <>\n              <p>\n                Until {date} &nbsp;{calendarIcon(guidance)}\n              </p>\n              <p>This is 14 days after the last known exposure date.</p>\n              {guidance.person.atLeastOne ? (\n                <p>\n                  We recommend you get a covid test because you have shown a\n                  symptom.\n                </p>\n              ) : null}\n            </>\n          );\n        }\n      }\n    } else {\n      if (guidance.person.atLeastOne) {\n        return (\n          <p>\n            We recommend you get a covid test because you have shown a symptom.\n          </p>\n        );\n      }\n    }\n  }\n\n  function calendarIcon(guidance: Guidance) {\n    if (guidance.startDate && guidance.endDate) {\n      const title = guidance.infected ? \"Isolate\" : \"Quarantine\";\n      const message = `Recommended CDC guidance for ${guidance.person.name}.`;\n      const start = guidance.startDate;\n      const end = guidance.endDate;\n      return (\n        <button onClick={downloadEvent(title, message, start, end)}>\n          <i className=\"fas fa-calendar\" aria-hidden=\"true\"></i>\n        </button>\n      );\n    }\n  }\n\n  function renderEditing() {\n    return (\n      <div className=\"ml2 \">\n        <div className=\"mb-3\">\n          <label htmlFor={`${person.id}-name`}>Name</label>\n          <div className=\"input-group\">\n            <input\n              className=\"form-control\"\n              value={person.name}\n              name=\"name\"\n              id={`${person.id}-name`}\n              type=\"text\"\n              onChange={(e: React.BaseSyntheticEvent) =>\n                props.personState.name.set(e.target.value)\n              }\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-secondary\"\n                onClick={(e: React.BaseSyntheticEvent) => {\n                  e.stopPropagation();\n                  removeFromMembers();\n                }}\n              >\n                Remove\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          {buildCovidEventQuestion(\n            CovidEventName.LastCloseContact,\n            `${person.name} had close contact to someone COVID positive that does not live with them`,\n            \"Date of last contact\",\n            <div>\n              Close contact means any of the following:\n              <ul className=\"mx-3 mb-1\">\n                <li>\n                  You were within 6 feet of them for a total of 15 minutes or\n                  more\n                </li>\n                <li>You provided care at home to the person</li>\n                <li>\n                  You had direct physical contact with the person (hugged or\n                  kissed them)\n                </li>\n                <li>You shared eating or drinking utensils</li>\n                <li>\n                  They sneezed, coughed, or somehow got respiratory droplets on\n                  you\n                </li>\n              </ul>{\" \"}\n              <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n                Link.\n              </a>\n            </div>\n          )}\n        </div>\n        <div className=\"mb-3\">\n          <hr />\n          {buildCovidEventQuestion(\n            CovidEventName.PositiveTest,\n            `${person.name} has received a positive test result`,\n            \"Date of test\"\n          )}\n        </div>\n        <div className=\"mb-3\">\n          <hr />\n          {buildSymptomsQuestion()}\n        </div>\n        <InHouseExposureQuestions\n          person={person}\n          meaningfulInHouseExposures={meaningfulInHouseExposures}\n          relevantInHouseExposureEventsState={\n            relevantInHouseExposureEventsState\n          }\n        />\n      </div>\n    );\n  }\n\n  function renderNonEditing() {\n    return (\n      <div className={\"card shadow-sm mb-2\"}>\n        <div className=\"card-body\">\n          <div className={\"\"}>\n            <h4 className=\"d-flex justify-content-between align-items-center\">\n              <span className=\"\">\n                {person.name + \"\"}\n                {renderGuidance()}\n              </span>\n            </h4>\n            {!editingHousehold && guidanceDefinition(props.guidance.infected)}\n            {!editingHousehold && guidanceMessage(props.guidance)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return editingHousehold ? renderEditing() : renderNonEditing();\n}\n","import {\n  Guidance,\n  CovidEventName,\n  InHouseExposure,\n  PersonData,\n  Exposure\n} from \"./types\";\nimport { addDays, parse } from \"date-fns\";\nimport {\n  flow,\n  compact,\n  map,\n  thru,\n  partition,\n  filter,\n  max,\n  maxBy,\n  min,\n  minBy\n} from \"lodash/fp\";\n\nexport function computeHouseHoldQuarantinePeriod(\n  household: PersonData[],\n  inHouseExposures: InHouseExposure[]\n): Guidance[] {\n  const [infectedGuidances, quarantinedGuidances] = flow(\n    map((person: PersonData) => {\n      const isolationPeriod = computeIsolationPeriod(person);\n      if (isolationPeriod) {\n        const [startDate, endDate] = isolationPeriod;\n        return {\n          person: person,\n          infected: true,\n          startDate: startDate,\n          endDate: endDate\n        };\n      } else {\n        return {\n          person: person,\n          infected: false\n        };\n      }\n    }),\n    partition(c => c.infected)\n  )(household);\n  const updatedQuarantinedGuidance: Guidance[] = quarantinedGuidances.map(\n    guidance =>\n      computeQuarantineGuidance(guidance, inHouseExposures, infectedGuidances)\n  );\n  return [...infectedGuidances, ...updatedQuarantinedGuidance];\n}\n\nexport function computeIsolationPeriod(person: PersonData): Date[] | undefined {\n  const covidPositiveEvents = [\n    person.covidEvents[CovidEventName.SymptomsStart],\n    person.covidEvents[CovidEventName.PositiveTest]\n  ];\n  const illnessOnset = flow(\n    compact,\n    map((date: string) => parse(date, \"M/dd/yyyy\", new Date())),\n    thru((dates: Date[]) => min(dates))\n  )(covidPositiveEvents);\n  if (illnessOnset) {\n    const tenDaysAfterOnset = addDays(illnessOnset, 10);\n    const symptomsEnd = person.noSymptomsFor24Hours ? undefined : new Date(); // TODO: Rethink\n    const isolationEndDate = flow(\n      compact,\n      thru((dates: Date[]) => max(dates))\n    )([tenDaysAfterOnset, symptomsEnd]);\n    return [illnessOnset, isolationEndDate];\n  }\n}\n\nfunction computeQuarantineGuidance(\n  guidance: Guidance,\n  inHouseExposures: InHouseExposure[],\n  infectedGuidances: Guidance[]\n) {\n  const person = guidance.person;\n  const relevantInHouseExposures = filter(\n    (event: InHouseExposure) =>\n      event.quarantinedPerson === person.id && event.exposed\n  )(inHouseExposures);\n  const normalize = map((event: InHouseExposure) => {\n    const infectedGuidance = infectedGuidances.find(\n      guidance => guidance.person.id === event.contagiousPerson\n    ) as Guidance;\n    if (event.ongoing) {\n      return {\n        startDate: infectedGuidance.startDate as Date,\n        endDate: infectedGuidance.endDate as Date,\n        infectionSource: infectedGuidance.person\n      };\n    } else {\n      return {\n        startDate: infectedGuidance.startDate as Date,\n        endDate: parse(event.date, \"M/dd/yyyy\", new Date()),\n        infectionSource: infectedGuidance.person\n      };\n    }\n  });\n  const normalizedInHouseExposures = compact(\n    normalize(relevantInHouseExposures)\n  );\n  const exposures = addOutsideExposures(person, normalizedInHouseExposures);\n  const earliestExposure = minBy(exposure => exposure.startDate, exposures);\n  const latestExposure = maxBy(exposure => exposure.endDate, exposures);\n  let startDate = earliestExposure?.startDate;\n  let endDate = undefined;\n  if (latestExposure) {\n    endDate = addDays(latestExposure.endDate, 14);\n  }\n  const peopleWithOngoingExposureWithSymptoms = flow(\n    map((event: InHouseExposure) => {\n      if (event.ongoing) {\n        const personWithOngoingExposure = infectedGuidances.find(\n          guidance => guidance.person.id === event.contagiousPerson\n        )?.person;\n        if (!personWithOngoingExposure?.noSymptomsFor24Hours) {\n          return personWithOngoingExposure?.name;\n        }\n      }\n    }),\n    compact\n  )(relevantInHouseExposures);\n  return {\n    person: person,\n    infected: false,\n    startDate: startDate,\n    endDate: endDate,\n    infectionSource: latestExposure && latestExposure.infectionSource,\n    peopleWithOngoingExposureWithSymptoms: peopleWithOngoingExposureWithSymptoms\n  };\n}\n\nfunction addOutsideExposures(person: PersonData, exposures: Exposure[]) {\n  const outHouseExposureDateString =\n    person.covidEvents[CovidEventName.LastCloseContact];\n  if (outHouseExposureDateString) {\n    const outHouseExposureDate = parse(\n      outHouseExposureDateString,\n      \"M/dd/yyyy\",\n      new Date()\n    );\n    const outHouseExposure = {\n      startDate: outHouseExposureDate,\n      endDate: outHouseExposureDate,\n      infectionSource: undefined\n    };\n    exposures = [...exposures, outHouseExposure];\n  }\n  return exposures;\n}\n","import React, { useRef } from \"react\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport Person from \"./Person\";\nimport { State } from \"@hookstate/core\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  height: State<number>;\n  showModalState: State<boolean>;\n}\n\nexport default function Household(props: Props) {\n  const editingHousehold = props.editingHouseholdState.get();\n  const members = props.membersState.get();\n  const inHouseExposureEvents = props.inHouseExposureEventsState.get();\n  const guidance = computeHouseHoldQuarantinePeriod(\n    members,\n    inHouseExposureEvents\n  );\n\n  const editingPersonRef = useRef<HTMLDivElement>(null);\n\n  function addPerson(e: React.BaseSyntheticEvent) {\n    e.stopPropagation();\n    props.editingHouseholdState.set(true);\n    props.addNewPerson();\n  }\n\n  function renderTitle() {\n    if (editingHousehold) {\n      return (\n        <>\n          <h2\n            style={{\n              fontFamily: \"Helvetica\",\n              fontSize: \"48px\",\n              fontStyle: \"normal\",\n              fontWeight: 400,\n              lineHeight: \"56px\",\n              letterSpacing: \"-0.01em\",\n              textAlign: \"left\"\n            }}\n          >\n            Tell us about yourself and each person you live with\n          </h2>\n          <p\n            className=\"lead\"\n            style={{\n              fontFamily: \"Helvetica\",\n              fontSize: \"24px\",\n              fontStyle: \"normal\",\n              fontWeight: 400,\n              lineHeight: \"36px\",\n              letterSpacing: \"0em\",\n              textAlign: \"left\",\n              color: \"#000000\"\n            }}\n          >\n            Thank you for doing your part to keep our community safe! For help\n            with a question, tap \"?\"\n          </p>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h2>Our recommendation</h2>\n          <p className=\"lead text-muted\">\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n        </>\n      );\n    }\n  }\n\n  function renderAction() {\n    if (members.length) {\n      if (editingHousehold) {\n        return (\n          <div className=\"\">\n          <button\n            className=\"white get-recommendation-button\"\n            onClick={(e: React.BaseSyntheticEvent) => {\n              props.editingHouseholdState.set(false);\n            }}\n          >\n            Get recommendation{\" \"}\n          </button>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"d-flex justify-content-between\">\n            <button\n              className=\"btn btn-primary my-3\"\n              onClick={(e: React.BaseSyntheticEvent) => {\n                props.showModalState.set(false);\n              }}\n            >\n              See on calendar{\" \"}\n            </button>\n            <button\n              className=\"btn btn-secondary my-3\"\n              onClick={(e: React.BaseSyntheticEvent) => {\n                props.editingHouseholdState.set(true);\n              }}\n            >\n              Edit{\" \"}\n            </button>\n          </div>\n        );\n      }\n    }\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\"\n        }}\n      >\n        <div\n          className={\"col-md-6\"}\n          style={{\n            backgroundColor: \"#fff\",\n            minHeight: props.height.get() + \"px\"\n          }}\n        >\n          <header>\n            <div className=\"navbar household\">\n              <div className=\"container d-flex justify-content-between\">\n                <div />\n                <div\n                  className={\"my-2\"}\n                  onClick={(e: React.BaseSyntheticEvent) => {\n                    props.showModalState.set(false);\n                  }}\n                >\n                  Close\n                </div>\n              </div>\n            </div>\n          </header>\n          <div className={\"container\"}>\n            <div className={\"my-3\"} />\n            {renderTitle()}\n            <div>\n              {props.membersState.map((personState: State<PersonData>) => {\n                const person = personState.get();\n                const id = person.id;\n                const personGuidance = guidance.find(c => c.person.id === id);\n                if (personGuidance) {\n                  return (\n                    <Person\n                      key={id}\n                      personState={personState}\n                      membersState={props.membersState}\n                      inHouseExposureEventsState={\n                        props.inHouseExposureEventsState\n                      }\n                      editingHouseholdState={props.editingHouseholdState}\n                      guidance={personGuidance}\n                      editingPersonRef={editingPersonRef}\n                    />\n                  );\n                }\n              })}\n            </div>\n            {editingHousehold && (\n              <button className=\"mb-2\" onClick={addPerson}>\n                <div style={{display: \"flex\"}}>\n                <div style={{width:\"44px\"}}> {/*hold the space open for no image load-time jump. There's even a teeny delay for an svg load, and that's dumb, so this stays.  */}\n                <img\n                  src={process.env.PUBLIC_URL + \"/circle-plus.svg\"}\n                  style={{ marginLeft: \"-0.05rem\" }}\n                />\n                </div>\n                <span className={\"add-another-person\"}>\n                  Add another person &nbsp;\n                </span>\n                </div>\n              </button>\n            )}\n            {renderAction()}\n          </div>\n        </div>\n        <div className={\"col-md-6\"} />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { DateClickArg } from \"@fullcalendar/interaction\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { colors } from \"./types\";\n\nimport { PersonData, Guidance, InHouseExposure } from \"./types\";\nimport { State } from \"@hookstate/core\";\nimport { compact, map, flow } from \"lodash/fp\";\n\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEvents: InHouseExposure[];\n}\n\nexport default function GridView(props: Props) {\n  const members = props.membersState.get();\n  function computeEvents(\n    members: PersonData[],\n    inHouseExposureEvents: InHouseExposure[]\n  ) {\n    return flow(\n      map((guidance: Guidance) => {\n        if (guidance.endDate) {\n          return {\n            classNames: [\"TODO\"],\n            title: guidance.person.name,\n            start: guidance.startDate, // startDate is guaranteed if endDate exists\n            end: guidance.endDate,\n            color: colors[(guidance.person.id - 1) % colors.length],\n            textColor: \"#000000\"\n          };\n        }\n      }),\n      compact\n    )(computeHouseHoldQuarantinePeriod(members, inHouseExposureEvents));\n  }\n\n  return (\n    <div className={\"p-3\"}>\n      <div>\n        <FullCalendar\n          plugins={[dayGridPlugin, interactionPlugin]}\n          initialView=\"dayGridMonth\"\n          events={computeEvents(members, props.inHouseExposureEvents)}\n          dateClick={(info: DateClickArg) => {}}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GridView from \"./GridView\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  showModalState: State<boolean>;\n}\n\nexport default function Home(props: Props) {\n  const members = props.membersState.get();\n\n  function renderTitle() {\n    if (members.length) {\n      return (\n        <>\n          <h1>Here is our recommendation for your household</h1>\n          <p className=\"lead text-muted\">\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n          <div\n            className=\"btn btn-primary my-2\"\n            onClick={() => {\n              props.showModalState.set(true);\n            }}\n          >\n            Edit Answers\n          </div>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h1\n            style={{\n              fontFamily: \"Helvetica\",\n              fontSize: \"60px\",\n              fontStyle: \"normal\",\n              lineHeight: \"71px\",\n              textAlign: \"center\",\n              color: \"#1F252F\"\n            }}\n          >\n            {\" \"}\n            Quarantine and Isolation Calculator\n          </h1>\n          <p className=\"f3 gray\">\n            Did someone in your household test positive? Are they starting to\n            get sick? Answer a few questions to know who should isolate,\n            quarantining, and for how long.\n          </p>\n          <div style={{ position: \"relative\", paddingBottom: \"120px\" }}>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                padding: \"18px 40px\",\n                position: \"absolute\",\n                background: \"#1A5BFF\",\n                borderRadius: \"40px\",\n                width: \"295px\",\n                height: \"58px\",\n                left: \"calc(50% - 295px/2)\",\n                top: \"50px\",\n                fontFamily: \"Arial\",\n                fontStyle: \"normal\",\n                fontWeight: \"bold\",\n                fontSize: \"14px\",\n                lineHeight: \"160%\",\n                textAlign: \"center\",\n                letterSpacing: \"0.02em\",\n                textTransform: \"uppercase\",\n                color: \"#FFFFFF\",\n                flex: \"none\",\n                order: 0,\n                flexGrow: 0,\n                margin: \"0px 0px\"\n              }}\n              onClick={() => {\n                props.showModalState.set(true);\n              }}\n            >\n              Get Started\n            </div>\n          </div>\n        </>\n      );\n    }\n  }\n\n  return (\n    <div style={{ position: \"relative\", minHeight: \"100%\" }}>\n      <header>\n        <div className=\"navbar\">\n          <div\n            className=\"container d-flex justify-content-between\"\n            style={{\n              fontFamily: \"Arial\",\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"14px\",\n              lineHeight: \"160%\",\n              textAlign: \"center\",\n              letterSpacing: \"0.02em\",\n              textTransform: \"uppercase\",\n              color: \"#1F252F\"\n            }}\n          >\n            <div className=\"d-flex align-items-center\">COVID CALCULATOR</div>\n            <div>ESPAÑOL</div>\n          </div>\n        </div>\n      </header>\n      <main className={\"main\"} role={\"main\"} style={{ paddingBottom: \"250px\" }}>\n        <section className={\"jumbotron\"} style={{ background: \"#FFFFFF\" }}>\n          <div className=\"container\">{renderTitle()}</div>\n        </section>\n        <div\n          className=\"container pb-5\"\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            background: \"#F8F8F8\",\n            paddingTop: \"91px\"\n          }}\n        >\n          <div\n            style={{\n              width: \"70%\"\n            }}\n          >\n            <h2 style={{ textAlign: \"center\" }}>Quarantine vs. Isolation</h2>\n            <div className=\"py-2\"></div>\n            <div className=\"row\">\n              <div className=\"col-md-6  col-sm-12 f3 gray\">\n                <div\n                  style={{\n                    marginLeft: \"calc(50% - 90px)\",\n                    marginTop: \"80px\",\n                    marginBottom: \"60px\"\n                  }}\n                >\n                  <img src={process.env.PUBLIC_URL + \"/quarantine.svg\"} />\n                </div>\n                People who must <strong>quarantine</strong> are avoiding contact\n                with everyone outside their home.\n              </div>\n              <div className=\"col-md-6 col-sm-12 f3 gray\">\n                <div\n                  style={{\n                    marginLeft: \"calc(50% - 90px)\",\n                    marginTop: \"80px\",\n                    marginBottom: \"60px\"\n                  }}\n                >\n                  <img src={process.env.PUBLIC_URL + \"/isolation.svg\"} />\n                </div>\n                People who must <strong>isolate</strong> should keep away from\n                everyone inside and outside the home.\n              </div>\n            </div>\n          </div>\n        </div>\n        {members.length ? (\n          <GridView\n            membersState={props.membersState}\n            inHouseExposureEvents={props.inHouseExposureEventsState.get()}\n          />\n        ) : null}\n      </main>\n\n      {/*\n      <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/isolation.html\">\n        CDC guidelines on isolation\n      </a>\n      <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n        CDC guidelines on quarantine\n      </a>\n      */}\n      <footer\n        className={\"py-5\"}\n        style={{\n          background: \"#1F252F\",\n          position: \"absolute\",\n          bottom: \"0%\",\n          width: \"100%\",\n          height: \"250px\"\n        }}\n      >\n        <div\n          className={\"container\"}\n          style={{\n            width: \"400px\"\n          }}\n        >\n          {\" \"}\n          {/* contains images and below-text*/}\n          <div\n            style={{\n              position: \"relative\",\n              width: \"100%\",\n              height: \"50px\"\n            }}\n          >\n            <span style={{ display: \"inline\" }}>\n              <a href={\"https://www.clackamas.us/publichealth\"}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/logo-clackamas.png\"}\n                  style={{ height: \"100%\" }}\n                />\n              </a>\n            </span>\n            <span\n              style={{\n                display: \"inline\",\n                height: \"1px\",\n                width: \"56.1px\",\n                opacity: 0.5,\n                border: \"1px solid #FFFFFF\",\n                transform: \"rotate(120.37deg)\",\n                position: \"absolute\",\n                left: \"19.51%\",\n                top: \"50.6%\"\n              }}\n            ></span>\n            <span style={{ display: \"inline-block\", width: \"50px\" }}>\n              &nbsp;\n            </span>\n            <span style={{ display: \"inline\" }}>\n              <a href={\"https://www.codeforpdx.org/\"}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/logo-code-for-pdx.png\"}\n                  style={{ height: \"100%\" }}\n                />\n              </a>\n            </span>\n          </div>\n          <div className=\"py-3\"></div>\n          <div style={{ color: \"#FFFFFF\" }}>\n            Made in partnership between Clackamas County and Code for PDX.\n            Recommendations use CDC guidelines.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useState } from \"@hookstate/core\";\nimport Household from \"./Household\";\nimport Home from \"./Home\";\nimport { CovidEventName, InHouseExposure, PersonData } from \"./types\";\nimport { compact } from \"lodash/fp\";\nimport { getRandomInt, isContagious } from \"./util\";\nimport ReactModal from \"react-modal\";\n\nexport default function App() {\n  const height = useState(window.innerHeight);\n  const updateHeight = () => {\n    height.set(window.innerHeight);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateHeight);\n    return () => window.removeEventListener(\"resize\", updateHeight);\n  }, []);\n  const members = useState([] as PersonData[]);\n  const inHouseExposureEvents = useState<InHouseExposure[]>([]);\n  const id = useState(members.length + 1);\n  const editingHouseholdState = useState(true);\n  const editingPersonState = useState<number | undefined>(undefined);\n  const showModalState = useState(false);\n\n  function addNewPerson() {\n    const currentId = id.get();\n    const newPerson = {\n      id: currentId,\n      name: `Person ${getRandomInt(1000)}`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      symptomsChecked: [false, false, false, false],\n      noSymptomsFor24Hours: true,\n      atLeastOne: false,\n      isNewPerson: true,\n      editing: true\n    };\n    id.set(id => id + 1);\n    members.set(members => [...members, newPerson]);\n    editingPersonState.set(currentId);\n    const newExposureEvents = members.get().map((person: PersonData) => {\n      if (isContagious(person)) {\n        return {\n          contagiousPerson: person.id,\n          quarantinedPerson: newPerson.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    inHouseExposureEvents.merge(compact(newExposureEvents));\n  }\n\n  return (\n    <>\n      <ReactModal\n        isOpen={showModalState.get()}\n        className={showModalState.get() ? \"slide-in\" : \"slide-out\"}\n        style={{\n          overlay: {\n            zIndex: 1\n          },\n          content: {\n            position: \"absolute\",\n            inset: \"0px\",\n            padding: \"0px\",\n            background: \"none\",\n            border: \"none\",\n            borderRadius: \"none\",\n            overflow: \"auto\",\n            WebkitOverflowScrolling: \"touch\",\n            outline: \"none\"\n          }\n        }}\n      >\n        <Household\n          addNewPerson={addNewPerson}\n          editingHouseholdState={editingHouseholdState}\n          height={height}\n          inHouseExposureEventsState={inHouseExposureEvents}\n          membersState={members}\n          showModalState={showModalState}\n        />\n      </ReactModal>\n      <Home\n        membersState={members}\n        inHouseExposureEventsState={inHouseExposureEvents}\n        showModalState={showModalState}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport ReactModal from \"react-modal\";\n\nconst rootElement = document.getElementById(\"root\");\nReactModal.setAppElement(rootElement as HTMLElement);\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}