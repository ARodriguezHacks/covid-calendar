{"version":3,"sources":["types.ts","DateQuestion.tsx","MultipleChoiceQuestion.tsx","InHouseExposureQuestion.tsx","InHouseExposureQuestions.tsx","util.tsx","Person.tsx","calculator.ts","Household.tsx","GridView.tsx","Home.tsx","App.tsx","index.tsx"],"names":["CovidEventName","colors","DateQuestion","props","questionFieldText","questionFieldTextState","get","parsedDate","parse","Date","questionFieldDate","isValid","className","htmlFor","id","questionFieldName","selected","onChange","date","validDate","set","format","name","MultipleChoiceQuestion","checked","questionText","type","tooltip","aria-hidden","InHouseExposureQuestion","inHouseExposureEvent","inHouseExposureEventState","isExposed","exposed","isOngoing","ongoing","person","otherPerson","v","ongoingState","newOngoing","index","InHouseExposureQuestions","meaningfulInHouseExposures","map","relevantInHouseExposureEventsState","find","eventState","event","quarantinedPerson","contagiousPerson","key","getRandomInt","max","Math","floor","random","isContagious","Boolean","covidEvents","PositiveTest","SymptomsStart","Person","personState","members","membersState","covidEventsState","editingPerson","editingPersonState","editingHousehold","editingHouseholdState","inHouseExposureEventsState","filter","relevantInHouseExposureEvents","e","selectionsState","useState","Object","values","reduce","selections","contagious","onCheckboxChange","fieldName","target","nextContagious","setContagiousState","buildCovidEventQuestion","none","newExposureEvents","otherContagious","dateMissing","dateInvalid","merge","compact","value","LastCloseContact","href","symptomsStart","noSymptomsFor24Hours","c","buildSymptomsQuestion","onClick","undefined","isNewPerson","guidance","endDate","infected","result","peopleWithOngoingExposureWithSymptoms","length","names","join","guidanceMessage","entries","quarantinedPersonName","member","contagiousPersonName","computeHouseHoldQuarantinePeriod","household","inHouseExposureEvents","flow","isolationEndDate","covidPositiveEvents","illnessOnset","thru","dates","min","tenDaysAfterOnset","addDays","symptomsEnd","computeIsolationPeriod","partition","quarantinedCalculations","calculation","lastExposureDate","outHouseExposureDateString","outHouseExposureDate","latestExposureDate","personWithOngoingExposure","fourteenDaysFromLastExposure","Household","style","display","flexWrap","minHeight","height","to","personGuidance","addNewPerson","GridView","plugins","dayGridPlugin","interactionPlugin","initialView","events","classNames","title","start","parseISO","end","color","textColor","computeEvents","dateClick","info","Home","role","App","window","innerHeight","updateHeight","useEffect","addEventListener","removeEventListener","basename","process","path","currentId","newPerson","editing","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.faa35c05.chunk.js","sourcesContent":["export interface PersonData {\n  id: number;\n  name: string;\n  covidEvents: CovidEvents;\n  noSymptomsFor24Hours: boolean;\n  isNewPerson: boolean;\n  editing: boolean;\n}\n\nexport enum CovidEventName {\n  LastCloseContact = \"Most Recent Close Contact\",\n  SymptomsStart = \"Illness Onset\",\n  PositiveTest = \"Most Recent Positive Test\"\n}\n\nexport type CovidEvents = {\n  [key in CovidEventName]: string;\n};\n\nexport interface InHouseExposureEvent {\n  contagiousPerson: number;\n  quarantinedPerson: number;\n  exposed: boolean;\n  ongoing: boolean;\n  date: string;\n}\n\nexport interface CalculationResult {\n  person: PersonData;\n  endDate: Date;\n  peopleWithOngoingExposureWithSymptoms?: string[];\n  infected?: boolean;\n}\n\nexport const colors = [\n  \"#b35806\",\n  \"#e08214\",\n  \"#fdb863\",\n  \"#fee0b6\",\n  \"#d8daeb\",\n  \"#b2abd2\",\n  \"#8073ac\",\n  \"#542788\"\n];\n","import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { State } from \"@hookstate/core\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { parse, format, isValid } from \"date-fns\";\ninterface Props {\n  id: number;\n  questionFieldTextState: State<string>;\n  questionFieldName: string;\n}\n\nexport default function DateQuestion(props: Props) {\n  const questionFieldText = props.questionFieldTextState.get();\n  const parsedDate = parse(questionFieldText, \"M/dd/yyyy\", new Date());\n  const questionFieldDate = isValid(parsedDate) ? parsedDate : new Date();\n\n  return (\n    <div className=\"\">\n      <label htmlFor={`${props.id}-${props.questionFieldName}`}>\n        Date <span className=\"f6 fw3\">mm/dd/yyyy</span>\n      </label>\n      <DatePicker\n        className=\"form-control\"\n        selected={questionFieldDate}\n        onChange={(date: Date) => {\n          const validDate = isValid(date) ? date : new Date(); // Default to today\n          props.questionFieldTextState.set(format(validDate, \"MM/dd/yyyy\"));\n        }}\n        name={props.questionFieldName}\n        id={`${props.id}-${props.questionFieldName}`}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { parse, format } from \"date-fns\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel\n} from \"@reach/disclosure\";\n\ninterface Props {\n  id: number;\n  questionText: string;\n  checked: boolean;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  tooltip?: JSX.Element;\n}\n\nexport default function MultipleChoiceQuestion(props: Props) {\n  return (\n    <div className=\"custom-control custom-checkbox mb-3\">\n      <input\n        className=\"custom-control-input\"\n        checked={props.checked}\n        id={`checkbox-${props.id}-${props.questionText}`}\n        type=\"checkbox\"\n        onChange={props.onChange}\n      />\n      <Disclosure>\n        <label\n          className=\"custom-control-label\"\n          htmlFor={`checkbox-${props.id}-${props.questionText}`}\n        >\n          {props.questionText}\n          {props.tooltip && (\n            <DisclosureButton>\n              <i\n                aria-hidden=\"true\"\n                className=\"px-1 fas fa-question-circle link hover-dark-blue gray\"\n              ></i>\n            </DisclosureButton>\n          )}\n        </label>\n        {props.tooltip && (\n          <DisclosurePanel>\n            <div className=\"f5 gray\">{props.tooltip}</div>\n          </DisclosurePanel>\n        )}\n      </Disclosure>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { InHouseExposureEvent, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport DateQuestion from \"./DateQuestion\";\nimport { format } from \"date-fns\";\n\ninterface Props {\n  id: number;\n  index: number;\n  person: PersonData;\n  otherPerson: PersonData;\n  inHouseExposureEventState: State<InHouseExposureEvent>;\n}\n\nexport default function InHouseExposureQuestion(props: Props) {\n  const inHouseExposureEvent = props.inHouseExposureEventState.get();\n  const isExposed = inHouseExposureEvent.exposed;\n  const isOngoing = inHouseExposureEvent.ongoing;\n  return (\n    <div className=\"mb-3\">\n      <MultipleChoiceQuestion\n        id={props.id}\n        questionText={`${props.person.name} had close contact with ${props.otherPerson.name}`}\n        checked={isExposed}\n        onChange={() => props.inHouseExposureEventState.exposed.set(v => !v)}\n      />\n      {isExposed && (\n        <MultipleChoiceQuestion\n          id={props.id}\n          questionText={`${props.person.name}'s close contact with ${props.otherPerson.name} is ongoing`}\n          checked={isOngoing}\n          onChange={() => {\n            const ongoingState = props.inHouseExposureEventState.ongoing;\n            const ongoing = ongoingState.get();\n            const newOngoing = !ongoing;\n            ongoingState.set(newOngoing);\n            if (newOngoing) {\n              props.inHouseExposureEventState.date.set(\"\");\n            } else {\n              props.inHouseExposureEventState.date.set(\n                format(new Date(), \"MM/dd/yyyy\")\n              );\n            }\n          }}\n        />\n      )}\n      {isExposed && !isOngoing && (\n        <DateQuestion\n          id={props.id}\n          questionFieldTextState={props.inHouseExposureEventState.date}\n          questionFieldName={`crossExposure-${props.index}`}\n        />\n      )}\n    </div>\n  );\n}\n","import { InHouseExposureEvent, PersonData } from \"./types\";\nimport InHouseExposureQuestion from \"./InHouseExposureQuestion\";\nimport React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  person: PersonData;\n  meaningfulInHouseExposures: PersonData[];\n  relevantInHouseExposureEventsState: State<InHouseExposureEvent>[];\n}\n\nexport default function InHouseExposureQuestions(props: Props) {\n  return (\n    <>\n      {props.meaningfulInHouseExposures.map((otherPerson, index) => {\n        const inHouseExposureEventState = props.relevantInHouseExposureEventsState.find(\n          (eventState: State<InHouseExposureEvent>) => {\n            const event = eventState.get();\n            return (\n              event.quarantinedPerson === otherPerson.id ||\n              event.contagiousPerson === otherPerson.id\n            );\n          }\n        );\n        if (inHouseExposureEventState) {\n          return (\n            <>\n              <InHouseExposureQuestion\n                key={props.person.id + \"-\" + index}\n                id={props.person.id}\n                index={index}\n                person={props.person}\n                otherPerson={otherPerson}\n                inHouseExposureEventState={inHouseExposureEventState}\n              />\n              <hr />\n            </>\n          );\n        } else {\n          return <></>;\n        }\n      })}\n    </>\n  );\n}\n","import { flow, remove, concat } from \"lodash/fp\";\nimport { CovidEventName, PersonData } from \"./types\";\n\nexport function replace<T>(array: Array<T>, old: T, updated: T): Array<T> {\n  return flow(\n    remove(e => e === old),\n    concat([updated])\n  )(array);\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function isContagious(person: PersonData) {\n  return Boolean(\n    person.covidEvents[CovidEventName.PositiveTest] ||\n      person.covidEvents[CovidEventName.SymptomsStart]\n  );\n}\n","import React from \"react\";\nimport { useState, none, State } from \"@hookstate/core\";\n\nimport {\n  CovidEventName,\n  InHouseExposureEvent,\n  PersonData,\n  CalculationResult\n} from \"./types\";\nimport DateQuestion from \"./DateQuestion\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport InHouseExposureQuestions from \"./InHouseExposureQuestions\";\nimport { compact } from \"lodash/fp\";\nimport { isContagious } from \"./util\";\nimport { format, isValid } from \"date-fns\";\n\ninterface Props {\n  personState: State<PersonData>;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingHouseholdState: State<boolean>;\n  editingPersonState: State<number | undefined>;\n  guidance: CalculationResult;\n}\n\nexport default function Person(props: Props) {\n  const person = props.personState.get();\n  const members = props.membersState.get();\n  const covidEventsState = props.personState.covidEvents;\n  const editingPerson = props.editingPersonState.get();\n  const editingHousehold = props.editingHouseholdState.get();\n  const relevantInHouseExposureEventsState: State<\n    InHouseExposureEvent\n  >[] = props.inHouseExposureEventsState.filter(\n    (eventState: State<InHouseExposureEvent>) => {\n      const event: InHouseExposureEvent = eventState.get();\n      return (\n        event.contagiousPerson === person.id ||\n        event.quarantinedPerson === person.id\n      );\n    }\n  );\n  const relevantInHouseExposureEvents = relevantInHouseExposureEventsState.map(\n    e => e.get()\n  );\n  const selectionsState: any = useState(\n    Object.values(CovidEventName).reduce(\n      (selections: any, key: CovidEventName) => (\n        (selections[key] = covidEventsState[key].get() !== \"\"), selections\n      ),\n      {}\n    )\n  );\n  const selections = selectionsState.get();\n  const contagious =\n    selections[CovidEventName.PositiveTest] ||\n    selections[CovidEventName.SymptomsStart];\n\n  function onCheckboxChange(fieldName: CovidEventName) {\n    return (e: React.BaseSyntheticEvent) => {\n      const checked = e.target.checked;\n      selectionsState[fieldName].set(checked);\n      if (fieldName === CovidEventName.PositiveTest) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.SymptomsStart]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      } else if (fieldName === CovidEventName.SymptomsStart) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.PositiveTest]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      }\n      if (!checked) {\n        covidEventsState[fieldName].set(\"\");\n      } else {\n        covidEventsState[fieldName].set(format(new Date(), \"MM/dd/yyyy\"));\n      }\n    };\n  }\n\n  function buildCovidEventQuestion(\n    fieldName: CovidEventName,\n    questionText: string,\n    tooltip?: JSX.Element\n  ) {\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={questionText}\n          checked={selectionsState[fieldName].get()}\n          onChange={onCheckboxChange(fieldName)}\n          tooltip={tooltip}\n        />\n        {selectionsState[fieldName].get() && (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={covidEventsState[fieldName]}\n            questionFieldName={fieldName}\n          />\n        )}\n      </>\n    );\n  }\n\n  function buildSymptomsQuestion() {\n    const symptomsStartState = selectionsState[CovidEventName.SymptomsStart];\n    const symptomsStart = symptomsStartState.get();\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={`${person.name} has shown positive symptoms`}\n          checked={symptomsStart}\n          onChange={onCheckboxChange(CovidEventName.SymptomsStart)}\n          tooltip={\n            <span>\n              Consult the{\" \"}\n              <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html\">\n                CDC website\n              </a>{\" \"}\n              for a common list of symptoms of Covid.{\" \"}\n            </span>\n          }\n        />\n        {symptomsStart ? (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={\n              covidEventsState[CovidEventName.SymptomsStart]\n            }\n            questionFieldName={CovidEventName.SymptomsStart}\n          />\n        ) : null}\n        <div className={\"mb-3\"} />\n        {symptomsStart ? (\n          <MultipleChoiceQuestion\n            id={person.id}\n            questionText={`${person.name}'s symptoms have been improved for 24 hours.`}\n            checked={props.personState.noSymptomsFor24Hours.get()}\n            onChange={() => props.personState.noSymptomsFor24Hours.set(c => !c)}\n            tooltip={\n              <span>\n                Improved symptoms are a requirement for you to end isolation. If\n                your symptoms improve AND you have had no fever for 24 hours\n                without the use of medicine, check this box.{\" \"}\n                <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-test-positive-covid-19\">\n                  Link.\n                </a>{\" \"}\n              </span>\n            }\n          />\n        ) : null}\n      </>\n    );\n  }\n\n  function setContagiousState(contagious: boolean) {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    const newExposureEvents = members.map((otherPerson: PersonData) => {\n      const otherContagious = isContagious(otherPerson);\n      if (person !== otherPerson && contagious !== otherContagious) {\n        return {\n          contagiousPerson: contagious ? person.id : otherPerson.id,\n          quarantinedPerson: contagious ? otherPerson.id : person.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    props.inHouseExposureEventsState.merge(compact(newExposureEvents));\n  }\n\n  const meaningfulInHouseExposures = members.filter(\n    (otherPerson: PersonData) =>\n      person !== otherPerson && contagious !== isContagious(otherPerson)\n  );\n\n  function removeFromMembers() {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    props.personState.set(none);\n  }\n\n  function renderGuidance() {\n    if (editingHousehold) {\n      return null;\n    } else {\n      return isValid(props.guidance.endDate) && props.guidance.infected\n        ? \" - Isolate\"\n        : \" - Quarantine\";\n    }\n  }\n\n  function guidanceMessage(result: CalculationResult) {\n    const date = format(result.endDate, \"MM/dd/yyyy\");\n    if (result.infected) {\n      if (result.person.noSymptomsFor24Hours) {\n        return `Until ${date}`;\n      } else {\n        return `Until at least ${date} and 24 hours after symptoms improve`;\n      }\n    } else {\n      if (result.peopleWithOngoingExposureWithSymptoms?.length) {\n        const names = result.peopleWithOngoingExposureWithSymptoms?.join(\", \");\n        return `Until at least ${date} and 14 days after isolation period ends for ${names}`;\n      } else {\n        return `Until ${date}`;\n      }\n    }\n  }\n\n  function renderFeedback() {\n    return (\n      <div className=\"\">\n        {Object.entries(person.covidEvents).map(\n          ([name, date]: [string, string]) => {\n            if (date !== \"\") {\n              return (\n                <div className=\"f5\">\n                  {name}\n                  {\": \"} {date}\n                </div>\n              );\n            }\n          }\n        )}\n        {Object.values(relevantInHouseExposureEvents).map(\n          (event: InHouseExposureEvent) => {\n            if (event.exposed) {\n              const quarantinedPersonName = members.find(\n                member => member.id === event.quarantinedPerson\n              )?.name;\n              const contagiousPersonName = members.find(\n                member => member.id === event.contagiousPerson\n              )?.name;\n              if (event.ongoing) {\n                return (\n                  <div className=\"f5\">\n                    {quarantinedPersonName} has an ongoing exposure to{\" \"}\n                    {contagiousPersonName}{\" \"}\n                  </div>\n                );\n              } else {\n                return (\n                  <div className=\"f5\">\n                    {quarantinedPersonName} exposed to {contagiousPersonName} at{\" \"}\n                    {event.date}\n                  </div>\n                );\n              }\n            }\n          }\n        )}\n      </div>\n    );\n  }\n\n  function renderEditing() {\n    return (\n      <div className={\"card shadow-sm mb-2\"}>\n        <div className=\"p-2\">\n          <div className=\"mb-3\">\n            <label htmlFor={`${person.id}-name`}>Name</label>\n            <input\n              className=\"form-control\"\n              value={person.name}\n              name=\"name\"\n              id={`${person.id}-name`}\n              type=\"text\"\n              onChange={(e: React.BaseSyntheticEvent) =>\n                props.personState.name.set(e.target.value)\n              }\n            />\n          </div>\n          <div className=\"mb-3\">\n            {buildCovidEventQuestion(\n              CovidEventName.LastCloseContact,\n              `${person.name} has had close contact to someone presumed covid positive (outside the household)`,\n              <div>\n                Close contact means any of the following:\n                <ul className=\"mx-3 mb-1\">\n                  <li>\n                    You were within 6 feet of them for a total of 15 minutes or\n                    more\n                  </li>\n                  <li>You provided care at home to the person</li>\n                  <li>\n                    You had direct physical contact with the person (hugged or\n                    kissed them)\n                  </li>\n                  <li>You shared eating or drinking utensils</li>\n                  <li>\n                    They sneezed, coughed, or somehow got respiratory droplets\n                    on you\n                  </li>\n                </ul>{\" \"}\n                <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n                  Link.\n                </a>\n              </div>\n            )}\n            <hr />\n          </div>\n          <div className=\"mb-3\">\n            {buildCovidEventQuestion(\n              CovidEventName.PositiveTest,\n              `${person.name} has received a positive test result`\n            )}\n            <hr />\n          </div>\n          <div className=\"mb-3\">\n            {buildSymptomsQuestion()}\n            <hr />\n          </div>\n          <InHouseExposureQuestions\n            person={person}\n            meaningfulInHouseExposures={meaningfulInHouseExposures}\n            relevantInHouseExposureEventsState={\n              relevantInHouseExposureEventsState\n            }\n          />\n          <div className={\"d-flex justify-content-between align-items-center\"}>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => {\n                removeFromMembers();\n                props.editingPersonState.set(undefined);\n              }}\n            >\n              <span className=\"visually-hidden\">Remove</span>\n              Remove\n              <i\n                aria-hidden=\"true\"\n                className=\"pl2 fas fa-times-circle white\"\n              ></i>\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                props.editingPersonState.set(undefined);\n              }}\n            >\n              {person.isNewPerson ? \"Submit\" : \"Update\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderNonEditing() {\n    return (\n      <div className={\"card shadow-sm mb-2\"}>\n        <div className=\"card-body\">\n          <div className={\"\"}>\n            <h4 className=\"d-flex justify-content-between align-items-center\">\n              <span className=\"\">\n                {person.name + \"\"}\n                {renderGuidance()}\n              </span>\n              <span>\n                {!editingPerson && (\n                  <button\n                    onClick={() => {\n                      props.editingHouseholdState.set(true);\n                      props.editingPersonState.set(person.id);\n                    }}\n                  >\n                    <span className=\"visually-hidden\">Edit Person</span>\n                    <span aria-hidden=\"true\" className=\"f5 fas fa-pen\"></span>\n                  </button>\n                )}\n              </span>\n            </h4>\n            {!editingHousehold && isValid(props.guidance.endDate) && (\n              <p className=\"lead text-muted\">\n                {guidanceMessage(props.guidance)}\n              </p>\n            )}\n          </div>\n          <div className={\"my-3\"} />\n          {editingHousehold && renderFeedback()}\n        </div>\n      </div>\n    );\n  }\n\n  return editingPerson === person.id ? renderEditing() : renderNonEditing();\n}\n","import {\n  CalculationResult,\n  CovidEventName,\n  InHouseExposureEvent,\n  PersonData\n} from \"./types\";\nimport { addDays, max, min, isValid, parse } from \"date-fns\";\nimport { flow, compact, map, thru, partition, filter } from \"lodash/fp\";\n\nexport function computeHouseHoldQuarantinePeriod(\n  household: PersonData[],\n  inHouseExposureEvents: InHouseExposureEvent[]\n): CalculationResult[] {\n  const [infected, quarantined] = flow(\n    map((person: PersonData) => {\n      const isolationEndDate = computeIsolationPeriod(person);\n      if (isValid(isolationEndDate)) {\n        return {\n          person: person,\n          endDate: isolationEndDate,\n          infected: true\n        };\n      } else {\n        return {\n          person: person,\n          endDate: new Date(),\n          infected: false\n        };\n      }\n    }),\n    partition(c => c.infected)\n  )(household);\n  const quarantinedCalculations: CalculationResult[] = quarantined.map(\n    calculation => {\n      const person = calculation.person;\n      const relevantInHouseExposureEvents = filter(\n        (event: InHouseExposureEvent) =>\n          event.quarantinedPerson === person.id && event.exposed\n      )(inHouseExposureEvents);\n      const lastExposureDate = map((event: InHouseExposureEvent) => {\n        if (event.ongoing) {\n          return infected.find(\n            calculation => calculation.person.id === event.contagiousPerson\n          )?.endDate;\n        } else {\n          return parse(event.date, \"M/dd/yyyy\", new Date());\n        }\n      });\n      const outHouseExposureDateString =\n        person.covidEvents[CovidEventName.LastCloseContact];\n      const outHouseExposureDate = outHouseExposureDateString\n        ? parse(outHouseExposureDateString, \"M/dd/yyyy\", new Date())\n        : undefined;\n      const latestExposureDate = max(\n        compact([\n          ...lastExposureDate(relevantInHouseExposureEvents),\n          outHouseExposureDate\n        ])\n      );\n      const peopleWithOngoingExposureWithSymptoms = flow(\n        map((event: InHouseExposureEvent) => {\n          if (event.ongoing) {\n            const personWithOngoingExposure = infected.find(\n              calculation => calculation.person.id === event.contagiousPerson\n            )?.person;\n            if (!personWithOngoingExposure?.noSymptomsFor24Hours) {\n              return personWithOngoingExposure?.name;\n            }\n          }\n        }),\n        compact\n      )(relevantInHouseExposureEvents);\n      const fourteenDaysFromLastExposure = addDays(latestExposureDate, 14);\n      return {\n        person: person,\n        endDate: fourteenDaysFromLastExposure,\n        peopleWithOngoingExposureWithSymptoms: peopleWithOngoingExposureWithSymptoms,\n        infected: false\n      };\n    }\n  );\n  return [...infected, ...quarantinedCalculations];\n}\n\nexport function computeIsolationPeriod(person: PersonData): Date {\n  const covidPositiveEvents = [\n    person.covidEvents[CovidEventName.SymptomsStart],\n    person.covidEvents[CovidEventName.PositiveTest]\n  ];\n  const illnessOnset = flow(\n    compact,\n    map((date: string) => parse(date, \"M/dd/yyyy\", new Date())),\n    thru((dates: Date[]) => min(dates))\n  )(covidPositiveEvents);\n  const tenDaysAfterOnset = illnessOnset && addDays(illnessOnset, 10);\n  const symptomsEnd = person.noSymptomsFor24Hours ? undefined : new Date(); // TODO: Rethink\n  const isolationEndDate = flow(\n    compact,\n    thru((dates: Date[]) => max(dates))\n  )([tenDaysAfterOnset, symptomsEnd]);\n  return isolationEndDate;\n}\n","import React from \"react\";\nimport { InHouseExposureEvent, PersonData } from \"./types\";\nimport Person from \"./Person\";\nimport { State } from \"@hookstate/core\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingHouseholdState: State<boolean>;\n  editingPersonState: State<number | undefined>;\n  height: State<number>;\n}\n\nexport default function Household(props: Props) {\n  const editingHousehold = props.editingHouseholdState.get();\n  const editingPerson = props.editingPersonState.get();\n  const members = props.membersState.get();\n  const inHouseExposureEvents = props.inHouseExposureEventsState.get();\n  const guidance = computeHouseHoldQuarantinePeriod(\n    members,\n    inHouseExposureEvents\n  );\n\n  function renderTitle() {\n    if (editingHousehold) {\n      return (\n        <>\n          <h2>Add your household</h2>\n          <p className=\"lead text-muted\">\n            Be sure to add everyone in your household.\n          </p>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h2>Our recommendation</h2>\n          <p className=\"lead text-muted\">\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n        </>\n      );\n    }\n  }\n\n  function renderAction() {\n    if (editingHousehold) {\n      return (\n        <button\n          className=\"btn btn-primary my-3\"\n          onClick={() => props.editingHouseholdState.set(false)}\n        >\n          Get recommendation\n        </button>\n      );\n    } else {\n      return (\n        <Link to=\"/\">\n          <button className=\"btn btn-primary my-3\">See on calendar</button>\n        </Link>\n      );\n    }\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          minHeight: props.height.get() + \"px\"\n        }}\n      >\n        <div className={\"col-md-6\"}>\n          <header>\n            <div className=\"navbar household\">\n              <div className=\"container d-flex justify-content-between\">\n                <div />\n                <Link to=\"/\" className={\"my-2\"}>\n                  Close\n                </Link>\n              </div>\n            </div>\n          </header>\n          <div className={\"container\"}>\n            <div className={\"my-3\"} />\n            {renderTitle()}\n            <div>\n              {props.membersState.map((personState: State<PersonData>) => {\n                const person = personState.get();\n                const id = person.id;\n                const personGuidance = guidance.find(c => c.person.id === id);\n                if (personGuidance) {\n                  return (\n                    <Person\n                      key={id}\n                      personState={personState}\n                      membersState={props.membersState}\n                      inHouseExposureEventsState={\n                        props.inHouseExposureEventsState\n                      }\n                      editingHouseholdState={props.editingHouseholdState}\n                      editingPersonState={props.editingPersonState}\n                      guidance={personGuidance}\n                    />\n                  );\n                }\n              })}\n            </div>\n            {!editingPerson && (\n              <div\n                className={\"card shadow-sm mb-2\"}\n                onClick={() => {\n                  props.editingHouseholdState.set(true);\n                  props.addNewPerson();\n                }}\n              >\n                <button className={\"card-body\"}>\n                  <h4 className={\"\"}>\n                    Add Person &nbsp;\n                    <i className=\"fa fa-user-plus\" aria-hidden=\"true\"></i>\n                  </h4>\n                </button>\n              </div>\n            )}\n            {renderAction()}\n          </div>\n        </div>\n        <div className={\"col-md-6 empty\"} />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { DateClickArg } from \"@fullcalendar/interaction\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { colors } from \"./types\";\n\nimport { PersonData, CalculationResult, InHouseExposureEvent } from \"./types\";\nimport { format, parseISO } from \"date-fns\";\nimport { State } from \"@hookstate/core/dist\";\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEvents: InHouseExposureEvent[];\n}\n\nexport default function GridView(props: Props) {\n  const members = props.membersState.get();\n  function computeEvents(\n    members: PersonData[],\n    inHouseExposureEvents: InHouseExposureEvent[]\n  ) {\n    return computeHouseHoldQuarantinePeriod(members, inHouseExposureEvents).map(\n      (result: CalculationResult) => {\n        return {\n          classNames: [\"TODO\"],\n          title: result.person.name,\n          start: parseISO(\"1970-01-01\"),\n          end: result.endDate,\n          color: colors[result.person.id - (1 % colors.length)],\n          textColor: \"#000000\"\n        };\n      }\n    );\n  }\n\n  return (\n    <div className={\"p-3\"}>\n      <div>\n        <FullCalendar\n          plugins={[dayGridPlugin, interactionPlugin]}\n          initialView=\"dayGridMonth\"\n          events={computeEvents(members, props.inHouseExposureEvents)}\n          dateClick={(info: DateClickArg) => {}}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GridView from \"./GridView\";\nimport { Link } from \"react-router-dom\";\nimport { InHouseExposureEvent, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n}\n\nexport default function Home(props: Props) {\n  const members = props.membersState.get();\n\n  function renderTitle() {\n    if (members.length) {\n      return (\n        <>\n          <h1>Here is our recommendation for your household</h1>\n          <p className=\"lead text-muted\">\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n          <p>\n            <Link to=\"/household\" className=\"btn btn-primary my-2\">\n              Edit Answers\n            </Link>\n          </p>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h1>Get quarantine and isolation guidance for your household</h1>\n          <p className=\"lead text-muted\">\n            We'll let you know who should quarantine or isolate, and for how\n            long.\n          </p>\n          <p>\n            <Link to=\"/household\" className=\"btn btn-primary my-2\">\n              Get Started\n            </Link>\n          </p>\n        </>\n      );\n    }\n  }\n\n  return (\n    <>\n      <header>\n        <div className=\"navbar\">\n          <div className=\"container d-flex justify-content-between\">\n            <div className=\"navbar-brand d-flex align-items-center\">\n              COVID Quarantine Calculator (Work in Progress)\n            </div>\n            <div>English</div>\n          </div>\n        </div>\n      </header>\n      <main className={\"main\"} role={\"main\"}>\n        <section className={\"jumbotron\"}>\n          <div className=\"container\">{renderTitle()}</div>\n        </section>\n      </main>\n      {members.length ? (\n        <GridView\n          membersState={props.membersState}\n          inHouseExposureEvents={props.inHouseExposureEventsState.get()}\n        />\n      ) : null}\n      <footer className={\"mb-3\"}>\n        <div className={\"container d-flex justify-content-between\"}>\n          <a href={\"https://www.codeforpdx.org/\"}>Code For PDX</a>\n          <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/isolation.html\">\n            CDC guidelines on isolation\n          </a>\n          <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n            CDC guidelines on quarantine\n          </a>\n        </div>\n      </footer>\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useState } from \"@hookstate/core\";\nimport Household from \"./Household\";\nimport Home from \"./Home\";\nimport { CovidEventName, InHouseExposureEvent, PersonData } from \"./types\";\nimport { compact } from \"lodash/fp\";\nimport { getRandomInt, isContagious } from \"./util\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  const height = useState(window.innerHeight);\n  const updateHeight = () => {\n    height.set(window.innerHeight);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateHeight);\n    return () => window.removeEventListener(\"resize\", updateHeight);\n  }, []);\n  const members = useState([] as PersonData[]);\n  const inHouseExposureEvents = useState<InHouseExposureEvent[]>([]);\n  const id = useState(members.length + 1);\n  const editingHouseholdState = useState(true);\n  const editingPersonState = useState<number | undefined>(undefined);\n\n  function addNewPerson() {\n    const currentId = id.get();\n    const newPerson = {\n      id: currentId,\n      name: `Person ${getRandomInt(1000)}`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      noSymptomsFor24Hours: true,\n      isNewPerson: true,\n      editing: true\n    };\n    id.set(id => id + 1);\n    members.set(members => [...members, newPerson]);\n    editingPersonState.set(currentId);\n    const newExposureEvents = members.get().map((person: PersonData) => {\n      if (isContagious(person)) {\n        return {\n          contagiousPerson: person.id,\n          quarantinedPerson: newPerson.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    inHouseExposureEvents.merge(compact(newExposureEvents));\n  }\n\n  return (\n    <Router basename={`${process.env.PUBLIC_URL}`}>\n      <Switch>\n        <Route path=\"/household\">\n          <Household\n            addNewPerson={addNewPerson}\n            editingHouseholdState={editingHouseholdState}\n            editingPersonState={editingPersonState}\n            height={height}\n            inHouseExposureEventsState={inHouseExposureEvents}\n            membersState={members}\n          />\n        </Route>\n        <Route path=\"/\">\n          <Home\n            membersState={members}\n            inHouseExposureEventsState={inHouseExposureEvents}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}