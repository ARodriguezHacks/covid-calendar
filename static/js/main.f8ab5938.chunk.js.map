{"version":3,"sources":["types.ts","calculator.ts","GridView.tsx","DateQuestion.tsx","MultipleChoiceQuestion.tsx","InHouseExposureQuestion.tsx","InHouseExposureQuestions.tsx","util.tsx","Person.tsx","Household.tsx","App.tsx","index.tsx"],"names":["CovidEventName","colors","colorNames","computeHouseHoldQuarantinePeriod","household","inHouseExposureEvents","flow","map","person","covidPositiveEvents","covidEvents","SymptomsStart","PositiveTest","illnessOnset","compact","date","parse","Date","thru","dates","min","tenDaysAfterOnset","addDays","symptomsEnd","noSymptomsFor24Hours","undefined","isolationEndDate","max","computeIsolationPeriod","isValid","startDate","endDate","infected","partition","c","quarantinedCalculations","calculation","relevantInHouseExposureEvents","filter","event","quarantinedPerson","id","exposed","firstExposureDate","find","contagiousPerson","lastExposureDate","ongoing","outHouseExposureDateString","LastCloseContact","outHouseExposureDate","earliestExposureDate","latestExposureDate","fourteenDaysFromLastExposure","GridView","props","members","membersState","get","eventSetter","eventSetterState","className","plugins","dayGridPlugin","interactionPlugin","initialView","events","result","classNames","title","name","start","end","color","length","textColor","computeEvents","dateClick","info","format","DateQuestion","twoDigitYearPattern","RegExp","dayMonthPattern","htmlFor","questionFieldName","role","missing","invalid","value","questionFieldTextState","type","onChange","e","onFocus","onBlur","fixedDate","exec","slice","set","onUnfocus","MultipleChoiceQuestion","checked","questionText","tooltip","aria-hidden","InHouseExposureQuestion","inHouseExposureEvent","inHouseExposureEventState","isExposed","isOngoing","otherPerson","v","index","target","dateMissing","dateInvalid","InHouseExposureQuestions","meaningfulInHouseExposures","relevantInHouseExposureEventsState","eventState","key","getRandomInt","Math","floor","random","isContagious","Boolean","Person","personState","covidEventsState","editing","editingState","inHouseExposureEventsState","selectionsState","useState","Object","values","reduce","selections","datePattern","datesInvalid","d","datesMissing","contagious","onCheckboxChange","fieldName","nextContagious","setContagiousState","buildCovidEventQuestion","handleChange","none","newExposureEvents","otherContagious","merge","href","symptomsStart","buildSymptomsQuestion","onClick","includes","isNewPerson","entries","quarantinedPersonName","member","contagiousPersonName","Household","addNewPerson","App","initialMembers","currentId","newPerson","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f8ab5938.chunk.js","sourcesContent":["export interface PersonData {\n  id: number;\n  name: string;\n  covidEvents: CovidEvents;\n  noSymptomsFor24Hours: boolean;\n  isNewPerson: boolean;\n  editing: boolean;\n}\n\nexport enum CovidEventName {\n  LastCloseContact = \"Most Recent Close Contact\",\n  SymptomsStart = \"Illness Onset\",\n  PositiveTest = \"Most Recent Positive Test\"\n}\n\nexport type CovidEvents = {\n  [key in CovidEventName]: string;\n};\n\nexport interface InHouseExposureEvent {\n  contagiousPerson: number;\n  quarantinedPerson: number;\n  exposed: boolean;\n  ongoing: boolean;\n  date: string;\n  dateMissing: boolean;\n  dateInvalid: boolean;\n}\n\nexport interface CalculationResult {\n  person: PersonData;\n  startDate: Date;\n  endDate: Date;\n  infected?: boolean;\n}\n\nexport const colors = [\n  \"#91DADF\", // bg-light-green\",\n  \"#96CCFF\", // bg-light-blue\n  \"#A463F2\", // bg-light-purple\n  \"#FF6300\" // bg-orange\n];\nexport const colorNames = [\n  \"bg-light-green\",\n  \"bg-light-blue\",\n  \"bg-light-purple\",\n  \"bg-orange\"\n];\n","import {\n  CalculationResult,\n  CovidEventName,\n  InHouseExposureEvent,\n  PersonData\n} from \"./types\";\nimport { addDays, max, min, isValid, parse } from \"date-fns\";\nimport { flow, compact, map, thru, partition, filter } from \"lodash/fp\";\n\nexport function computeHouseHoldQuarantinePeriod(\n  household: PersonData[],\n  inHouseExposureEvents: InHouseExposureEvent[]\n): CalculationResult[] {\n  const [infected, quarantined] = flow(\n    map((person: PersonData) => {\n      const [illnessOnset, isolationEndDate] = computeIsolationPeriod(person);\n      if (isValid(isolationEndDate)) {\n        return {\n          person: person,\n          startDate: illnessOnset,\n          endDate: isolationEndDate,\n          infected: true\n        };\n      } else {\n        return {\n          person: person,\n          startDate: new Date(),\n          endDate: new Date(),\n          infected: false\n        };\n      }\n    }),\n    partition(c => c.infected)\n  )(household);\n  const quarantinedCalculations: CalculationResult[] = quarantined.map(\n    calculation => {\n      const person = calculation.person;\n      const relevantInHouseExposureEvents = filter(\n        (event: InHouseExposureEvent) =>\n          event.quarantinedPerson === person.id && event.exposed\n      )(inHouseExposureEvents);\n      const firstExposureDate = map((event: InHouseExposureEvent) => {\n        return infected.find(\n          calculation => calculation.person.id === event.contagiousPerson\n        )?.startDate;\n      });\n      const lastExposureDate = map((event: InHouseExposureEvent) => {\n        if (event.ongoing) {\n          return infected.find(\n            calculation => calculation.person.id === event.contagiousPerson\n          )?.endDate;\n        } else {\n          return parse(event.date, \"M/dd/yyyy\", new Date());\n        }\n      });\n      const outHouseExposureDateString =\n        person.covidEvents[CovidEventName.LastCloseContact];\n      const outHouseExposureDate = outHouseExposureDateString\n        ? parse(outHouseExposureDateString, \"M/dd/yyyy\", new Date())\n        : undefined;\n      const earliestExposureDate = min(\n        compact([\n          ...firstExposureDate(relevantInHouseExposureEvents),\n          outHouseExposureDate\n        ])\n      );\n      const latestExposureDate = max(\n        compact([\n          ...lastExposureDate(relevantInHouseExposureEvents),\n          outHouseExposureDate\n        ])\n      );\n      const fourteenDaysFromLastExposure = addDays(latestExposureDate, 14);\n      return {\n        person: person,\n        startDate: earliestExposureDate,\n        endDate: fourteenDaysFromLastExposure,\n        infected: false\n      };\n    }\n  );\n  return [...infected, ...quarantinedCalculations];\n}\n\nexport function computeIsolationPeriod(person: PersonData): [Date, Date] {\n  const covidPositiveEvents = [\n    person.covidEvents[CovidEventName.SymptomsStart],\n    person.covidEvents[CovidEventName.PositiveTest]\n  ];\n  const illnessOnset = flow(\n    compact,\n    map((date: string) => parse(date, \"M/dd/yyyy\", new Date())),\n    thru((dates: Date[]) => min(dates))\n  )(covidPositiveEvents);\n  const tenDaysAfterOnset = illnessOnset && addDays(illnessOnset, 10);\n  const symptomsEnd = person.noSymptomsFor24Hours ? undefined : new Date(); // TODO: Rethink\n  const isolationEndDate = flow(\n    compact,\n    thru((dates: Date[]) => max(dates))\n  )([tenDaysAfterOnset, symptomsEnd]);\n  return [illnessOnset, isolationEndDate];\n}\n","import React from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { DateClickArg } from \"@fullcalendar/interaction\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { colors } from \"./types\";\n\nimport { PersonData, CalculationResult, InHouseExposureEvent } from \"./types\";\nimport { format } from \"date-fns\";\nimport { State } from \"@hookstate/core/dist\";\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEvents: InHouseExposureEvent[];\n  editing: number | undefined;\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function GridView(props: Props) {\n  const members = props.membersState.get();\n  const eventSetter = props.eventSetterState.get();\n  function computeEvents(\n    members: PersonData[],\n    inHouseExposureEvents: InHouseExposureEvent[]\n  ) {\n    return computeHouseHoldQuarantinePeriod(members, inHouseExposureEvents).map(\n      (result: CalculationResult) => {\n        return {\n          classNames: [\"TODO\"],\n          title: result.person.name,\n          start: result.startDate,\n          end: result.endDate,\n          color: colors[result.person.id - (1 % colors.length)],\n          textColor: \"#000000\"\n        };\n      }\n    );\n  }\n\n  return (\n    <div className={\"p-3\"}>\n      {\n        <div className={eventSetter ? \"ba bw2 b--light-yellow\" : \"\"}>\n          <FullCalendar\n            plugins={[dayGridPlugin, interactionPlugin]}\n            initialView=\"dayGridMonth\"\n            events={computeEvents(members, props.inHouseExposureEvents)}\n            dateClick={(info: DateClickArg) => {\n              if (eventSetter) {\n                eventSetter(format(info.date, \"MM/dd/yyyy\"));\n              }\n            }}\n          />\n        </div>\n      }\n    </div>\n  );\n}\n","import React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  id: number;\n  questionFieldTextState: State<string>;\n  questionFieldName: string;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  onFocus: () => void;\n  onUnfocus: () => void;\n  missing: boolean;\n  invalid: boolean;\n}\n\nexport default function DateQuestion(props: Props) {\n  const twoDigitYearPattern = new RegExp(\n    \"^([0-9][0-9]?/[0-9][0-9]?/)([0-9][0-9])$\"\n  );\n  const dayMonthPattern = new RegExp(\"^[0-9][0-9]?/[0-9][0-9]?$\");\n\n  const handleTextChange = (e: React.BaseSyntheticEvent) => {\n    props.onChange(e);\n  };\n\n  const handleUnfocus = () => {\n    let fixedDate = props.questionFieldTextState.get();\n    const twoDigitYearMatch = twoDigitYearPattern.exec(fixedDate);\n    if (twoDigitYearMatch) {\n      fixedDate = fixedDate.slice(0, -2) + \"20\" + fixedDate.slice(-2);\n    }\n    const dayMonthMatch = dayMonthPattern.exec(fixedDate);\n    if (dayMonthMatch) {\n      fixedDate = fixedDate + \"/2020\";\n    }\n    props.questionFieldTextState.set(fixedDate);\n    props.onUnfocus();\n  };\n  return (\n    <div className=\"\">\n      <label htmlFor={`${props.id}-${props.questionFieldName}`}>\n        Date <span className=\"f6 fw3\">mm/dd/yyyy</span>\n        <div role=\"alert\">\n          {props.missing ? (\n            <span className=\"f5 fw5 red\">required</span>\n          ) : props.invalid ? (\n            <span className=\"f5 fw5 red\">mm/dd/yyyy format required</span>\n          ) : null}\n        </div>\n      </label>\n      <input\n        className=\"form-control\"\n        value={props.questionFieldTextState.get()}\n        name={props.questionFieldName}\n        id={`${props.id}-${props.questionFieldName}`}\n        type=\"text\"\n        onChange={handleTextChange}\n        onFocus={props.onFocus}\n        onBlur={handleUnfocus}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { parse, format } from \"date-fns\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel\n} from \"@reach/disclosure\";\n\ninterface Props {\n  id: number;\n  questionText: string;\n  checked: boolean;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  tooltip?: JSX.Element;\n}\n\nexport default function MultipleChoiceQuestion(props: Props) {\n  return (\n    <div className=\"custom-control custom-checkbox mb-3\">\n      <input\n        className=\"custom-control-input\"\n        checked={props.checked}\n        id={`checkbox-${props.id}-${props.questionText}`}\n        type=\"checkbox\"\n        onChange={props.onChange}\n      />\n      <Disclosure>\n        <label\n          className=\"custom-control-label\"\n          htmlFor={`checkbox-${props.id}-${props.questionText}`}\n        >\n          {props.questionText}\n          {props.tooltip && (\n            <DisclosureButton>\n              <i\n                aria-hidden=\"true\"\n                className=\"px-1 fas fa-question-circle link hover-dark-blue gray\"\n              ></i>\n            </DisclosureButton>\n          )}\n        </label>\n        {props.tooltip && (\n          <DisclosurePanel>\n            <div className=\"f5 gray\">{props.tooltip}</div>\n          </DisclosurePanel>\n        )}\n      </Disclosure>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { InHouseExposureEvent, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport DateQuestion from \"./DateQuestion\";\n\ninterface Props {\n  id: number;\n  index: number;\n  otherPerson: PersonData;\n  inHouseExposureEventState: State<InHouseExposureEvent>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function InHouseExposureQuestion(props: Props) {\n  const inHouseExposureEvent = props.inHouseExposureEventState.get();\n  const isExposed = inHouseExposureEvent.exposed;\n  const isOngoing = inHouseExposureEvent.ongoing;\n  return (\n    <div className=\"mb-3\">\n      <MultipleChoiceQuestion\n        id={props.id}\n        questionText={`I was exposed to ${props.otherPerson.name}`}\n        checked={isExposed}\n        onChange={() => props.inHouseExposureEventState.exposed.set(v => !v)}\n      />\n      {isExposed && (\n        <MultipleChoiceQuestion\n          id={props.id}\n          questionText={`My exposure to ${props.otherPerson.name} is ongoing`}\n          checked={isOngoing}\n          onChange={() => props.inHouseExposureEventState.ongoing.set(v => !v)}\n        />\n      )}\n      {isExposed && !isOngoing && (\n        <DateQuestion\n          id={props.id}\n          questionFieldTextState={props.inHouseExposureEventState.date}\n          questionFieldName={`crossExposure-${props.index}`}\n          onChange={(e: React.BaseSyntheticEvent) =>\n            props.inHouseExposureEventState.date.set(e.target.value)\n          }\n          onFocus={() =>\n            props.eventSetterState.set(() => (date: string) => {\n              props.inHouseExposureEventState.date.set(date);\n            })\n          }\n          onUnfocus={() => props.eventSetterState.set(undefined)}\n          missing={inHouseExposureEvent.dateMissing}\n          invalid={inHouseExposureEvent.dateInvalid}\n        />\n      )}\n    </div>\n  );\n}\n","import { InHouseExposureEvent, PersonData } from \"./types\";\nimport InHouseExposureQuestion from \"./InHouseExposureQuestion\";\nimport React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  id: number;\n  meaningfulInHouseExposures: PersonData[];\n  relevantInHouseExposureEventsState: State<InHouseExposureEvent>[];\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function InHouseExposureQuestions(props: Props) {\n  return (\n    <>\n      {props.meaningfulInHouseExposures.map((otherPerson, index) => {\n        const inHouseExposureEventState = props.relevantInHouseExposureEventsState.find(\n          (eventState: State<InHouseExposureEvent>) => {\n            const event = eventState.get();\n            return (\n              event.quarantinedPerson === otherPerson.id ||\n              event.contagiousPerson === otherPerson.id\n            );\n          }\n        );\n        if (inHouseExposureEventState) {\n          return (\n            <>\n              <InHouseExposureQuestion\n                key={props.id + \"-\" + index}\n                id={props.id}\n                index={index}\n                otherPerson={otherPerson}\n                inHouseExposureEventState={inHouseExposureEventState}\n                eventSetterState={props.eventSetterState}\n              />\n              <hr />\n            </>\n          );\n        } else {\n          return <></>;\n        }\n      })}\n    </>\n  );\n}\n","import { flow, remove, concat } from \"lodash/fp\";\nimport { CovidEventName, PersonData } from \"./types\";\n\nexport function replace<T>(array: Array<T>, old: T, updated: T): Array<T> {\n  return flow(\n    remove(e => e === old),\n    concat([updated])\n  )(array);\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function isContagious(person: PersonData) {\n  return Boolean(\n    person.covidEvents[CovidEventName.PositiveTest] ||\n      person.covidEvents[CovidEventName.SymptomsStart]\n  );\n}\n","import React from \"react\";\nimport { useState, none, State } from \"@hookstate/core\";\n\nimport {\n  CovidEventName,\n  InHouseExposureEvent,\n  PersonData,\n  colorNames\n} from \"./types\";\nimport DateQuestion from \"./DateQuestion\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport InHouseExposureQuestions from \"./InHouseExposureQuestions\";\nimport { compact } from \"lodash/fp\";\nimport { isContagious } from \"./util\";\n\ninterface Props {\n  personState: State<PersonData>;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingState: State<number | undefined>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function Person(props: Props) {\n  const person = props.personState.get();\n  const members = props.membersState.get();\n  const covidEventsState = props.personState.covidEvents;\n  const editing = props.editingState.get();\n  const relevantInHouseExposureEventsState: State<\n    InHouseExposureEvent\n  >[] = props.inHouseExposureEventsState.filter(\n    (eventState: State<InHouseExposureEvent>) => {\n      const event: InHouseExposureEvent = eventState.get();\n      return (\n        event.contagiousPerson === person.id ||\n        event.quarantinedPerson === person.id\n      );\n    }\n  );\n  const relevantInHouseExposureEvents = relevantInHouseExposureEventsState.map(\n    e => e.get()\n  );\n  const selectionsState: any = useState(\n    Object.values(CovidEventName).reduce(\n      (selections: any, key: CovidEventName) => (\n        (selections[key] = covidEventsState[key].get() !== \"\"), selections\n      ),\n      {}\n    )\n  );\n  const datePattern = new RegExp(\n    \"^[0-9][0-9]?/[0-9][0-9]?/[0-9][0-9][0-9][0-9]$\"\n  );\n  const datesInvalid: any = useState(\n    Object.values(CovidEventName).reduce((d: any, key: CovidEventName) => {\n      return (d[key] = false), d;\n    }, {})\n  );\n\n  const datesMissing: any = useState(\n    Object.values(CovidEventName).reduce((d: any, key: CovidEventName) => {\n      return (d[key] = false), d;\n    }, {})\n  );\n\n  const selections = selectionsState.get();\n  const contagious =\n    selections[CovidEventName.PositiveTest] ||\n    selections[CovidEventName.SymptomsStart];\n\n  function onCheckboxChange(fieldName: CovidEventName) {\n    return (e: React.BaseSyntheticEvent) => {\n      const checked = e.target.checked;\n      selectionsState[fieldName].set(checked);\n      if (fieldName === CovidEventName.PositiveTest) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.SymptomsStart]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      } else if (fieldName === CovidEventName.SymptomsStart) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.PositiveTest]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      }\n      if (!checked) {\n        covidEventsState[fieldName].set(\"\");\n      }\n    };\n  }\n\n  function buildCovidEventQuestion(\n    fieldName: CovidEventName,\n    questionText: string,\n    tooltip?: JSX.Element\n  ) {\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={questionText}\n          checked={selectionsState[fieldName].get()}\n          onChange={onCheckboxChange(fieldName)}\n          tooltip={tooltip}\n        />\n        {selectionsState[fieldName].get() && (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={covidEventsState[fieldName]}\n            questionFieldName={fieldName}\n            onChange={handleChange}\n            onFocus={() =>\n              props.eventSetterState.set(() => (date: string) =>\n                covidEventsState[fieldName].set(date)\n              )\n            }\n            onUnfocus={() => props.eventSetterState.set(undefined)}\n            missing={datesMissing[fieldName].get()}\n            invalid={datesInvalid[fieldName].get()}\n          />\n        )}\n      </>\n    );\n  }\n\n  function buildSymptomsQuestion() {\n    const symptomsStartState = selectionsState[CovidEventName.SymptomsStart];\n    const symptomsStart = symptomsStartState.get();\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={\"I have shown positive symptoms\"}\n          checked={symptomsStart}\n          onChange={onCheckboxChange(CovidEventName.SymptomsStart)}\n          tooltip={\n            <span>\n              Consult the{\" \"}\n              <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html\">\n                CDC web site\n              </a>{\" \"}\n              for a common list of symptoms of Covid{\" \"}\n            </span>\n          }\n        />\n        {symptomsStart ? (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={\n              covidEventsState[CovidEventName.SymptomsStart]\n            }\n            questionFieldName={CovidEventName.SymptomsStart}\n            onChange={handleChange}\n            onFocus={() =>\n              props.eventSetterState.set(() => (date: string) =>\n                covidEventsState[CovidEventName.SymptomsStart].set(date)\n              )\n            }\n            onUnfocus={() => props.eventSetterState.set(undefined)}\n            missing={datesMissing[CovidEventName.SymptomsStart].get()}\n            invalid={datesInvalid[CovidEventName.SymptomsStart].get()}\n          />\n        ) : null}\n        <div className={\"mb-3\"} />\n        {symptomsStart ? (\n          <MultipleChoiceQuestion\n            id={person.id}\n            questionText={\"My symptoms have been improved for 24 hours.\"}\n            checked={props.personState.noSymptomsFor24Hours.get()}\n            onChange={() => props.personState.noSymptomsFor24Hours.set(c => !c)}\n            tooltip={\n              <span>\n                Improved symptoms are a requirement for you to end isolation. If\n                your symptoms improve AND you have had no fever for 24 hours\n                without the use of medicine, check this box.{\" \"}\n                <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-test-positive-covid-19\">\n                  Link.\n                </a>{\" \"}\n              </span>\n            }\n          />\n        ) : null}\n      </>\n    );\n  }\n\n  const handleChange = (e: React.BaseSyntheticEvent) => {\n    const name: CovidEventName = e.target.name;\n    const value: string = e.target.value;\n    covidEventsState[name].set(value);\n  };\n  const handleSubmit = () => {\n    Object.values(CovidEventName).map((key: CovidEventName) => {\n      datesMissing[key].set(\n        selectionsState.get()[key] && covidEventsState[key].get() === \"\"\n      );\n      datesInvalid[key].set(\n        selectionsState.get()[key] &&\n          covidEventsState[key].get() !== \"\" &&\n          !Boolean(datePattern.exec(covidEventsState[key].get()))\n      );\n    });\n    props.inHouseExposureEventsState.map((e: State<InHouseExposureEvent>) => {\n      e.dateMissing.set(!e.ongoing.get() && e.date.get() === \"\");\n      e.dateInvalid.set(\n        !e.ongoing.get() &&\n          e.date.get() !== \"\" &&\n          !Boolean(datePattern.exec(e.date.get()))\n      );\n    });\n    if (\n      !Object.values(datesMissing.get()).includes(true) &&\n      !Object.values(datesInvalid.get()).includes(true) &&\n      !props.inHouseExposureEventsState\n        .map((e: State<InHouseExposureEvent>) => {\n          return e.dateMissing.get() || e.dateInvalid.get();\n        })\n        .includes(true)\n    ) {\n      props.editingState.set(undefined);\n    }\n  };\n\n  function setContagiousState(contagious: boolean) {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    const newExposureEvents = members.map((otherPerson: PersonData) => {\n      const otherContagious = isContagious(otherPerson);\n      if (person !== otherPerson && contagious !== otherContagious) {\n        return {\n          contagiousPerson: contagious ? person.id : otherPerson.id,\n          quarantinedPerson: contagious ? otherPerson.id : person.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    props.inHouseExposureEventsState.merge(compact(newExposureEvents));\n  }\n\n  const meaningfulInHouseExposures = members.filter(\n    (otherPerson: PersonData) =>\n      person !== otherPerson && contagious !== isContagious(otherPerson)\n  );\n\n  function removeFromMembers() {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    props.personState.set(none);\n  }\n\n  return (\n    <div className={\"card shadow-sm mb-2\"}>\n      {props.editingState.get() === person.id ? (\n        <div className=\"p-2\">\n          <div className=\"mb-3\">\n            <label htmlFor={`${person.id}-name`}>Name</label>\n            <input\n              className=\"form-control\"\n              value={person.name}\n              name=\"name\"\n              id={`${person.id}-name`}\n              type=\"text\"\n              onChange={(e: React.BaseSyntheticEvent) =>\n                props.personState.name.set(e.target.value)\n              }\n            />\n          </div>\n          <div className=\"mb-3\">\n            {buildCovidEventQuestion(\n              CovidEventName.LastCloseContact,\n              \"I have had close contact to someone presumed covid positive (outside the household)\",\n              <div>\n                Someone is presumed covid positive if they show symptoms or have\n                tested positive for the virus. Close contact means spending at\n                least 15 minutes or more at one time within 6 feet of someone,\n                with or without a face covering. If you have been exposed to\n                someone presumed covid positive, you are at a higher risk of\n                getting sick and spreading the disease to others, and should\n                quarantine for 14 days following the date of exposure.{\" \"}\n                <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-have-been-around-someone-covid-19\">\n                  Link.\n                </a>\n              </div>\n            )}\n            <hr />\n          </div>\n          <div className=\"mb-3\">\n            {buildCovidEventQuestion(\n              CovidEventName.PositiveTest,\n              \"I have received a positive test result\"\n            )}\n            <hr />\n          </div>\n          <div className=\"mb-3\">\n            {buildSymptomsQuestion()}\n            <hr />\n          </div>\n          <InHouseExposureQuestions\n            id={person.id}\n            meaningfulInHouseExposures={meaningfulInHouseExposures}\n            relevantInHouseExposureEventsState={\n              relevantInHouseExposureEventsState\n            }\n            eventSetterState={props.eventSetterState}\n          />\n          <div className={\"d-flex justify-content-between align-items-center\"}>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => {\n                removeFromMembers();\n                props.editingState.set(undefined);\n              }}\n            >\n              <span className=\"visually-hidden\">Remove</span>\n              Remove\n              <i\n                aria-hidden=\"true\"\n                className=\"pl2 fas fa-times-circle white\"\n              ></i>\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleSubmit}>\n              {person.isNewPerson ? \"Submit\" : \"Update\"}\n            </button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"card-body\">\n          <h4 className=\"d-flex justify-content-between align-items-center mb-3\">\n            <span\n              className={\n                \"pv1 ph2 br3 \" + colorNames[person.id - (1 % colorNames.length)]\n              }\n            >\n              {person.name + \" \"}\n            </span>\n            <span>\n              {!editing && (\n                <button onClick={() => props.editingState.set(person.id)}>\n                  <span className=\"visually-hidden\">Edit Person</span>\n                  <span aria-hidden=\"true\" className=\"f5 fas fa-pen\"></span>\n                </button>\n              )}\n            </span>\n          </h4>\n          <div className=\"\">\n            {Object.entries(person.covidEvents).map(\n              ([name, date]: [string, string]) => {\n                if (date !== \"\") {\n                  return (\n                    <div className=\"f5\">\n                      {name}\n                      {\": \"} {date}\n                    </div>\n                  );\n                }\n              }\n            )}\n            {Object.values(relevantInHouseExposureEvents).map(\n              (event: InHouseExposureEvent) => {\n                if (event.exposed) {\n                  const quarantinedPersonName = members.find(\n                    member => member.id === event.quarantinedPerson\n                  )?.name;\n                  const contagiousPersonName = members.find(\n                    member => member.id === event.contagiousPerson\n                  )?.name;\n                  if (event.ongoing) {\n                    return (\n                      <div className=\"f5\">\n                        {quarantinedPersonName} has an ongoing exposure to{\" \"}\n                        {contagiousPersonName}{\" \"}\n                      </div>\n                    );\n                  } else {\n                    return (\n                      <div className=\"f5\">\n                        {quarantinedPersonName} exposed to{\" \"}\n                        {contagiousPersonName} at {event.date}\n                      </div>\n                    );\n                  }\n                }\n              }\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { CalculationResult, InHouseExposureEvent, PersonData } from \"./types\";\nimport Person from \"./Person\";\nimport { State } from \"@hookstate/core\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { format, isValid } from \"date-fns\";\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingState: State<number | undefined>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function Household(props: Props) {\n  const editing = props.editingState.get();\n  const members = props.membersState.get();\n  const inHouseExposureEvents = props.inHouseExposureEventsState.get();\n  return (\n    <>\n      <div className=\"p-3\">\n        {!editing && (\n          <button className=\"btn btn-primary mb-2\" onClick={props.addNewPerson}>\n            <i className=\"fa fa-user-plus\" aria-hidden=\"true\"></i> Add Person\n          </button>\n        )}\n        {props.membersState.map((personState: State<PersonData>) => {\n          const person = personState.get();\n          const id = person.id;\n          return (\n            <Person\n              key={id}\n              personState={personState}\n              membersState={props.membersState}\n              inHouseExposureEventsState={props.inHouseExposureEventsState}\n              editingState={props.editingState}\n              eventSetterState={props.eventSetterState}\n            />\n          );\n        })}\n        <hr />\n        <div className={\"p-1\"}>\n          <h4>Guidance</h4>\n          {computeHouseHoldQuarantinePeriod(members, inHouseExposureEvents).map(\n            (result: CalculationResult) => {\n              if (isValid(result.startDate) && isValid(result.endDate)) {\n                return (\n                  <div className=\"p32\">\n                    {result.person.name} {\" should quarantine from \"}{\" \"}\n                    {format(result.startDate, \"MM/dd/yyyy\")}\n                    {\" until \"} {format(result.endDate, \"MM/dd/yyyy\")}\n                    {\".\"}\n                  </div>\n                );\n              }\n            }\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { useState } from \"@hookstate/core\";\nimport GridView from \"./GridView\";\nimport Household from \"./Household\";\nimport { CovidEventName, InHouseExposureEvent, PersonData } from \"./types\";\nimport { compact } from \"lodash/fp\";\nimport { getRandomInt, isContagious } from \"./util\";\n\nexport default function App() {\n  const initialMembers: PersonData[] = [\n    {\n      id: 1,\n      name: `Alice`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"8/25/2020\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      noSymptomsFor24Hours: true,\n      isNewPerson: false,\n      editing: false\n    },\n    {\n      id: 2,\n      name: `Bob`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"8/28/2020\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      noSymptomsFor24Hours: true,\n      isNewPerson: false,\n      editing: false\n    }\n  ];\n  const members = useState(initialMembers);\n  const inHouseExposureEvents = useState<InHouseExposureEvent[]>([]);\n  const editing = useState<number | undefined>(undefined);\n  const id = useState(members.length + 1);\n  const eventSetterState = useState<((date: string) => void) | undefined>(\n    undefined\n  );\n\n  function addNewPerson() {\n    const currentId = id.get();\n    const newPerson = {\n      id: currentId,\n      name: `Person ${getRandomInt(1000)}`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      noSymptomsFor24Hours: true,\n      isNewPerson: true,\n      editing: true\n    };\n    id.set(id => id + 1);\n    members.set(members => [...members, newPerson]);\n    editing.set(currentId);\n    const newExposureEvents = members.get().map((person: PersonData) => {\n      if (isContagious(person)) {\n        return {\n          contagiousPerson: person.id,\n          quarantinedPerson: newPerson.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    inHouseExposureEvents.merge(compact(newExposureEvents));\n  }\n\n  return (\n    <>\n      <div className=\"navbar navbar-dark bg-dark shadow-sm\">\n        <div className=\"container d-flex justify-content-between\">\n          <a href=\"#\" className=\"navbar-brand d-flex align-items-center\">\n            <strong>Covid Quarantine Calculator</strong>\n          </a>\n          <div className=\"white f7 fw5\">\n            This page is a work in progress. Its instructions may be incorrect.\n            Consult{\" \"}\n            <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-have-been-around-someone-covid-19\">\n              the MultCo website\n            </a>{\" \"}\n            or the latest CDC guildlines for accurate Covid information.{\" \"}\n          </div>\n        </div>\n      </div>\n      <main className={\"row\"}>\n        <div className={\"col-md-5\"}>\n          <Household\n            membersState={members}\n            inHouseExposureEventsState={inHouseExposureEvents}\n            editingState={editing}\n            eventSetterState={eventSetterState}\n            addNewPerson={addNewPerson}\n          />\n        </div>\n        <div className={\"col-md-7\"}>\n          <GridView\n            membersState={members}\n            editing={editing.get()}\n            eventSetterState={eventSetterState}\n            inHouseExposureEvents={inHouseExposureEvents.get()}\n          />\n        </div>\n      </main>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}