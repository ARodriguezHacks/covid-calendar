{"version":3,"sources":["Home.tsx","types.ts","DateQuestion.tsx","MultipleChoiceQuestion.tsx","InHouseExposureQuestion.tsx","InHouseExposureQuestions.tsx","util.tsx","Person.tsx","calculator.ts","Household.tsx","Recommendation.tsx","App.tsx","index.tsx"],"names":["Home","props","style","position","minHeight","className","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","textAlign","letterSpacing","textTransform","color","role","paddingBottom","background","display","flexDirection","alignItems","padding","borderRadius","width","height","left","top","flex","order","flexGrow","margin","to","justifyContent","paddingTop","maxWidth","marginTop","marginBottom","src","process","bottom","href","opacity","border","transform","CovidEventName","DateQuestion","questionFieldText","questionFieldTextState","get","parsedDate","parse","Date","questionFieldDate","isValid","htmlFor","id","questionFieldName","promptText","selected","onChange","date","validDate","set","format","name","MultipleChoiceQuestion","checked","questionText","type","disabled","tooltip","flexShrink","marginLeft","InHouseExposureQuestion","inHouseExposureEvent","inHouseExposureEventState","isExposed","exposed","isOngoing","ongoing","person","otherPerson","v","ongoingState","newOngoing","index","InHouseExposureQuestions","meaningfulInHouseExposures","map","relevantInHouseExposureEventsState","find","eventState","event","quarantinedPerson","contagiousPerson","key","isContagious","Boolean","covidEvents","PositiveTest","SymptomsStart","Person","personState","members","membersState","covidEventsState","editingHousehold","editingHouseholdState","inHouseExposureEventsState","filter","atLeastOne","gotPositiveTest","contagious","React","useState","recommendationDetailOpenByDefault","recommendationDetailIsOpen","setRecommendationDetailIsOpen","onCheckboxChange","fieldName","e","target","nextContagious","setContagiousState","onSymptomCheckboxChange","symptomsCheckedState","symptomsChecked","anyCheckedBefore","some","val","c","anyCheckedAfter","toggleSymptomStart","buildCovidEventQuestion","datePromptText","reverse","none","newExposureEvents","otherContagious","vaccinated","dateMissing","dateInvalid","merge","compact","renderRecommendationDetail","infected","guidanceDefinition","guidance","endDate","guidanceMessage","getTestedNote","feelingSick","noSymptomsFor24Hours","peopleWithOngoingExposureWithSymptoms","length","names","join","renderGuidanceMessage","value","onClick","stopPropagation","memberState","match","addNewPerson","LastCloseContact","feelingSickState","buildSymptomsQuestion","open","renderGuidance","aria-hidden","computeHouseHoldQuarantinePeriod","household","inHouseExposures","flow","isolationPeriod","covidPositiveEvents","illnessOnset","thru","dates","min","tenDaysAfterOnset","addDays","symptomsEnd","undefined","isolationEndDate","max","computeIsolationPeriod","startDate","partition","infectedGuidances","updatedQuarantinedGuidance","relevantInHouseExposures","normalize","infectedGuidance","infectionSource","normalizedInHouseExposures","exposures","outHouseExposureDateString","outHouseExposureDate","outHouseExposure","addOutsideExposures","earliestExposure","minBy","exposure","latestExposure","maxBy","personWithOngoingExposure","computeQuarantineGuidance","Household","inHouseExposureEvents","guidances","editingPersonRef","useRef","flexWrap","backgroundColor","personGuidance","viewBox","fill","xmlns","cx","cy","r","stroke-width","d","window","scrollTo","renderAction","Recommendation","App","innerHeight","updateHeight","useEffect","addEventListener","removeEventListener","firstPerson","isNewPerson","editing","editingPersonState","basename","path","currentId","newPerson","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.94933795.chunk.js","sourcesContent":["import React from \"react\";\nimport GridView from \"./GridView\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n}\n\nexport default function Home(props: Props) {\n  function renderTitle() {\n    return (\n      <>\n        <h1\n          className=\"mb-4\"\n          style={{\n            fontFamily: \"Helvetica\",\n            fontSize: \"3rem\",\n            fontStyle: \"normal\",\n            textAlign: \"center\",\n            color: \"#1F252F\"\n\n          }}\n        >\n          {\" \"}\n          Quarantine and Isolation Calculator\n        </h1>\n        <p className=\"f3 gray\"> This calculator will help you determine whether to quarantine or isolate, and for how long. Answer a few simple questions and we will match your situation to the best advice according to CDC guidelines.\n\n        </p>\n        <div style={{ position: \"relative\", paddingBottom: \"120px\" }}>\n          <Link className=\"get-started-link\"\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              padding: \"18px 40px\",\n              position: \"absolute\",\n              borderRadius: \"40px\",\n              width: \"295px\",\n              height: \"58px\",\n              left: \"calc(50% - 295px/2)\",\n              top: \"50px\",\n              fontFamily: \"Arial\",\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"14px\",\n              lineHeight: \"160%\",\n              textAlign: \"center\",\n              letterSpacing: \"0.02em\",\n              textTransform: \"uppercase\",\n              color: \"#FFFFFF\",\n              flex: \"none\",\n              order: 0,\n              flexGrow: 0,\n              margin: \"0px 0px\"\n            }}\n            to=\"/recommendation\"\n          >\n            Get Started\n          </Link>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div style={{ position: \"relative\", minHeight: \"100%\" }}>\n      <header>\n        <div className=\"navbar\">\n          <div\n            className=\"container d-flex justify-content-between\"\n            style={{\n              fontFamily: \"Arial\",\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"14px\",\n              lineHeight: \"160%\",\n              textAlign: \"center\",\n              letterSpacing: \"0.02em\",\n              textTransform: \"uppercase\",\n              color: \"#1F252F\"\n            }}\n          >\n            <div className=\"d-flex align-items-center\">COVID CALCULATOR</div>\n            <div>ESPAÑOL</div>\n          </div>\n        </div>\n      </header>\n      <main className={\"main  off-black\"} role={\"main\"} style={{ paddingBottom: \"250px\"}}>\n        <section className={\"jumbotron\"} style={{ background: \"#FFFFFF\" }}>\n          <div className=\"container\">{renderTitle()}</div>\n        </section>\n        <div\n          className=\"container pb-5\"\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            background: \"#F8F8F8\",\n            paddingTop: \"91px\",\n            maxWidth: \"100%\"\n          }}\n        >\n          <div\n            style={{\n              width: \"60%\",\n              textAlign: \"center\"\n            }}\n          >\n            <h2>Quarantine vs. Isolation</h2>\n            <div className=\"py-2\"></div>\n            <div className=\"row\">\n              <div className=\"col-md-6  col-sm-12 f3\">\n                <div\n                  style={{\n                    marginTop: \"80px\",\n                    marginBottom: \"60px\"\n                  }}\n                >\n                  <img src={process.env.PUBLIC_URL + \"/quarantine.svg\"} />\n                </div>\n                People who must <strong className=\"our-blue\">quarantine</strong> are avoiding contact\n                with everyone outside their home.\n              </div>\n              <div className=\"col-md-6 col-sm-12 f3\">\n                <div\n                  style={{\n                    marginTop: \"80px\",\n                    marginBottom: \"60px\"\n                  }}\n                >\n                  <img src={process.env.PUBLIC_URL + \"/isolation.svg\"} />\n                </div>\n                People who must <strong className=\"our-blue\">isolate</strong> should keep away from\n                everyone inside and outside the home.\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      <footer\n        className={\"py-5\"}\n        style={{\n          background: \"#1F252F\",\n          position: \"absolute\",\n          bottom: \"0%\",\n          width: \"100%\",\n          height: \"250px\"\n        }}\n      >\n        <div\n          className={\"container\"}\n          style={{\n            width: \"400px\",\n            textAlign: \"center\"\n          }}\n        >\n          {\" \"}\n          {/* contains images and below-text*/}\n          <div style={{ color: \"#FFFFFF\"}}>\n            Made in partnership between Clackamas County and Code for PDX.\n            Recommendations use CDC guidelines.\n          </div>\n          <div className=\"py-3\"></div>\n          <div\n            style={{\n\n              position: \"relative\",\n              width: \"100%\",\n              height: \"50px\"\n            }}\n          >\n            <span style={{ display: \"inline\" }}>\n              <a href={\"https://www.clackamas.us/publichealth\"}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/logo-clackamas.png\"}\n                  style={{ height: \"100%\" }}\n                />\n              </a>\n            </span>\n            <span\n              style={{\n                display: \"inline\",\n                height: \"1px\",\n                width: \"56.1px\",\n                opacity: 0.5,\n                border: \"1px solid #FFFFFF\",\n                transform: \"rotate(120.37deg)\",\n                position: \"absolute\",\n                left: \"41.45%\",\n                top: \"50.6%\"\n              }}\n            ></span>\n            <span style={{ display: \"inline-block\", width: \"50px\" }}>\n              &nbsp;\n            </span>\n            <span style={{ display: \"inline\" }}>\n              <a href={\"https://www.codeforpdx.org/\"}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/logo-code-for-pdx.png\"}\n                  style={{ height: \"100%\" }}\n                />\n              </a>\n            </span>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","export interface PersonData {\n  id: number;\n  name: string;\n  covidEvents: CovidEvents;\n  noSymptomsFor24Hours: boolean;\n  symptomsChecked: boolean[];\n  feelingSick: boolean;\n  vaccinated: boolean;\n  isNewPerson: boolean;\n  editing: boolean;\n}\n\nexport enum CovidEventName {\n  LastCloseContact = \"Most Recent Close Contact\",\n  SymptomsStart = \"Illness Onset\",\n  PositiveTest = \"Most Recent Positive Test\",\n}\n\nexport type CovidEvents = {\n  [key in CovidEventName]: string;\n};\n\nexport interface InHouseExposure {\n  contagiousPerson: number;\n  quarantinedPerson: number;\n  exposed: boolean;\n  ongoing: boolean;\n  date: string;\n}\n\nexport interface Exposure {\n  startDate: Date;\n  endDate: Date;\n  infectionSource?: PersonData;\n}\n\nexport interface Guidance {\n  person: PersonData;\n  infected: boolean;\n  startDate?: Date;\n  endDate?: Date;\n  infectionSource?: PersonData;\n  peopleWithOngoingExposureWithSymptoms?: string[];\n}\n\nexport const colors = [\n  \"#b35806\",\n  \"#e08214\",\n  \"#fdb863\",\n  \"#fee0b6\",\n  \"#d8daeb\",\n  \"#b2abd2\",\n  \"#8073ac\",\n  \"#542788\"\n];\n","import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { State } from \"@hookstate/core\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { parse, format, isValid } from \"date-fns\";\ninterface Props {\n  id: number;\n  promptText: string;\n  questionFieldTextState: State<string>;\n  questionFieldName: string;\n}\n\nexport default function DateQuestion(props: Props) {\n  const questionFieldText = props.questionFieldTextState.get();\n  const parsedDate = parse(questionFieldText, \"M/dd/yyyy\", new Date());\n  const questionFieldDate = isValid(parsedDate) ? parsedDate : new Date();\n\n  return (\n    <div className=\"subquestion questionnaire-text\">\n      <label htmlFor={`${props.id}-${props.questionFieldName}`}>\n        {props.promptText} <span className=\"f6 fw3\">mm/dd/yyyy</span>\n      </label>\n      <DatePicker\n        className=\"form-control\"\n        selected={questionFieldDate}\n        onChange={(date: Date) => {\n          const validDate = isValid(date) ? date : new Date(); // Default to today\n          props.questionFieldTextState.set(format(validDate, \"MM/dd/yyyy\"));\n        }}\n        name={props.questionFieldName}\n        id={`${props.id}-${props.questionFieldName}`}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { parse, format } from \"date-fns\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel\n} from \"@reach/disclosure\";\n\ninterface Props {\n  id: number;\n  questionText: string;\n  checked: boolean;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  tooltip?: JSX.Element;\n  disabled?: boolean;\n}\n\nexport default function MultipleChoiceQuestion(props: Props) {\n  return (\n    <div className=\"custom-control custom-checkbox mb-2\">\n      <input\n        className=\"custom-control-input\"\n        checked={props.checked}\n        id={`checkbox-${props.id}-${props.questionText}`}\n        type=\"checkbox\"\n        onChange={props.onChange}\n        disabled={props.disabled}\n      />\n      <Disclosure>\n        <label\n          className=\"custom-control-label w-100\"\n          htmlFor={`checkbox-${props.id}-${props.questionText}`}\n        >\n          <div className=\"questionnaire-text d-flex justify-content-between align-items-start\" >\n\n            {props.questionText}\n            {props.tooltip && (\n              <DisclosureButton style={{flexShrink: 0}}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/circle-question.svg\"}\n                  style={{ marginLeft: \"0.2rem\" }}\n                />\n              </DisclosureButton>\n            )}\n          </div>\n        </label>\n        {props.tooltip && (\n          <DisclosurePanel>\n            <div className=\"our-tooltip\">{props.tooltip}</div>\n          </DisclosurePanel>\n        )}\n      </Disclosure>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport DateQuestion from \"./DateQuestion\";\nimport { format } from \"date-fns\";\n\ninterface Props {\n  id: number;\n  index: number;\n  person: PersonData;\n  otherPerson: PersonData;\n  inHouseExposureEventState: State<InHouseExposure>;\n}\n\nexport default function InHouseExposureQuestion(props: Props) {\n  const inHouseExposureEvent = props.inHouseExposureEventState.get();\n  const isExposed = inHouseExposureEvent.exposed;\n  const isOngoing = inHouseExposureEvent.ongoing;\n  return (\n    <div className=\"mb-3\">\n      <MultipleChoiceQuestion\n        id={props.id}\n        questionText={`${props.person.name} had close contact with ${props.otherPerson.name}`}\n        checked={isExposed}\n        onChange={() => props.inHouseExposureEventState.exposed.set(v => !v)}\n      />\n      {isExposed && (\n        <MultipleChoiceQuestion\n          id={props.id}\n          questionText={`${props.person.name}'s close contact with ${props.otherPerson.name} is ongoing`}\n          checked={isOngoing}\n          onChange={() => {\n            const ongoingState = props.inHouseExposureEventState.ongoing;\n            const ongoing = ongoingState.get();\n            const newOngoing = !ongoing;\n            ongoingState.set(newOngoing);\n            if (newOngoing) {\n              props.inHouseExposureEventState.date.set(\"\");\n            } else {\n              props.inHouseExposureEventState.date.set(\n                format(new Date(), \"MM/dd/yyyy\")\n              );\n            }\n          }}\n        />\n      )}\n      {isExposed && !isOngoing && (\n        <DateQuestion\n          id={props.id}\n          promptText=\"Date of last contact\"\n          questionFieldTextState={props.inHouseExposureEventState.date}\n          questionFieldName={`crossExposure-${props.index}`}\n        />\n      )}\n    </div>\n  );\n}\n","import { InHouseExposure, PersonData } from \"./types\";\nimport InHouseExposureQuestion from \"./InHouseExposureQuestion\";\nimport React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  person: PersonData;\n  meaningfulInHouseExposures: PersonData[];\n  relevantInHouseExposureEventsState: State<InHouseExposure>[];\n}\n\nexport default function InHouseExposureQuestions(props: Props) {\n  return (\n    <>\n      {props.meaningfulInHouseExposures.map((otherPerson, index) => {\n        const inHouseExposureEventState = props.relevantInHouseExposureEventsState.find(\n          (eventState: State<InHouseExposure>) => {\n            const event = eventState.get();\n            return (\n              event.quarantinedPerson === otherPerson.id ||\n              event.contagiousPerson === otherPerson.id\n            );\n          }\n        );\n        if (inHouseExposureEventState) {\n          return (\n            <div key={props.person.id + \"-\" + index}>\n              <hr />\n              <InHouseExposureQuestion\n                id={props.person.id}\n                index={index}\n                person={props.person}\n                otherPerson={otherPerson}\n                inHouseExposureEventState={inHouseExposureEventState}\n              />\n            </div>\n          );\n        } else {\n          return <></>;\n        }\n      })}\n    </>\n  );\n}\n","import { flow, remove, concat } from \"lodash/fp\";\nimport { CovidEventName, PersonData } from \"./types\";\n\nexport function replace<T>(array: Array<T>, old: T, updated: T): Array<T> {\n  return flow(\n    remove(e => e === old),\n    concat([updated])\n  )(array);\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function isContagious(person: PersonData) {\n  return Boolean(\n    person.covidEvents[CovidEventName.PositiveTest] ||\n      person.covidEvents[CovidEventName.SymptomsStart]\n  );\n}\n","import React, { Ref } from \"react\";\nimport { useState, none, State } from \"@hookstate/core\";\nimport { CovidEventName, InHouseExposure, PersonData, Guidance } from \"./types\";\nimport DateQuestion from \"./DateQuestion\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport InHouseExposureQuestions from \"./InHouseExposureQuestions\";\nimport { compact } from \"lodash/fp\";\nimport { isContagious } from \"./util\";\nimport { format } from \"date-fns\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel,\n} from \"@reach/disclosure\";\n\n\ninterface Props {\n  personState: State<PersonData>;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  guidance: Guidance;\n  editingPersonRef: Ref<HTMLDivElement>;\n  addNewPerson: () => void;\n  recommendationDetailOpenByDefault: boolean;\n}\n\nexport default function Person(props: Props) {\n  const person = props.personState.get();\n  const members = props.membersState.get();\n  const covidEventsState = props.personState.covidEvents;\n  const editingHousehold = props.editingHouseholdState.get();\n  const relevantInHouseExposureEventsState: State<\n    InHouseExposure\n  >[] = props.inHouseExposureEventsState.filter(\n    (eventState: State<InHouseExposure>) => {\n      const event: InHouseExposure = eventState.get();\n      return (\n        event.contagiousPerson === person.id ||\n        event.quarantinedPerson === person.id\n      );\n    }\n  );\n  const atLeastOne = covidEventsState[CovidEventName.SymptomsStart].get() !== \"\";\n  const gotPositiveTest = covidEventsState[CovidEventName.PositiveTest].get() !== \"\";\n  const contagious = atLeastOne || gotPositiveTest;\n  const [recommendationDetailIsOpen, setRecommendationDetailIsOpen] = React.useState(props.recommendationDetailOpenByDefault);\n\n  function onCheckboxChange(fieldName: CovidEventName) {\n    return (e: React.BaseSyntheticEvent) => {\n      const checked = e.target.checked;\n      if (!checked) {\n        covidEventsState[fieldName].set(\"\");\n      } else {\n        covidEventsState[fieldName].set(format(new Date(), \"MM/dd/yyyy\"));\n      }\n      if (fieldName === CovidEventName.PositiveTest) {\n        const nextContagious = Boolean(\n          checked || atLeastOne\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      } else if (fieldName === CovidEventName.SymptomsStart) {\n        const nextContagious = Boolean(\n          checked || gotPositiveTest\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      }\n    };\n  }\n\n  function onSymptomCheckboxChange(index: number) {\n    return (e: React.BaseSyntheticEvent) => {\n      const symptomsCheckedState = props.personState.symptomsChecked;\n      const anyCheckedBefore = symptomsCheckedState\n        .get()\n        .some(val=>val);\n      symptomsCheckedState[index].set(c => !c);\n      const anyCheckedAfter = symptomsCheckedState\n        .get()\n        .some(val=>val);\n      if (\n        !anyCheckedBefore || !anyCheckedAfter\n      ) {\n        const toggleSymptomStart = onCheckboxChange(\n          CovidEventName.SymptomsStart\n        );\n        toggleSymptomStart(e);\n      } else {\n      }\n    };\n  }\n\n  function buildCovidEventQuestion(\n    fieldName: CovidEventName,\n    questionText: string,\n    datePromptText: string,\n    disabled: boolean,\n    tooltip?: JSX.Element\n  ) {\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={questionText}\n          checked={covidEventsState[fieldName].get() !== \"\"}\n          onChange={onCheckboxChange(fieldName)}\n          tooltip={tooltip}\n          disabled={disabled}\n        />\n        {(covidEventsState[fieldName].get() !== \"\") && (\n          <DateQuestion\n            id={person.id}\n            promptText={datePromptText}\n            questionFieldTextState={covidEventsState[fieldName]}\n            questionFieldName={fieldName}\n          />\n        )}\n      </>\n    );\n  }\n\n  function buildSymptomsQuestion() {\n    const feelingSickState = props.personState.feelingSick;\n    const symptomsChecked = props.personState.symptomsChecked;\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={`${person.name} has been feeling sick`}\n          checked={feelingSickState.get()}\n          onChange={(e : React.BaseSyntheticEvent) => {\n            if (feelingSickState.get()){\n              if (atLeastOne) {\n                const toggleSymptomStart = onCheckboxChange(\n                  CovidEventName.SymptomsStart\n                );\n                toggleSymptomStart(e);\n              }\n\n              feelingSickState.set(false);\n              covidEventsState[CovidEventName.SymptomsStart].set(\"\");\n              symptomsChecked.set([false, false, false, false]);\n            } else {\n              feelingSickState.set(true);\n              covidEventsState[CovidEventName.SymptomsStart].set(\"\");\n              symptomsChecked.set([false, false, false, false]);\n            }\n          }}\n          tooltip={\n            <div>\n              Common symptoms include:\n              <ul className=\"mx-3 mb-1\">\n                <li>Fever or chills</li>\n                <li>Cough</li>\n                <li>Shortness of breath or difficulty breathing</li>\n                <li>Fatigue</li>\n                <li>Muscle or body aches</li>\n                <li>Headache</li>\n                <li>New loss of taste or smell</li>\n                <li>Sore throat</li>\n                <li>Congestion or runny nose</li>\n                <li>Nausea or vomiting</li>\n                <li>Diarrhea</li>\n              </ul>{\" \"}\n              <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html\">\n                Link.\n              </a>\n            </div>\n          }\n        />\n        {feelingSickState.get() ? (\n          <div className=\"questionnaire-text subquestion\">\n            <div className=\"mb-3\">Check the boxes if you are experiencing:</div>\n\n            <MultipleChoiceQuestion\n              id={person.id}\n              questionText={`Fever`}\n              checked={symptomsChecked[0].get()}\n              onChange={e => onSymptomCheckboxChange(0)(e)}\n            />\n            <MultipleChoiceQuestion\n              id={person.id}\n              questionText={`Cough`}\n              checked={symptomsChecked[1].get()}\n              onChange={e => onSymptomCheckboxChange(1)(e)}\n            />\n            <MultipleChoiceQuestion\n              id={person.id}\n              questionText={`Shortness of breath`}\n              checked={symptomsChecked[2].get()}\n              onChange={e => onSymptomCheckboxChange(2)(e)}\n            />\n            <MultipleChoiceQuestion\n              id={person.id}\n              questionText={`New loss of taste or smell`}\n              checked={symptomsChecked[3].get()}\n              onChange={e => onSymptomCheckboxChange(3)(e)}\n            />\n          </div>\n        ) : null}\n        {atLeastOne ? (\n          <DateQuestion\n            id={person.id}\n            promptText=\"Date of first appearance of symptoms\"\n            questionFieldTextState={\n              covidEventsState[CovidEventName.SymptomsStart]\n            }\n            questionFieldName={CovidEventName.SymptomsStart}\n          />\n        ) : null}\n        <div className={\"mb-3\"} />\n        {atLeastOne ? (\n          <MultipleChoiceQuestion\n            id={person.id}\n            questionText={`${person.name}'s symptoms have been improved for 24 hours.`}\n            checked={props.personState.noSymptomsFor24Hours.get()}\n            onChange={() => props.personState.noSymptomsFor24Hours.set(c => !c)}\n            tooltip={\n              <span>\n                Improved symptoms are a requirement for you to end isolation. If\n                your symptoms improve AND you have had no fever for 24 hours\n                without the use of medicine, check this box.{\" \"}\n                <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-test-positive-covid-19\">\n                  Link.\n                </a>{\" \"}\n              </span>\n            }\n          />\n        ) : null}\n      </>\n    );\n  }\n\n  function setContagiousState(contagious: boolean) {\n    relevantInHouseExposureEventsState.reverse().map(e => e.set(none)); // Remove all current exposures\n    const newExposureEvents = members.map((otherPerson: PersonData) => {\n      const otherContagious = isContagious(otherPerson);\n      if (person.id !== otherPerson.id && contagious !== otherContagious) {\n        const theAtRiskPerson = contagious ? otherPerson : person;\n        if (!theAtRiskPerson.vaccinated) {\n          return {\n            contagiousPerson: contagious ? person.id : otherPerson.id,\n            quarantinedPerson: contagious ? otherPerson.id : person.id,\n            exposed: true,\n            ongoing: true,\n            date: \"\",\n            dateMissing: false,\n            dateInvalid: false\n          };\n        }\n      }\n    });\n    props.inHouseExposureEventsState.merge(compact(newExposureEvents));\n  }\n\n  const meaningfulInHouseExposures = members.filter(\n    (otherPerson: PersonData) =>\n      person !== otherPerson && contagious !== isContagious(otherPerson)\n  );\n\n  function removeFromMembers() {\n    relevantInHouseExposureEventsState.reverse().map(e => e.set(none)); // Remove all current exposures\n    props.personState.set(none);\n    props.membersState.map((memberState: State<PersonData>, index: number)=>{\n      if (memberState.get().name.match(/Person \\d+/)){\n        memberState.name.set(`Person ${index+1}`);\n      }\n    })\n\n  }\n\n  function renderGuidance() {\n    if (props.guidance.endDate) {\n      if (props.guidance.infected) {\n        if (person.noSymptomsFor24Hours) {\n          return `${person.name} must isolate until ${format(props.guidance.endDate, \"MMM d\")}`;\n        } else {\n          return `${person.name} must isolate until at least ${format(props.guidance.endDate, \"MMM d\")}`;\n        }\n      } else {\n        if (props.guidance.peopleWithOngoingExposureWithSymptoms?.length) {\n          return `${person.name} must quarantine until at least ${format(props.guidance.endDate, \"MMM d\")}`;\n        } else {\n          return `${person.name} must quarantine until ${format(props.guidance.endDate, \"MMM d\")}`;\n        }\n      }\n    } else {\n      return `${person.name} should continue social distancing`;\n    }\n  }\n\n  function renderGuidanceDefinition(infected: boolean, exposed : boolean) {\n    return (\n      <p>\n        {infected\n          ? \"Avoid contact with everyone, including your household.\"\n          : exposed\n            ? \"Avoid contact with everyone outside of your household.\"\n            : \"\"\n        }\n      </p>\n    );\n  }\n\n  function renderGuidanceMessage(guidance: Guidance) {\n\n    const getTestedNote = guidance.person.feelingSick ? (\n      <p>\n        {\" \"}\n        Since {guidance.person.name} is feeling sick, we recommend they get a covid test.\n      </p>\n    ) :\n    (\n      <p>\n        If {guidance.person.name} develops symptoms, they should call a doctor and get a covid test.\n      </p>\n    );\n\n    if (guidance.endDate) {\n      const date = format(guidance.endDate, \"PPPP\");\n      if (guidance.infected) {\n        if (guidance.person.noSymptomsFor24Hours) {\n          return (\n            <p>\n              This is 10 days after the earliest known date of illness onset.\n            </p>\n          );\n        } else {\n          return (\n            <>\n              <p>\n                This is 10 days after the earliest known date of illness onset.\n              </p>\n              <p>\n                Additionally, continue isolating until 24 hours after fever is gone.\n              </p>\n\n            </>\n          );\n        }\n      } else {\n        if (guidance.peopleWithOngoingExposureWithSymptoms?.length) {\n          const names = guidance.peopleWithOngoingExposureWithSymptoms?.join(\n            \", \"\n          );\n          return (\n            <>\n              <p>\n                Please come back when symptoms for {names} have improved for an\n                exact date.\n              </p>\n              {getTestedNote}\n            </>\n          );\n        } else {\n          return (\n            <>\n              <p>This is 14 days after the last known exposure date.</p>\n              {getTestedNote}\n            </>\n          );\n        }\n      }\n    } else {\n      return getTestedNote;\n    }\n  }\n\n  function renderEditing() {\n    return (\n      <div className=\"ml2 mb5\">\n        <div className=\"mb-3\">\n          <label htmlFor={`${person.id}-name`}>Name</label>\n          <div className=\"input-group\">\n            <input\n              className=\"form-control\"\n              value={person.name}\n              name=\"name\"\n              id={`${person.id}-name`}\n              type=\"text\"\n              onChange={(e: React.BaseSyntheticEvent) =>\n                props.personState.name.set(e.target.value)\n              }\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-secondary\"\n                onClick={(e: React.BaseSyntheticEvent) => {\n                  e.stopPropagation();\n                  removeFromMembers();\n                  if (members.length === 0) {\n                    props.addNewPerson();\n                  }\n                }}\n              >\n                { members.length === 1 ? \"Clear\" : \"Remove\" }\n              </button>\n            </div>\n          </div>\n        </div>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={`${person.name} has been fully vaccinated for at least two weeks`}\n          checked={props.personState.vaccinated.get()}\n          onChange={() => {\n            props.personState.vaccinated.set(v => !v);\n            covidEventsState[CovidEventName.LastCloseContact].set(\"\");\n            setContagiousState(contagious);\n          }}\n        />\n\n        <div className=\"mb-3\">\n          <hr />\n          {buildCovidEventQuestion(\n            CovidEventName.LastCloseContact,\n            `${person.name} had close contact to someone COVID positive that does not live with them`,\n            \"Date of last contact\",\n            props.personState.vaccinated.get(), // disabled?\n            <div>\n              Close contact means any of the following:\n              <ul className=\"mx-3 mb-1\">\n                <li>\n                  You were within 6 feet of them for a total of 15 minutes or\n                  more\n                </li>\n                <li>You provided care at home to the person</li>\n                <li>\n                  You had direct physical contact with the person (hugged or\n                  kissed them)\n                </li>\n                <li>You shared eating or drinking utensils</li>\n                <li>\n                  They sneezed, coughed, or somehow got respiratory droplets on\n                  you\n                </li>\n              </ul>{\" \"}\n              <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n                Link.\n              </a>\n            </div>\n          )}\n        </div>\n        <div className=\"mb-3\">\n          <hr />\n          {buildCovidEventQuestion(\n            CovidEventName.PositiveTest,\n            `${person.name} has received a positive test result`,\n            \"Date of test\",\n            false // disabled?\n          )}\n        </div>\n        <div className=\"mb-3\">\n          <hr />\n          {buildSymptomsQuestion()}\n        </div>\n        <InHouseExposureQuestions\n          person={person}\n          meaningfulInHouseExposures={meaningfulInHouseExposures}\n          relevantInHouseExposureEventsState={\n            relevantInHouseExposureEventsState\n          }\n        />\n      </div>\n    );\n  }\n\n  function renderRecommendationDetail() {\n    const guidanceDefinition = renderGuidanceDefinition(props.guidance.infected, !!props.guidance.endDate);\n    const guidanceMessage = renderGuidanceMessage(props.guidance);\n    if (guidanceDefinition && guidanceMessage) {\n      return (\n        <div className=\"recommendation-detail\">\n          {guidanceDefinition}\n          {guidanceMessage}\n        </div>\n      );\n    }\n  }\n\n  function renderNonEditing() {\n    return (\n      <Disclosure open={recommendationDetailIsOpen} onChange={() => setRecommendationDetailIsOpen(!recommendationDetailIsOpen)}>\n        <DisclosureButton className=\"w-100\">\n        <h4 className=\"d-flex justify-content-between align-items-center\">\n          <span className=\"\">\n            {renderGuidance()}\n          </span>\n\n        <span aria-hidden=\"true\" className={\"fas \" + (recommendationDetailIsOpen ? \"fa-angle-up\" : \"fa-angle-down\")}></span>\n        </h4>\n        </DisclosureButton>\n        <DisclosurePanel>\n        {renderRecommendationDetail()}\n        </DisclosurePanel>\n      <hr/>\n      </Disclosure>\n    );\n  }\n\n  return editingHousehold ? renderEditing() : renderNonEditing();\n}\n","import {\n  Guidance,\n  CovidEventName,\n  InHouseExposure,\n  PersonData,\n  Exposure\n} from \"./types\";\nimport { addDays, parse } from \"date-fns\";\nimport {\n  flow,\n  compact,\n  map,\n  thru,\n  partition,\n  filter,\n  max,\n  maxBy,\n  min,\n  minBy\n} from \"lodash/fp\";\n\nexport function computeHouseHoldQuarantinePeriod(\n  household: PersonData[],\n  inHouseExposures: InHouseExposure[]\n): Guidance[] {\n  const [infectedGuidances, quarantinedGuidances] = flow(\n    map((person: PersonData) => {\n      const isolationPeriod = computeIsolationPeriod(person);\n      if (isolationPeriod) {\n        const [startDate, endDate] = isolationPeriod;\n        return {\n          person: person,\n          infected: true,\n          startDate: startDate,\n          endDate: endDate\n        };\n      } else {\n        return {\n          person: person,\n          infected: false\n        };\n      }\n    }),\n    partition(c => c.infected)\n  )(household);\n  const updatedQuarantinedGuidance: Guidance[] = quarantinedGuidances.map(\n    guidance =>\n      computeQuarantineGuidance(guidance, inHouseExposures, infectedGuidances)\n  );\n  return [...infectedGuidances, ...updatedQuarantinedGuidance];\n}\n\nexport function computeIsolationPeriod(person: PersonData): Date[] | undefined {\n  const covidPositiveEvents = [\n    person.covidEvents[CovidEventName.SymptomsStart],\n    person.covidEvents[CovidEventName.PositiveTest]\n  ];\n  const illnessOnset = flow(\n    compact,\n    map((date: string) => parse(date, \"M/dd/yyyy\", new Date())),\n    thru((dates: Date[]) => min(dates))\n  )(covidPositiveEvents);\n  if (illnessOnset) {\n    const tenDaysAfterOnset = addDays(illnessOnset, 10);\n    const symptomsEnd = person.noSymptomsFor24Hours ? undefined : new Date(); // TODO: Rethink\n    const isolationEndDate = flow(\n      compact,\n      thru((dates: Date[]) => max(dates))\n    )([tenDaysAfterOnset, symptomsEnd]);\n    return [illnessOnset, isolationEndDate];\n  }\n}\n\nfunction computeQuarantineGuidance(\n  guidance: Guidance,\n  inHouseExposures: InHouseExposure[],\n  infectedGuidances: Guidance[]\n) {\n  const person = guidance.person;\n  const relevantInHouseExposures = filter(\n    (event: InHouseExposure) =>\n      event.quarantinedPerson === person.id && event.exposed\n  )(inHouseExposures);\n  const normalize = map((event: InHouseExposure) => {\n    const infectedGuidance = infectedGuidances.find(\n      guidance => guidance.person.id === event.contagiousPerson\n    ) as Guidance;\n    if (event.ongoing) {\n      return {\n        startDate: infectedGuidance.startDate as Date,\n        endDate: infectedGuidance.endDate as Date,\n        infectionSource: infectedGuidance.person\n      };\n    } else {\n      return {\n        startDate: infectedGuidance.startDate as Date,\n        endDate: parse(event.date, \"M/dd/yyyy\", new Date()),\n        infectionSource: infectedGuidance.person\n      };\n    }\n  });\n  const normalizedInHouseExposures = compact(\n    normalize(relevantInHouseExposures)\n  );\n  const exposures = addOutsideExposures(person, normalizedInHouseExposures);\n  const earliestExposure = minBy(exposure => exposure.startDate, exposures);\n  const latestExposure = maxBy(exposure => exposure.endDate, exposures);\n  let startDate = earliestExposure?.startDate;\n  let endDate = undefined;\n  if (latestExposure) {\n    endDate = addDays(latestExposure.endDate, 14);\n  }\n  const peopleWithOngoingExposureWithSymptoms = flow(\n    map((event: InHouseExposure) => {\n      if (event.ongoing) {\n        const personWithOngoingExposure = infectedGuidances.find(\n          guidance => guidance.person.id === event.contagiousPerson\n        )?.person;\n        if (!personWithOngoingExposure?.noSymptomsFor24Hours) {\n          return personWithOngoingExposure?.name;\n        }\n      }\n    }),\n    compact\n  )(relevantInHouseExposures);\n  return {\n    person: person,\n    infected: false,\n    startDate: startDate,\n    endDate: endDate,\n    infectionSource: latestExposure && latestExposure.infectionSource,\n    peopleWithOngoingExposureWithSymptoms: peopleWithOngoingExposureWithSymptoms\n  };\n}\n\nfunction addOutsideExposures(person: PersonData, exposures: Exposure[]) {\n  const outHouseExposureDateString =\n    person.covidEvents[CovidEventName.LastCloseContact];\n  if (outHouseExposureDateString) {\n    const outHouseExposureDate = parse(\n      outHouseExposureDateString,\n      \"M/dd/yyyy\",\n      new Date()\n    );\n    const outHouseExposure = {\n      startDate: outHouseExposureDate,\n      endDate: outHouseExposureDate,\n      infectionSource: undefined\n    };\n    exposures = [...exposures, outHouseExposure];\n  }\n  return exposures;\n}\n","import React, { useRef } from \"react\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport Person from \"./Person\";\nimport { State } from \"@hookstate/core\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { Link } from \"react-router-dom\";\nimport { downloadEvents } from \"./calendar\";\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  height: State<number>;\n}\n\nexport default function Household(props: Props) {\n  const editingHousehold = props.editingHouseholdState.get();\n  const members = props.membersState.get();\n  const inHouseExposureEvents = props.inHouseExposureEventsState.get();\n  const guidances = computeHouseHoldQuarantinePeriod(\n    members,\n    inHouseExposureEvents\n  );\n\n  const editingPersonRef = useRef<HTMLDivElement>(null);\n\n  function addPerson(e: React.BaseSyntheticEvent) {\n    e.stopPropagation();\n    props.editingHouseholdState.set(true);\n    props.addNewPerson();\n  }\n\n\n  function renderTitle() {\n    if (editingHousehold) {\n      return (\n        <>\n          <h2\n            style={{\n              fontFamily: \"Helvetica\",\n              fontSize: \"48px\",\n              fontStyle: \"normal\",\n              fontWeight: 400,\n              lineHeight: \"56px\",\n              letterSpacing: \"-0.01em\",\n              textAlign: \"left\"\n            }}\n          >\n            Tell us about yourself and each person you live with\n          </h2>\n          <p\n            className=\"lead\"\n            style={{\n              fontFamily: \"Helvetica\",\n              fontSize: \"24px\",\n              fontStyle: \"normal\",\n              fontWeight: 400,\n              lineHeight: \"36px\",\n              letterSpacing: \"0em\",\n              textAlign: \"left\",\n              color: \"#000000\"\n            }}\n          >\n            Thank you for doing your part to keep our community safe! For help\n            with a question, tap \"?\"\n          </p>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h1>Your recommendation</h1>\n          <p className=\"lead text-muted\">\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n        </>\n      );\n    }\n  }\n\n  function renderAction() {\n    if (members.length) {\n      if (editingHousehold) {\n        return (\n          <div className=\"\">\n          <button\n            className=\"white get-recommendation-button\"\n            onClick={(e: React.BaseSyntheticEvent) => {\n              props.editingHouseholdState.set(false);\n              window.scrollTo(0,0);\n            }}\n          >\n            Get recommendation{\" \"}\n          </button>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"d-flex justify-content-center\">\n            <button\n              className=\"my-3 update-button\"\n              onClick={() => {\n                props.editingHouseholdState.set(true);\n              }}\n            >\n              UPDATE ANSWERS\n            </button>\n\n          </div>\n\n        );\n      }\n    }\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\"\n        }}\n      >\n        <div\n          className={\"col-md-12\"}\n          style={{\n            backgroundColor: \"#fff\",\n            minHeight: props.height.get() + \"px\"\n          }}\n        >\n          <div className={\"container\"}>\n            <div className={\"my-3\"} />\n            {renderTitle()}\n            <div>\n              {props.membersState.map((personState: State<PersonData>, index: number) => {\n                const person = personState.get();\n                const id = person.id;\n                const personGuidance = guidances.find(c => c.person.id === id);\n                if (personGuidance) {\n                  return (\n                    <Person\n                      key={id}\n                      personState={personState}\n                      membersState={props.membersState}\n                      inHouseExposureEventsState={\n                        props.inHouseExposureEventsState\n                      }\n                      editingHouseholdState={props.editingHouseholdState}\n                      guidance={personGuidance}\n                      editingPersonRef={editingPersonRef}\n                      addNewPerson={props.addNewPerson}\n                      recommendationDetailOpenByDefault={index===0}\n                    />\n                  );\n                }\n              })}\n            </div>\n            {editingHousehold && (\n              <button className=\"mb-2 add-another-person-button\" onClick={addPerson}>\n                <div style={{display: \"flex\"}}>\n                <div style={{width:\"44px\"}}> {/*hold the space open for no image load-time jump. There's even a teeny delay for an svg load, and that's dumb, so this stays.  */}\n                <svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle cx=\"22\" cy=\"22\" r=\"21\" stroke-width=\"2\"/>\n                  <path d=\"M22 14V22M22 30V22M22 22H14M22 22H30\" stroke-width=\"2\"/>\n                </svg>\n\n                </div>\n                <span className={\"add-another-person-text\"}>\n                  Add another person &nbsp;\n                </span>\n                </div>\n              </button>\n            )}\n            {renderAction()}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport GridView from \"./GridView\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\nimport { Link } from \"react-router-dom\";\nimport Household from \"./Household\";\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  height: State<number>;\n}\n\nexport default function Recommendation(props: Props) {\n  const members = props.membersState.get();\n\n\n  return (\n    <div style={{ position: \"relative\", minHeight: \"100%\" }}>\n      <header>\n        <div className=\"navbar\">\n          <div\n            className=\"container d-flex justify-content-between\"\n            style={{\n              fontFamily: \"Arial\",\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"14px\",\n              lineHeight: \"160%\",\n              textAlign: \"center\",\n              letterSpacing: \"0.02em\",\n              textTransform: \"uppercase\",\n              color: \"#1F252F\"\n            }}\n          >\n            <Link to=\"/\" className=\"d-flex align-items-center home-link\">COVID CALCULATOR</Link>\n            <div>ESPAÑOL</div>\n          </div>\n        </div>\n      </header>\n      <main className={\"main\"} role={\"main\"} style={{ paddingBottom: \"250px\" }}>\n        <section className={\"jumbotron\"} style={{ background: \"#FFFFFF\" }}>\n          <Household\n            addNewPerson={props.addNewPerson}\n            editingHouseholdState={props.editingHouseholdState}\n            height={props.height}\n            inHouseExposureEventsState={props.inHouseExposureEventsState}\n            membersState={props.membersState}\n          />\n        </section>\n        <div\n          className=\"container pb-5\"\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            background: \"#F8F8F8\",\n            paddingTop: \"91px\",\n            maxWidth: \"100%\"\n          }}\n        >\n          <div\n            style={{\n              width: \"70%\"\n            }}\n          >\n            <h2 style={{ textAlign: \"center\" }}>Quarantine vs. Isolation</h2>\n            <div className=\"py-2\"></div>\n            <div className=\"row\">\n              <div className=\"col-md-6  col-sm-12 f3 gray\">\n                <div\n                  style={{\n                    marginLeft: \"calc(50% - 90px)\",\n                    marginTop: \"80px\",\n                    marginBottom: \"60px\"\n                  }}\n                >\n                  <img src={process.env.PUBLIC_URL + \"/quarantine.svg\"} />\n                </div>\n                People who must <strong>quarantine</strong> are avoiding contact\n                with everyone outside their home.\n              </div>\n              <div className=\"col-md-6 col-sm-12 f3 gray\">\n                <div\n                  style={{\n                    marginLeft: \"calc(50% - 90px)\",\n                    marginTop: \"80px\",\n                    marginBottom: \"60px\"\n                  }}\n                >\n                  <img src={process.env.PUBLIC_URL + \"/isolation.svg\"} />\n                </div>\n                People who must <strong>isolate</strong> should keep away from\n                everyone inside and outside the home.\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/*\n      <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/isolation.html\">\n        CDC guidelines on isolation\n      </a>\n      <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n        CDC guidelines on quarantine\n      </a>\n      */}\n      <footer\n        className={\"py-5\"}\n        style={{\n          background: \"#1F252F\",\n          position: \"absolute\",\n          bottom: \"0%\",\n          width: \"100%\",\n          height: \"250px\"\n        }}\n      >\n        <div\n          className={\"container\"}\n          style={{\n            width: \"400px\"\n          }}\n        >\n          {\" \"}\n          {/* contains images and below-text*/}\n          <div\n            style={{\n              position: \"relative\",\n              width: \"100%\",\n              height: \"50px\"\n            }}\n          >\n            <span style={{ display: \"inline\" }}>\n              <a href={\"https://www.clackamas.us/publichealth\"}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/logo-clackamas.png\"}\n                  style={{ height: \"100%\" }}\n                />\n              </a>\n            </span>\n            <span\n              style={{\n                display: \"inline\",\n                height: \"1px\",\n                width: \"56.1px\",\n                opacity: 0.5,\n                border: \"1px solid #FFFFFF\",\n                transform: \"rotate(120.37deg)\",\n                position: \"absolute\",\n                left: \"19.51%\",\n                top: \"50.6%\"\n              }}\n            ></span>\n            <span style={{ display: \"inline-block\", width: \"50px\" }}>\n              &nbsp;\n            </span>\n            <span style={{ display: \"inline\" }}>\n              <a href={\"https://www.codeforpdx.org/\"}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/logo-code-for-pdx.png\"}\n                  style={{ height: \"100%\" }}\n                />\n              </a>\n            </span>\n          </div>\n          <div className=\"py-3\"></div>\n          <div style={{ color: \"#FFFFFF\" }}>\n            Made in partnership between Clackamas County and Code for PDX.\n            Recommendations use CDC guidelines.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useState } from \"@hookstate/core\";\nimport Home from \"./Home\";\nimport Recommendation from \"./Recommendation\";\nimport { CovidEventName, InHouseExposure, PersonData } from \"./types\";\nimport { compact } from \"lodash/fp\";\nimport { getRandomInt, isContagious } from \"./util\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  const height = useState(window.innerHeight);\n  const updateHeight = () => {\n    height.set(window.innerHeight);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateHeight);\n    return () => window.removeEventListener(\"resize\", updateHeight);\n  }, []);\n  const firstPerson = {\n    id: 1,\n    name: `Person 1`,\n    covidEvents: {\n      [CovidEventName.LastCloseContact]: \"\",\n      [CovidEventName.SymptomsStart]: \"\",\n      [CovidEventName.PositiveTest]: \"\",\n    },\n    symptomsChecked: [false, false, false, false],\n    noSymptomsFor24Hours: true,\n    feelingSick: false,\n    vaccinated: false,\n    isNewPerson: true,\n    editing: true\n  };\n\n  const members = useState([firstPerson] as PersonData[]);\n  const inHouseExposureEvents = useState<InHouseExposure[]>([]);\n  const id = useState(2);\n  const editingHouseholdState = useState(true);\n  const editingPersonState = useState<number | undefined>(undefined);\n\n  function addNewPerson() {\n    const currentId = id.get();\n    const newPerson = {\n      id: currentId,\n      name: `Person ${members.length+1}`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\",\n      },\n      symptomsChecked: [false, false, false, false],\n      noSymptomsFor24Hours: true,\n      feelingSick: false,\n      vaccinated: false,\n      isNewPerson: true,\n      editing: true\n    };\n    id.set(id => id + 1);\n    members.set(members => [...members, newPerson]);\n    editingPersonState.set(currentId);\n    const newExposureEvents = members.get().map((person: PersonData) => {\n      if (isContagious(person)) {\n        return {\n          contagiousPerson: person.id,\n          quarantinedPerson: newPerson.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    inHouseExposureEvents.merge(compact(newExposureEvents));\n  }\n\n  return (\n    <Router basename={`${process.env.PUBLIC_URL}`}>\n      <Switch>\n        <Route path=\"/recommendation\">\n          <Recommendation\n            addNewPerson={addNewPerson}\n            editingHouseholdState={editingHouseholdState}\n            height={height}\n            inHouseExposureEventsState={inHouseExposureEvents}\n            membersState={members}\n          />\n        </Route>\n        <Route path=\"/\">\n          <Home/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}