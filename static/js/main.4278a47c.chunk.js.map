{"version":3,"sources":["types.ts","calculator.ts","GridView.tsx","DateQuestion.tsx","MultipleChoiceQuestion.tsx","InHouseExposureQuestion.tsx","InHouseExposureQuestions.tsx","util.tsx","Person.tsx","Household.tsx","App.tsx","index.tsx"],"names":["CovidEventName","colors","computeHouseHoldQuarantinePeriod","household","inHouseExposureEvents","flow","map","person","isolationEndDate","covidPositiveEvents","covidEvents","SymptomsStart","PositiveTest","illnessOnset","compact","date","parse","Date","thru","dates","min","tenDaysAfterOnset","addDays","symptomsEnd","noSymptomsFor24Hours","undefined","max","computeIsolationPeriod","isValid","endDate","infected","partition","c","quarantinedCalculations","calculation","relevantInHouseExposureEvents","filter","event","quarantinedPerson","id","exposed","lastExposureDate","ongoing","find","contagiousPerson","outHouseExposureDateString","LastCloseContact","outHouseExposureDate","latestExposureDate","peopleWithOngoingExposureWithSymptoms","personWithOngoingExposure","name","fourteenDaysFromLastExposure","GridView","props","members","membersState","get","eventSetter","eventSetterState","className","plugins","dayGridPlugin","interactionPlugin","initialView","events","result","classNames","title","start","parseISO","end","color","length","textColor","computeEvents","dateClick","info","format","DateQuestion","twoDigitYearPattern","RegExp","dayMonthPattern","htmlFor","questionFieldName","role","missing","invalid","value","questionFieldTextState","type","onChange","e","onFocus","onBlur","fixedDate","exec","slice","set","onUnfocus","MultipleChoiceQuestion","checked","questionText","tooltip","aria-hidden","InHouseExposureQuestion","inHouseExposureEvent","inHouseExposureEventState","isExposed","isOngoing","otherPerson","v","index","target","dateMissing","dateInvalid","InHouseExposureQuestions","meaningfulInHouseExposures","relevantInHouseExposureEventsState","eventState","key","getRandomInt","Math","floor","random","isContagious","Boolean","Person","personState","covidEventsState","editing","editingState","inHouseExposureEventsState","selectionsState","useState","Object","values","reduce","selections","datePattern","datesInvalid","d","datesMissing","contagious","hovering","onCheckboxChange","fieldName","nextContagious","setContagiousState","buildCovidEventQuestion","handleChange","handleSubmit","includes","none","newExposureEvents","otherContagious","merge","href","symptomsStart","buildSymptomsQuestion","onClick","isNewPerson","onMouseEnter","onMouseLeave","guidance","names","join","guidanceMessage","entries","quarantinedPersonName","member","contagiousPersonName","Household","style","minHeight","height","personGuidance","addNewPerson","App","window","innerHeight","updateHeight","useEffect","addEventListener","removeEventListener","currentId","newPerson","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.4278a47c.chunk.js","sourcesContent":["export interface PersonData {\n  id: number;\n  name: string;\n  covidEvents: CovidEvents;\n  noSymptomsFor24Hours: boolean;\n  isNewPerson: boolean;\n  editing: boolean;\n}\n\nexport enum CovidEventName {\n  LastCloseContact = \"Most Recent Close Contact\",\n  SymptomsStart = \"Illness Onset\",\n  PositiveTest = \"Most Recent Positive Test\"\n}\n\nexport type CovidEvents = {\n  [key in CovidEventName]: string;\n};\n\nexport interface InHouseExposureEvent {\n  contagiousPerson: number;\n  quarantinedPerson: number;\n  exposed: boolean;\n  ongoing: boolean;\n  date: string;\n  dateMissing: boolean;\n  dateInvalid: boolean;\n}\n\nexport interface CalculationResult {\n  person: PersonData;\n  endDate: Date;\n  peopleWithOngoingExposureWithSymptoms?: string[];\n  infected?: boolean;\n}\n\nexport const colors = [\n  \"#b35806\",\n  \"#e08214\",\n  \"#fdb863\",\n  \"#fee0b6\",\n  \"#d8daeb\",\n  \"#b2abd2\",\n  \"#8073ac\",\n  \"#542788\"\n];\n","import {\n  CalculationResult,\n  CovidEventName,\n  InHouseExposureEvent,\n  PersonData\n} from \"./types\";\nimport { addDays, max, min, isValid, parse } from \"date-fns\";\nimport { flow, compact, map, thru, partition, filter } from \"lodash/fp\";\n\nexport function computeHouseHoldQuarantinePeriod(\n  household: PersonData[],\n  inHouseExposureEvents: InHouseExposureEvent[]\n): CalculationResult[] {\n  const [infected, quarantined] = flow(\n    map((person: PersonData) => {\n      const isolationEndDate = computeIsolationPeriod(person);\n      if (isValid(isolationEndDate)) {\n        return {\n          person: person,\n          endDate: isolationEndDate,\n          infected: true\n        };\n      } else {\n        return {\n          person: person,\n          endDate: new Date(),\n          infected: false\n        };\n      }\n    }),\n    partition(c => c.infected)\n  )(household);\n  const quarantinedCalculations: CalculationResult[] = quarantined.map(\n    calculation => {\n      const person = calculation.person;\n      const relevantInHouseExposureEvents = filter(\n        (event: InHouseExposureEvent) =>\n          event.quarantinedPerson === person.id && event.exposed\n      )(inHouseExposureEvents);\n      const lastExposureDate = map((event: InHouseExposureEvent) => {\n        if (event.ongoing) {\n          return infected.find(\n            calculation => calculation.person.id === event.contagiousPerson\n          )?.endDate;\n        } else {\n          return parse(event.date, \"M/dd/yyyy\", new Date());\n        }\n      });\n      const outHouseExposureDateString =\n        person.covidEvents[CovidEventName.LastCloseContact];\n      const outHouseExposureDate = outHouseExposureDateString\n        ? parse(outHouseExposureDateString, \"M/dd/yyyy\", new Date())\n        : undefined;\n      const latestExposureDate = max(\n        compact([\n          ...lastExposureDate(relevantInHouseExposureEvents),\n          outHouseExposureDate\n        ])\n      );\n      const peopleWithOngoingExposureWithSymptoms = flow(\n        map((event: InHouseExposureEvent) => {\n          if (event.ongoing) {\n            const personWithOngoingExposure = infected.find(\n              calculation => calculation.person.id === event.contagiousPerson\n            )?.person;\n            if (!personWithOngoingExposure?.noSymptomsFor24Hours) {\n              return personWithOngoingExposure?.name;\n            }\n          }\n        }),\n        compact\n      )(relevantInHouseExposureEvents);\n      const fourteenDaysFromLastExposure = addDays(latestExposureDate, 14);\n      return {\n        person: person,\n        endDate: fourteenDaysFromLastExposure,\n        peopleWithOngoingExposureWithSymptoms: peopleWithOngoingExposureWithSymptoms,\n        infected: false\n      };\n    }\n  );\n  return [...infected, ...quarantinedCalculations];\n}\n\nexport function computeIsolationPeriod(person: PersonData): Date {\n  const covidPositiveEvents = [\n    person.covidEvents[CovidEventName.SymptomsStart],\n    person.covidEvents[CovidEventName.PositiveTest]\n  ];\n  const illnessOnset = flow(\n    compact,\n    map((date: string) => parse(date, \"M/dd/yyyy\", new Date())),\n    thru((dates: Date[]) => min(dates))\n  )(covidPositiveEvents);\n  const tenDaysAfterOnset = illnessOnset && addDays(illnessOnset, 10);\n  const symptomsEnd = person.noSymptomsFor24Hours ? undefined : new Date(); // TODO: Rethink\n  const isolationEndDate = flow(\n    compact,\n    thru((dates: Date[]) => max(dates))\n  )([tenDaysAfterOnset, symptomsEnd]);\n  return isolationEndDate;\n}\n","import React from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { DateClickArg } from \"@fullcalendar/interaction\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { colors } from \"./types\";\n\nimport { PersonData, CalculationResult, InHouseExposureEvent } from \"./types\";\nimport { format, parseISO } from \"date-fns\";\nimport { State } from \"@hookstate/core/dist\";\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEvents: InHouseExposureEvent[];\n  editing: number | undefined;\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function GridView(props: Props) {\n  const members = props.membersState.get();\n  const eventSetter = props.eventSetterState.get();\n  function computeEvents(\n    members: PersonData[],\n    inHouseExposureEvents: InHouseExposureEvent[]\n  ) {\n    return computeHouseHoldQuarantinePeriod(members, inHouseExposureEvents).map(\n      (result: CalculationResult) => {\n        return {\n          classNames: [\"TODO\"],\n          title: result.person.name,\n          start: parseISO(\"1970-01-01\"),\n          end: result.endDate,\n          color: colors[result.person.id - (1 % colors.length)],\n          textColor: \"#000000\"\n        };\n      }\n    );\n  }\n\n  return (\n    <div className={\"p-3\"}>\n      {\n        <div className={eventSetter ? \"ba bw2 b--light-yellow\" : \"\"}>\n          <FullCalendar\n            plugins={[dayGridPlugin, interactionPlugin]}\n            initialView=\"dayGridMonth\"\n            events={computeEvents(members, props.inHouseExposureEvents)}\n            dateClick={(info: DateClickArg) => {\n              if (eventSetter) {\n                eventSetter(format(info.date, \"MM/dd/yyyy\"));\n              }\n            }}\n          />\n        </div>\n      }\n    </div>\n  );\n}\n","import React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  id: number;\n  questionFieldTextState: State<string>;\n  questionFieldName: string;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  onFocus: () => void;\n  onUnfocus: () => void;\n  missing: boolean;\n  invalid: boolean;\n}\n\nexport default function DateQuestion(props: Props) {\n  const twoDigitYearPattern = new RegExp(\n    \"^([0-9][0-9]?/[0-9][0-9]?/)([0-9][0-9])$\"\n  );\n  const dayMonthPattern = new RegExp(\"^[0-9][0-9]?/[0-9][0-9]?$\");\n\n  const handleTextChange = (e: React.BaseSyntheticEvent) => {\n    props.onChange(e);\n  };\n\n  const handleUnfocus = () => {\n    let fixedDate = props.questionFieldTextState.get();\n    const twoDigitYearMatch = twoDigitYearPattern.exec(fixedDate);\n    if (twoDigitYearMatch) {\n      fixedDate = fixedDate.slice(0, -2) + \"20\" + fixedDate.slice(-2);\n    }\n    const dayMonthMatch = dayMonthPattern.exec(fixedDate);\n    if (dayMonthMatch) {\n      fixedDate = fixedDate + \"/2020\";\n    }\n    props.questionFieldTextState.set(fixedDate);\n    props.onUnfocus();\n  };\n  return (\n    <div className=\"\">\n      <label htmlFor={`${props.id}-${props.questionFieldName}`}>\n        Date <span className=\"f6 fw3\">mm/dd/yyyy</span>\n        <div role=\"alert\">\n          {props.missing ? (\n            <span className=\"f5 fw5 red\">required</span>\n          ) : props.invalid ? (\n            <span className=\"f5 fw5 red\">mm/dd/yyyy format required</span>\n          ) : null}\n        </div>\n      </label>\n      <input\n        className=\"form-control\"\n        value={props.questionFieldTextState.get()}\n        name={props.questionFieldName}\n        id={`${props.id}-${props.questionFieldName}`}\n        type=\"text\"\n        onChange={handleTextChange}\n        onFocus={props.onFocus}\n        onBlur={handleUnfocus}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { parse, format } from \"date-fns\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel\n} from \"@reach/disclosure\";\n\ninterface Props {\n  id: number;\n  questionText: string;\n  checked: boolean;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  tooltip?: JSX.Element;\n}\n\nexport default function MultipleChoiceQuestion(props: Props) {\n  return (\n    <div className=\"custom-control custom-checkbox mb-3\">\n      <input\n        className=\"custom-control-input\"\n        checked={props.checked}\n        id={`checkbox-${props.id}-${props.questionText}`}\n        type=\"checkbox\"\n        onChange={props.onChange}\n      />\n      <Disclosure>\n        <label\n          className=\"custom-control-label\"\n          htmlFor={`checkbox-${props.id}-${props.questionText}`}\n        >\n          {props.questionText}\n          {props.tooltip && (\n            <DisclosureButton>\n              <i\n                aria-hidden=\"true\"\n                className=\"px-1 fas fa-question-circle link hover-dark-blue gray\"\n              ></i>\n            </DisclosureButton>\n          )}\n        </label>\n        {props.tooltip && (\n          <DisclosurePanel>\n            <div className=\"f5 gray\">{props.tooltip}</div>\n          </DisclosurePanel>\n        )}\n      </Disclosure>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { InHouseExposureEvent, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport DateQuestion from \"./DateQuestion\";\n\ninterface Props {\n  id: number;\n  index: number;\n  otherPerson: PersonData;\n  inHouseExposureEventState: State<InHouseExposureEvent>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function InHouseExposureQuestion(props: Props) {\n  const inHouseExposureEvent = props.inHouseExposureEventState.get();\n  const isExposed = inHouseExposureEvent.exposed;\n  const isOngoing = inHouseExposureEvent.ongoing;\n  return (\n    <div className=\"mb-3\">\n      <MultipleChoiceQuestion\n        id={props.id}\n        questionText={`I had close contact with ${props.otherPerson.name}`}\n        checked={isExposed}\n        onChange={() => props.inHouseExposureEventState.exposed.set(v => !v)}\n      />\n      {isExposed && (\n        <MultipleChoiceQuestion\n          id={props.id}\n          questionText={`My close contact with ${props.otherPerson.name} is ongoing`}\n          checked={isOngoing}\n          onChange={() => props.inHouseExposureEventState.ongoing.set(v => !v)}\n        />\n      )}\n      {isExposed && !isOngoing && (\n        <DateQuestion\n          id={props.id}\n          questionFieldTextState={props.inHouseExposureEventState.date}\n          questionFieldName={`crossExposure-${props.index}`}\n          onChange={(e: React.BaseSyntheticEvent) =>\n            props.inHouseExposureEventState.date.set(e.target.value)\n          }\n          onFocus={() =>\n            props.eventSetterState.set(() => (date: string) => {\n              props.inHouseExposureEventState.date.set(date);\n            })\n          }\n          onUnfocus={() => props.eventSetterState.set(undefined)}\n          missing={inHouseExposureEvent.dateMissing}\n          invalid={inHouseExposureEvent.dateInvalid}\n        />\n      )}\n    </div>\n  );\n}\n","import { InHouseExposureEvent, PersonData } from \"./types\";\nimport InHouseExposureQuestion from \"./InHouseExposureQuestion\";\nimport React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  id: number;\n  meaningfulInHouseExposures: PersonData[];\n  relevantInHouseExposureEventsState: State<InHouseExposureEvent>[];\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function InHouseExposureQuestions(props: Props) {\n  return (\n    <>\n      {props.meaningfulInHouseExposures.map((otherPerson, index) => {\n        const inHouseExposureEventState = props.relevantInHouseExposureEventsState.find(\n          (eventState: State<InHouseExposureEvent>) => {\n            const event = eventState.get();\n            return (\n              event.quarantinedPerson === otherPerson.id ||\n              event.contagiousPerson === otherPerson.id\n            );\n          }\n        );\n        if (inHouseExposureEventState) {\n          return (\n            <>\n              <InHouseExposureQuestion\n                key={props.id + \"-\" + index}\n                id={props.id}\n                index={index}\n                otherPerson={otherPerson}\n                inHouseExposureEventState={inHouseExposureEventState}\n                eventSetterState={props.eventSetterState}\n              />\n              <hr />\n            </>\n          );\n        } else {\n          return <></>;\n        }\n      })}\n    </>\n  );\n}\n","import { flow, remove, concat } from \"lodash/fp\";\nimport { CovidEventName, PersonData } from \"./types\";\n\nexport function replace<T>(array: Array<T>, old: T, updated: T): Array<T> {\n  return flow(\n    remove(e => e === old),\n    concat([updated])\n  )(array);\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function isContagious(person: PersonData) {\n  return Boolean(\n    person.covidEvents[CovidEventName.PositiveTest] ||\n      person.covidEvents[CovidEventName.SymptomsStart]\n  );\n}\n","import React from \"react\";\nimport { useState, none, State } from \"@hookstate/core\";\n\nimport {\n  CovidEventName,\n  InHouseExposureEvent,\n  PersonData,\n  colors,\n  CalculationResult\n} from \"./types\";\nimport DateQuestion from \"./DateQuestion\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport InHouseExposureQuestions from \"./InHouseExposureQuestions\";\nimport { compact } from \"lodash/fp\";\nimport { isContagious } from \"./util\";\nimport { format, isValid } from \"date-fns\";\n\ninterface Props {\n  personState: State<PersonData>;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingState: State<number | undefined>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n  guidance: CalculationResult;\n}\n\nexport default function Person(props: Props) {\n  const person = props.personState.get();\n  const members = props.membersState.get();\n  const covidEventsState = props.personState.covidEvents;\n  const editing = props.editingState.get();\n  const relevantInHouseExposureEventsState: State<\n    InHouseExposureEvent\n  >[] = props.inHouseExposureEventsState.filter(\n    (eventState: State<InHouseExposureEvent>) => {\n      const event: InHouseExposureEvent = eventState.get();\n      return (\n        event.contagiousPerson === person.id ||\n        event.quarantinedPerson === person.id\n      );\n    }\n  );\n  const relevantInHouseExposureEvents = relevantInHouseExposureEventsState.map(\n    e => e.get()\n  );\n  const selectionsState: any = useState(\n    Object.values(CovidEventName).reduce(\n      (selections: any, key: CovidEventName) => (\n        (selections[key] = covidEventsState[key].get() !== \"\"), selections\n      ),\n      {}\n    )\n  );\n  const datePattern = new RegExp(\n    \"^[0-9][0-9]?/[0-9][0-9]?/[0-9][0-9][0-9][0-9]$\"\n  );\n  const datesInvalid: any = useState(\n    Object.values(CovidEventName).reduce((d: any, key: CovidEventName) => {\n      return (d[key] = false), d;\n    }, {})\n  );\n\n  const datesMissing: any = useState(\n    Object.values(CovidEventName).reduce((d: any, key: CovidEventName) => {\n      return (d[key] = false), d;\n    }, {})\n  );\n\n  const selections = selectionsState.get();\n  const contagious =\n    selections[CovidEventName.PositiveTest] ||\n    selections[CovidEventName.SymptomsStart];\n  const hovering = useState(false);\n\n  function onCheckboxChange(fieldName: CovidEventName) {\n    return (e: React.BaseSyntheticEvent) => {\n      const checked = e.target.checked;\n      selectionsState[fieldName].set(checked);\n      if (fieldName === CovidEventName.PositiveTest) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.SymptomsStart]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      } else if (fieldName === CovidEventName.SymptomsStart) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.PositiveTest]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      }\n      if (!checked) {\n        covidEventsState[fieldName].set(\"\");\n      }\n    };\n  }\n\n  function buildCovidEventQuestion(\n    fieldName: CovidEventName,\n    questionText: string,\n    tooltip?: JSX.Element\n  ) {\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={questionText}\n          checked={selectionsState[fieldName].get()}\n          onChange={onCheckboxChange(fieldName)}\n          tooltip={tooltip}\n        />\n        {selectionsState[fieldName].get() && (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={covidEventsState[fieldName]}\n            questionFieldName={fieldName}\n            onChange={handleChange}\n            onFocus={() =>\n              props.eventSetterState.set(() => (date: string) =>\n                covidEventsState[fieldName].set(date)\n              )\n            }\n            onUnfocus={() => props.eventSetterState.set(undefined)}\n            missing={datesMissing[fieldName].get()}\n            invalid={datesInvalid[fieldName].get()}\n          />\n        )}\n      </>\n    );\n  }\n\n  function buildSymptomsQuestion() {\n    const symptomsStartState = selectionsState[CovidEventName.SymptomsStart];\n    const symptomsStart = symptomsStartState.get();\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={\"I have shown positive symptoms\"}\n          checked={symptomsStart}\n          onChange={onCheckboxChange(CovidEventName.SymptomsStart)}\n          tooltip={\n            <span>\n              Consult the{\" \"}\n              <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html\">\n                CDC website\n              </a>{\" \"}\n              for a common list of symptoms of Covid.{\" \"}\n            </span>\n          }\n        />\n        {symptomsStart ? (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={\n              covidEventsState[CovidEventName.SymptomsStart]\n            }\n            questionFieldName={CovidEventName.SymptomsStart}\n            onChange={handleChange}\n            onFocus={() =>\n              props.eventSetterState.set(() => (date: string) =>\n                covidEventsState[CovidEventName.SymptomsStart].set(date)\n              )\n            }\n            onUnfocus={() => props.eventSetterState.set(undefined)}\n            missing={datesMissing[CovidEventName.SymptomsStart].get()}\n            invalid={datesInvalid[CovidEventName.SymptomsStart].get()}\n          />\n        ) : null}\n        <div className={\"mb-3\"} />\n        {symptomsStart ? (\n          <MultipleChoiceQuestion\n            id={person.id}\n            questionText={\"My symptoms have been improved for 24 hours.\"}\n            checked={props.personState.noSymptomsFor24Hours.get()}\n            onChange={() => props.personState.noSymptomsFor24Hours.set(c => !c)}\n            tooltip={\n              <span>\n                Improved symptoms are a requirement for you to end isolation. If\n                your symptoms improve AND you have had no fever for 24 hours\n                without the use of medicine, check this box.{\" \"}\n                <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-test-positive-covid-19\">\n                  Link.\n                </a>{\" \"}\n              </span>\n            }\n          />\n        ) : null}\n      </>\n    );\n  }\n\n  const handleChange = (e: React.BaseSyntheticEvent) => {\n    const name: CovidEventName = e.target.name;\n    const value: string = e.target.value;\n    covidEventsState[name].set(value);\n  };\n  const handleSubmit = () => {\n    Object.values(CovidEventName).map((key: CovidEventName) => {\n      datesMissing[key].set(\n        selectionsState.get()[key] && covidEventsState[key].get() === \"\"\n      );\n      datesInvalid[key].set(\n        selectionsState.get()[key] &&\n          covidEventsState[key].get() !== \"\" &&\n          !Boolean(datePattern.exec(covidEventsState[key].get()))\n      );\n    });\n    props.inHouseExposureEventsState.map((e: State<InHouseExposureEvent>) => {\n      e.dateMissing.set(!e.ongoing.get() && e.date.get() === \"\");\n      e.dateInvalid.set(\n        !e.ongoing.get() &&\n          e.date.get() !== \"\" &&\n          !Boolean(datePattern.exec(e.date.get()))\n      );\n    });\n    if (\n      !Object.values(datesMissing.get()).includes(true) &&\n      !Object.values(datesInvalid.get()).includes(true) &&\n      !props.inHouseExposureEventsState\n        .map((e: State<InHouseExposureEvent>) => {\n          return e.dateMissing.get() || e.dateInvalid.get();\n        })\n        .includes(true)\n    ) {\n      props.editingState.set(undefined);\n    }\n  };\n\n  function setContagiousState(contagious: boolean) {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    const newExposureEvents = members.map((otherPerson: PersonData) => {\n      const otherContagious = isContagious(otherPerson);\n      if (person !== otherPerson && contagious !== otherContagious) {\n        return {\n          contagiousPerson: contagious ? person.id : otherPerson.id,\n          quarantinedPerson: contagious ? otherPerson.id : person.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    props.inHouseExposureEventsState.merge(compact(newExposureEvents));\n  }\n\n  const meaningfulInHouseExposures = members.filter(\n    (otherPerson: PersonData) =>\n      person !== otherPerson && contagious !== isContagious(otherPerson)\n  );\n\n  function removeFromMembers() {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    props.personState.set(none);\n  }\n\n  function guidanceMessage(result: CalculationResult) {\n    const date = format(result.endDate, \"MM/dd/yyyy\");\n    if (result.infected) {\n      if (result.person.noSymptomsFor24Hours) {\n        return `Until ${date}`;\n      } else {\n        return `Until at least ${date} and 24 hours after symptoms improve`;\n      }\n    } else {\n      if (result.peopleWithOngoingExposureWithSymptoms?.length) {\n        const names = result.peopleWithOngoingExposureWithSymptoms?.join(\", \");\n        return `Until at least ${date} and 11 days after symptoms improve for ${names}`;\n      } else {\n        return `Until ${date}`;\n      }\n    }\n  }\n\n  function renderFeedback() {\n    return (\n      <div className=\"\">\n        {Object.entries(person.covidEvents).map(\n          ([name, date]: [string, string]) => {\n            if (date !== \"\") {\n              return (\n                <div className=\"f5\">\n                  {name}\n                  {\": \"} {date}\n                </div>\n              );\n            }\n          }\n        )}\n        {Object.values(relevantInHouseExposureEvents).map(\n          (event: InHouseExposureEvent) => {\n            if (event.exposed) {\n              const quarantinedPersonName = members.find(\n                member => member.id === event.quarantinedPerson\n              )?.name;\n              const contagiousPersonName = members.find(\n                member => member.id === event.contagiousPerson\n              )?.name;\n              if (event.ongoing) {\n                return (\n                  <div className=\"f5\">\n                    {quarantinedPersonName} has an ongoing exposure to{\" \"}\n                    {contagiousPersonName}{\" \"}\n                  </div>\n                );\n              } else {\n                return (\n                  <div className=\"f5\">\n                    {quarantinedPersonName} exposed to {contagiousPersonName} at{\" \"}\n                    {event.date}\n                  </div>\n                );\n              }\n            }\n          }\n        )}\n      </div>\n    );\n  }\n\n  function renderEditing() {\n    return (\n      <div className={\"col-md-12\"}>\n        <div className={\"card shadow-sm mb-2\"}>\n          <div className=\"p-2\">\n            <div className=\"mb-3\">\n              <label htmlFor={`${person.id}-name`}>Name</label>\n              <input\n                className=\"form-control\"\n                value={person.name}\n                name=\"name\"\n                id={`${person.id}-name`}\n                type=\"text\"\n                onChange={(e: React.BaseSyntheticEvent) =>\n                  props.personState.name.set(e.target.value)\n                }\n              />\n            </div>\n            <div className=\"mb-3\">\n              {buildCovidEventQuestion(\n                CovidEventName.LastCloseContact,\n                \"I have had close contact to someone presumed covid positive (outside the household)\",\n                <div>\n                  Close contact means any of the following:\n                  <ul className=\"mx-3 mb-1\">\n                    <li>\n                      You were within 6 feet of them for a total of 15 minutes\n                      or more\n                    </li>\n                    <li>You provided care at home to the person</li>\n                    <li>\n                      You had direct physical contact with the person (hugged or\n                      kissed them)\n                    </li>\n                    <li>You shared eating or drinking utensils</li>\n                    <li>\n                      They sneezed, coughed, or somehow got respiratory droplets\n                      on you\n                    </li>\n                  </ul>{\" \"}\n                  <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n                    Link.\n                  </a>\n                </div>\n              )}\n              <hr />\n            </div>\n            <div className=\"mb-3\">\n              {buildCovidEventQuestion(\n                CovidEventName.PositiveTest,\n                \"I have received a positive test result\"\n              )}\n              <hr />\n            </div>\n            <div className=\"mb-3\">\n              {buildSymptomsQuestion()}\n              <hr />\n            </div>\n            <InHouseExposureQuestions\n              id={person.id}\n              meaningfulInHouseExposures={meaningfulInHouseExposures}\n              relevantInHouseExposureEventsState={\n                relevantInHouseExposureEventsState\n              }\n              eventSetterState={props.eventSetterState}\n            />\n            <div\n              className={\"d-flex justify-content-between align-items-center\"}\n            >\n              <button\n                className=\"btn btn-secondary\"\n                onClick={() => {\n                  removeFromMembers();\n                  props.editingState.set(undefined);\n                }}\n              >\n                <span className=\"visually-hidden\">Remove</span>\n                Remove\n                <i\n                  aria-hidden=\"true\"\n                  className=\"pl2 fas fa-times-circle white\"\n                ></i>\n              </button>\n              <button className=\"btn btn-primary\" onClick={handleSubmit}>\n                {person.isNewPerson ? \"Submit\" : \"Update\"}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderNonEditing() {\n    return (\n      <div className={\"col-md-6\"}>\n        <div className={\"card shadow-sm mb-2\"}>\n          <div\n            className=\"card-body\"\n            onMouseEnter={() => {\n              hovering.set(true);\n            }}\n            onMouseLeave={() => {\n              hovering.set(false);\n            }}\n          >\n            <div className={\"\"}>\n              <h4 className=\"d-flex justify-content-between align-items-center\">\n                <span className=\"\">\n                  {person.name + \"\"}\n                  {isValid(props.guidance.endDate) && props.guidance.infected\n                    ? \" - Isolate\"\n                    : \" - Quarantine\"}\n                </span>\n                <span>\n                  {!editing && (\n                    <button onClick={() => props.editingState.set(person.id)}>\n                      <span className=\"visually-hidden\">Edit Person</span>\n                      <span aria-hidden=\"true\" className=\"f5 fas fa-pen\"></span>\n                    </button>\n                  )}\n                </span>\n              </h4>\n              {isValid(props.guidance.endDate) && (\n                <div className=\"p32\">{guidanceMessage(props.guidance)}</div>\n              )}\n            </div>\n            <div className={\"my-3\"} />\n            {hovering.get() && renderFeedback()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return props.editingState.get() === person.id\n    ? renderEditing()\n    : renderNonEditing();\n}\n","import React from \"react\";\nimport {\n  CalculationResult,\n  colors,\n  InHouseExposureEvent,\n  PersonData\n} from \"./types\";\nimport Person from \"./Person\";\nimport { State } from \"@hookstate/core\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { format, isValid } from \"date-fns\";\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingState: State<number | undefined>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n  height: State<number>;\n}\n\nexport default function Household(props: Props) {\n  const editing = props.editingState.get();\n  const members = props.membersState.get();\n  const inHouseExposureEvents = props.inHouseExposureEventsState.get();\n  const guidance = computeHouseHoldQuarantinePeriod(\n    members,\n    inHouseExposureEvents\n  );\n\n  return (\n    <>\n      <div className={\"\"} style={{ minHeight: props.height.get() + \"px\" }}>\n        <div className={\"row\"}>\n          {props.membersState.map((personState: State<PersonData>) => {\n            const person = personState.get();\n            const id = person.id;\n            const personGuidance = guidance.find(c => c.person.id === id);\n            if (personGuidance) {\n              return (\n                <Person\n                  key={id}\n                  personState={personState}\n                  membersState={props.membersState}\n                  inHouseExposureEventsState={props.inHouseExposureEventsState}\n                  editingState={props.editingState}\n                  eventSetterState={props.eventSetterState}\n                  guidance={personGuidance}\n                />\n              );\n            }\n          })}\n        </div>\n        {!editing && (\n          <button\n            className=\"btn btn-lg btn-primary my-2\"\n            onClick={props.addNewPerson}\n          >\n            <i className=\"fa fa-user-plus\" aria-hidden=\"true\"></i> Add Person\n          </button>\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useState } from \"@hookstate/core\";\nimport GridView from \"./GridView\";\nimport Household from \"./Household\";\nimport { CovidEventName, InHouseExposureEvent, PersonData } from \"./types\";\nimport { compact } from \"lodash/fp\";\nimport { getRandomInt, isContagious } from \"./util\";\n\nexport default function App() {\n  const height = useState(window.innerHeight);\n  const updateHeight = () => {\n    height.set(window.innerHeight);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateHeight);\n    return () => window.removeEventListener(\"resize\", updateHeight);\n  }, []);\n  const members = useState([] as PersonData[]);\n  const inHouseExposureEvents = useState<InHouseExposureEvent[]>([]);\n  const editing = useState<number | undefined>(undefined);\n  const id = useState(members.length + 1);\n  const eventSetterState = useState<((date: string) => void) | undefined>(\n    undefined\n  );\n\n  function addNewPerson() {\n    const currentId = id.get();\n    const newPerson = {\n      id: currentId,\n      name: `Person ${getRandomInt(1000)}`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      noSymptomsFor24Hours: true,\n      isNewPerson: true,\n      editing: true\n    };\n    id.set(id => id + 1);\n    members.set(members => [...members, newPerson]);\n    editing.set(currentId);\n    const newExposureEvents = members.get().map((person: PersonData) => {\n      if (isContagious(person)) {\n        return {\n          contagiousPerson: person.id,\n          quarantinedPerson: newPerson.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    inHouseExposureEvents.merge(compact(newExposureEvents));\n  }\n\n  function renderTitle() {\n    if (members.get().length) {\n      if (editing.get()) {\n        return <h3>Please fill out questions.</h3>;\n      } else {\n        return <h3>Here's our recommendation for your household.</h3>;\n      }\n    } else {\n      return <h3>Get quarantine and isolation guidance for your household.</h3>;\n    }\n  }\n\n  return (\n    <>\n      <main className={\"container\"}>\n        <div className={\"row my-4\"}>\n          <div className={\"col-md-6\"}>\n            <div>Covid Quarantine Calculator [Work in Progress]</div>\n            {renderTitle()}\n          </div>\n          <div className={\"col-md-6\"} />\n        </div>\n        <Household\n          membersState={members}\n          inHouseExposureEventsState={inHouseExposureEvents}\n          editingState={editing}\n          eventSetterState={eventSetterState}\n          addNewPerson={addNewPerson}\n          height={height}\n        />\n        <div className={\"my-5\"} />\n        <GridView\n          membersState={members}\n          editing={editing.get()}\n          eventSetterState={eventSetterState}\n          inHouseExposureEvents={inHouseExposureEvents.get()}\n        />\n        <hr />\n        <footer>\n          <div>\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/isolation.html\">\n              Link\n            </a>{\" \"}\n            to CDC guidelines on isolation.\n          </div>\n          <div className=\"\">\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n              Link\n            </a>{\" \"}\n            to CDC guidelines on quarantine.\n          </div>\n          <p>\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n        </footer>\n      </main>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}