{"version":3,"sources":["types.ts","DateQuestion.tsx","MultipleChoiceQuestion.tsx","InHouseExposureQuestion.tsx","InHouseExposureQuestions.tsx","util.tsx","Person.tsx","calculator.ts","Household.tsx","GridView.tsx","Home.tsx","App.tsx","index.tsx"],"names":["CovidEventName","colors","DateQuestion","props","twoDigitYearPattern","RegExp","dayMonthPattern","className","htmlFor","id","questionFieldName","role","missing","invalid","value","questionFieldTextState","get","name","type","onChange","e","onFocus","onBlur","fixedDate","exec","slice","set","onUnfocus","MultipleChoiceQuestion","checked","questionText","tooltip","aria-hidden","InHouseExposureQuestion","inHouseExposureEvent","inHouseExposureEventState","isExposed","exposed","isOngoing","ongoing","person","otherPerson","v","date","index","target","eventSetterState","undefined","dateMissing","dateInvalid","InHouseExposureQuestions","meaningfulInHouseExposures","map","relevantInHouseExposureEventsState","find","eventState","event","quarantinedPerson","contagiousPerson","key","getRandomInt","max","Math","floor","random","isContagious","Boolean","covidEvents","PositiveTest","SymptomsStart","Person","personState","members","membersState","covidEventsState","editingPerson","editingPersonState","editingHousehold","editingHouseholdState","inHouseExposureEventsState","filter","relevantInHouseExposureEvents","selectionsState","useState","Object","values","reduce","selections","datePattern","datesInvalid","d","datesMissing","contagious","onCheckboxChange","fieldName","nextContagious","setContagiousState","buildCovidEventQuestion","handleChange","handleSubmit","includes","none","newExposureEvents","otherContagious","merge","compact","LastCloseContact","href","symptomsStart","noSymptomsFor24Hours","c","buildSymptomsQuestion","onClick","isNewPerson","isValid","guidance","endDate","infected","result","format","peopleWithOngoingExposureWithSymptoms","length","names","join","guidanceMessage","entries","quarantinedPersonName","member","contagiousPersonName","computeHouseHoldQuarantinePeriod","household","inHouseExposureEvents","flow","isolationEndDate","covidPositiveEvents","illnessOnset","parse","Date","thru","dates","min","tenDaysAfterOnset","addDays","symptomsEnd","computeIsolationPeriod","partition","quarantinedCalculations","calculation","lastExposureDate","outHouseExposureDateString","outHouseExposureDate","latestExposureDate","personWithOngoingExposure","fourteenDaysFromLastExposure","Household","style","display","flexWrap","minHeight","height","to","personGuidance","addNewPerson","GridView","eventSetter","plugins","dayGridPlugin","interactionPlugin","initialView","events","classNames","title","start","parseISO","end","color","textColor","computeEvents","dateClick","info","Home","App","window","innerHeight","updateHeight","useEffect","addEventListener","removeEventListener","basename","process","path","currentId","newPerson","editing","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.dd3ffaf3.chunk.js","sourcesContent":["export interface PersonData {\n  id: number;\n  name: string;\n  covidEvents: CovidEvents;\n  noSymptomsFor24Hours: boolean;\n  isNewPerson: boolean;\n  editing: boolean;\n}\n\nexport enum CovidEventName {\n  LastCloseContact = \"Most Recent Close Contact\",\n  SymptomsStart = \"Illness Onset\",\n  PositiveTest = \"Most Recent Positive Test\"\n}\n\nexport type CovidEvents = {\n  [key in CovidEventName]: string;\n};\n\nexport interface InHouseExposureEvent {\n  contagiousPerson: number;\n  quarantinedPerson: number;\n  exposed: boolean;\n  ongoing: boolean;\n  date: string;\n  dateMissing: boolean;\n  dateInvalid: boolean;\n}\n\nexport interface CalculationResult {\n  person: PersonData;\n  endDate: Date;\n  peopleWithOngoingExposureWithSymptoms?: string[];\n  infected?: boolean;\n}\n\nexport const colors = [\n  \"#b35806\",\n  \"#e08214\",\n  \"#fdb863\",\n  \"#fee0b6\",\n  \"#d8daeb\",\n  \"#b2abd2\",\n  \"#8073ac\",\n  \"#542788\"\n];\n","import React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  id: number;\n  questionFieldTextState: State<string>;\n  questionFieldName: string;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  onFocus: () => void;\n  onUnfocus: () => void;\n  missing: boolean;\n  invalid: boolean;\n}\n\nexport default function DateQuestion(props: Props) {\n  const twoDigitYearPattern = new RegExp(\n    \"^([0-9][0-9]?/[0-9][0-9]?/)([0-9][0-9])$\"\n  );\n  const dayMonthPattern = new RegExp(\"^[0-9][0-9]?/[0-9][0-9]?$\");\n\n  const handleTextChange = (e: React.BaseSyntheticEvent) => {\n    props.onChange(e);\n  };\n\n  const handleUnfocus = () => {\n    let fixedDate = props.questionFieldTextState.get();\n    const twoDigitYearMatch = twoDigitYearPattern.exec(fixedDate);\n    if (twoDigitYearMatch) {\n      fixedDate = fixedDate.slice(0, -2) + \"20\" + fixedDate.slice(-2);\n    }\n    const dayMonthMatch = dayMonthPattern.exec(fixedDate);\n    if (dayMonthMatch) {\n      fixedDate = fixedDate + \"/2020\";\n    }\n    props.questionFieldTextState.set(fixedDate);\n    props.onUnfocus();\n  };\n  return (\n    <div className=\"\">\n      <label htmlFor={`${props.id}-${props.questionFieldName}`}>\n        Date <span className=\"f6 fw3\">mm/dd/yyyy</span>\n        <div role=\"alert\">\n          {props.missing ? (\n            <span className=\"f5 fw5 red\">required</span>\n          ) : props.invalid ? (\n            <span className=\"f5 fw5 red\">mm/dd/yyyy format required</span>\n          ) : null}\n        </div>\n      </label>\n      <input\n        className=\"form-control\"\n        value={props.questionFieldTextState.get()}\n        name={props.questionFieldName}\n        id={`${props.id}-${props.questionFieldName}`}\n        type=\"text\"\n        onChange={handleTextChange}\n        onFocus={props.onFocus}\n        onBlur={handleUnfocus}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { parse, format } from \"date-fns\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel\n} from \"@reach/disclosure\";\n\ninterface Props {\n  id: number;\n  questionText: string;\n  checked: boolean;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  tooltip?: JSX.Element;\n}\n\nexport default function MultipleChoiceQuestion(props: Props) {\n  return (\n    <div className=\"custom-control custom-checkbox mb-3\">\n      <input\n        className=\"custom-control-input\"\n        checked={props.checked}\n        id={`checkbox-${props.id}-${props.questionText}`}\n        type=\"checkbox\"\n        onChange={props.onChange}\n      />\n      <Disclosure>\n        <label\n          className=\"custom-control-label\"\n          htmlFor={`checkbox-${props.id}-${props.questionText}`}\n        >\n          {props.questionText}\n          {props.tooltip && (\n            <DisclosureButton>\n              <i\n                aria-hidden=\"true\"\n                className=\"px-1 fas fa-question-circle link hover-dark-blue gray\"\n              ></i>\n            </DisclosureButton>\n          )}\n        </label>\n        {props.tooltip && (\n          <DisclosurePanel>\n            <div className=\"f5 gray\">{props.tooltip}</div>\n          </DisclosurePanel>\n        )}\n      </Disclosure>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { InHouseExposureEvent, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport DateQuestion from \"./DateQuestion\";\n\ninterface Props {\n  id: number;\n  index: number;\n  person: PersonData;\n  otherPerson: PersonData;\n  inHouseExposureEventState: State<InHouseExposureEvent>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function InHouseExposureQuestion(props: Props) {\n  const inHouseExposureEvent = props.inHouseExposureEventState.get();\n  const isExposed = inHouseExposureEvent.exposed;\n  const isOngoing = inHouseExposureEvent.ongoing;\n  return (\n    <div className=\"mb-3\">\n      <MultipleChoiceQuestion\n        id={props.id}\n        questionText={`${props.person.name} had close contact with ${props.otherPerson.name}`}\n        checked={isExposed}\n        onChange={() => props.inHouseExposureEventState.exposed.set(v => !v)}\n      />\n      {isExposed && (\n        <MultipleChoiceQuestion\n          id={props.id}\n          questionText={`${props.person.name}'s close contact with ${props.otherPerson.name} is ongoing`}\n          checked={isOngoing}\n          onChange={() => props.inHouseExposureEventState.ongoing.set(v => !v)}\n        />\n      )}\n      {isExposed && !isOngoing && (\n        <DateQuestion\n          id={props.id}\n          questionFieldTextState={props.inHouseExposureEventState.date}\n          questionFieldName={`crossExposure-${props.index}`}\n          onChange={(e: React.BaseSyntheticEvent) =>\n            props.inHouseExposureEventState.date.set(e.target.value)\n          }\n          onFocus={() =>\n            props.eventSetterState.set(() => (date: string) => {\n              props.inHouseExposureEventState.date.set(date);\n            })\n          }\n          onUnfocus={() => props.eventSetterState.set(undefined)}\n          missing={inHouseExposureEvent.dateMissing}\n          invalid={inHouseExposureEvent.dateInvalid}\n        />\n      )}\n    </div>\n  );\n}\n","import { InHouseExposureEvent, PersonData } from \"./types\";\nimport InHouseExposureQuestion from \"./InHouseExposureQuestion\";\nimport React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  person: PersonData;\n  meaningfulInHouseExposures: PersonData[];\n  relevantInHouseExposureEventsState: State<InHouseExposureEvent>[];\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function InHouseExposureQuestions(props: Props) {\n  return (\n    <>\n      {props.meaningfulInHouseExposures.map((otherPerson, index) => {\n        const inHouseExposureEventState = props.relevantInHouseExposureEventsState.find(\n          (eventState: State<InHouseExposureEvent>) => {\n            const event = eventState.get();\n            return (\n              event.quarantinedPerson === otherPerson.id ||\n              event.contagiousPerson === otherPerson.id\n            );\n          }\n        );\n        if (inHouseExposureEventState) {\n          return (\n            <>\n              <InHouseExposureQuestion\n                key={props.person.id + \"-\" + index}\n                id={props.person.id}\n                index={index}\n                person={props.person}\n                otherPerson={otherPerson}\n                inHouseExposureEventState={inHouseExposureEventState}\n                eventSetterState={props.eventSetterState}\n              />\n              <hr />\n            </>\n          );\n        } else {\n          return <></>;\n        }\n      })}\n    </>\n  );\n}\n","import { flow, remove, concat } from \"lodash/fp\";\nimport { CovidEventName, PersonData } from \"./types\";\n\nexport function replace<T>(array: Array<T>, old: T, updated: T): Array<T> {\n  return flow(\n    remove(e => e === old),\n    concat([updated])\n  )(array);\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function isContagious(person: PersonData) {\n  return Boolean(\n    person.covidEvents[CovidEventName.PositiveTest] ||\n      person.covidEvents[CovidEventName.SymptomsStart]\n  );\n}\n","import React from \"react\";\nimport { useState, none, State } from \"@hookstate/core\";\n\nimport {\n  CovidEventName,\n  InHouseExposureEvent,\n  PersonData,\n  CalculationResult\n} from \"./types\";\nimport DateQuestion from \"./DateQuestion\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport InHouseExposureQuestions from \"./InHouseExposureQuestions\";\nimport { compact } from \"lodash/fp\";\nimport { isContagious } from \"./util\";\nimport { format, isValid } from \"date-fns\";\n\ninterface Props {\n  personState: State<PersonData>;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingHouseholdState: State<boolean>;\n  editingPersonState: State<number | undefined>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n  guidance: CalculationResult;\n}\n\nexport default function Person(props: Props) {\n  const person = props.personState.get();\n  const members = props.membersState.get();\n  const covidEventsState = props.personState.covidEvents;\n  const editingPerson = props.editingPersonState.get();\n  const editingHousehold = props.editingHouseholdState.get();\n  const relevantInHouseExposureEventsState: State<\n    InHouseExposureEvent\n  >[] = props.inHouseExposureEventsState.filter(\n    (eventState: State<InHouseExposureEvent>) => {\n      const event: InHouseExposureEvent = eventState.get();\n      return (\n        event.contagiousPerson === person.id ||\n        event.quarantinedPerson === person.id\n      );\n    }\n  );\n  const relevantInHouseExposureEvents = relevantInHouseExposureEventsState.map(\n    e => e.get()\n  );\n  const selectionsState: any = useState(\n    Object.values(CovidEventName).reduce(\n      (selections: any, key: CovidEventName) => (\n        (selections[key] = covidEventsState[key].get() !== \"\"), selections\n      ),\n      {}\n    )\n  );\n  const datePattern = new RegExp(\n    \"^[0-9][0-9]?/[0-9][0-9]?/[0-9][0-9][0-9][0-9]$\"\n  );\n  const datesInvalid: any = useState(\n    Object.values(CovidEventName).reduce((d: any, key: CovidEventName) => {\n      return (d[key] = false), d;\n    }, {})\n  );\n\n  const datesMissing: any = useState(\n    Object.values(CovidEventName).reduce((d: any, key: CovidEventName) => {\n      return (d[key] = false), d;\n    }, {})\n  );\n\n  const selections = selectionsState.get();\n  const contagious =\n    selections[CovidEventName.PositiveTest] ||\n    selections[CovidEventName.SymptomsStart];\n\n  function onCheckboxChange(fieldName: CovidEventName) {\n    return (e: React.BaseSyntheticEvent) => {\n      const checked = e.target.checked;\n      selectionsState[fieldName].set(checked);\n      if (fieldName === CovidEventName.PositiveTest) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.SymptomsStart]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      } else if (fieldName === CovidEventName.SymptomsStart) {\n        const nextContagious = Boolean(\n          checked || selections[CovidEventName.PositiveTest]\n        );\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      }\n      if (!checked) {\n        covidEventsState[fieldName].set(\"\");\n      }\n    };\n  }\n\n  function buildCovidEventQuestion(\n    fieldName: CovidEventName,\n    questionText: string,\n    tooltip?: JSX.Element\n  ) {\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={questionText}\n          checked={selectionsState[fieldName].get()}\n          onChange={onCheckboxChange(fieldName)}\n          tooltip={tooltip}\n        />\n        {selectionsState[fieldName].get() && (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={covidEventsState[fieldName]}\n            questionFieldName={fieldName}\n            onChange={handleChange}\n            onFocus={() =>\n              props.eventSetterState.set(() => (date: string) =>\n                covidEventsState[fieldName].set(date)\n              )\n            }\n            onUnfocus={() => props.eventSetterState.set(undefined)}\n            missing={datesMissing[fieldName].get()}\n            invalid={datesInvalid[fieldName].get()}\n          />\n        )}\n      </>\n    );\n  }\n\n  function buildSymptomsQuestion() {\n    const symptomsStartState = selectionsState[CovidEventName.SymptomsStart];\n    const symptomsStart = symptomsStartState.get();\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={`${person.name} has shown positive symptoms`}\n          checked={symptomsStart}\n          onChange={onCheckboxChange(CovidEventName.SymptomsStart)}\n          tooltip={\n            <span>\n              Consult the{\" \"}\n              <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html\">\n                CDC website\n              </a>{\" \"}\n              for a common list of symptoms of Covid.{\" \"}\n            </span>\n          }\n        />\n        {symptomsStart ? (\n          <DateQuestion\n            id={person.id}\n            questionFieldTextState={\n              covidEventsState[CovidEventName.SymptomsStart]\n            }\n            questionFieldName={CovidEventName.SymptomsStart}\n            onChange={handleChange}\n            onFocus={() =>\n              props.eventSetterState.set(() => (date: string) =>\n                covidEventsState[CovidEventName.SymptomsStart].set(date)\n              )\n            }\n            onUnfocus={() => props.eventSetterState.set(undefined)}\n            missing={datesMissing[CovidEventName.SymptomsStart].get()}\n            invalid={datesInvalid[CovidEventName.SymptomsStart].get()}\n          />\n        ) : null}\n        <div className={\"mb-3\"} />\n        {symptomsStart ? (\n          <MultipleChoiceQuestion\n            id={person.id}\n            questionText={`${person.name}'s symptoms have been improved for 24 hours.`}\n            checked={props.personState.noSymptomsFor24Hours.get()}\n            onChange={() => props.personState.noSymptomsFor24Hours.set(c => !c)}\n            tooltip={\n              <span>\n                Improved symptoms are a requirement for you to end isolation. If\n                your symptoms improve AND you have had no fever for 24 hours\n                without the use of medicine, check this box.{\" \"}\n                <a href=\"https://multco.us/novel-coronavirus-covid-19/if-you-test-positive-covid-19\">\n                  Link.\n                </a>{\" \"}\n              </span>\n            }\n          />\n        ) : null}\n      </>\n    );\n  }\n\n  const handleChange = (e: React.BaseSyntheticEvent) => {\n    const name: CovidEventName = e.target.name;\n    const value: string = e.target.value;\n    covidEventsState[name].set(value);\n  };\n  const handleSubmit = () => {\n    Object.values(CovidEventName).map((key: CovidEventName) => {\n      datesMissing[key].set(\n        selectionsState.get()[key] && covidEventsState[key].get() === \"\"\n      );\n      datesInvalid[key].set(\n        selectionsState.get()[key] &&\n          covidEventsState[key].get() !== \"\" &&\n          !Boolean(datePattern.exec(covidEventsState[key].get()))\n      );\n    });\n    props.inHouseExposureEventsState.map((e: State<InHouseExposureEvent>) => {\n      e.dateMissing.set(!e.ongoing.get() && e.date.get() === \"\");\n      e.dateInvalid.set(\n        !e.ongoing.get() &&\n          e.date.get() !== \"\" &&\n          !Boolean(datePattern.exec(e.date.get()))\n      );\n    });\n    if (\n      !Object.values(datesMissing.get()).includes(true) &&\n      !Object.values(datesInvalid.get()).includes(true) &&\n      !props.inHouseExposureEventsState\n        .map((e: State<InHouseExposureEvent>) => {\n          return e.dateMissing.get() || e.dateInvalid.get();\n        })\n        .includes(true)\n    ) {\n      props.editingPersonState.set(undefined);\n    }\n  };\n\n  function setContagiousState(contagious: boolean) {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    const newExposureEvents = members.map((otherPerson: PersonData) => {\n      const otherContagious = isContagious(otherPerson);\n      if (person !== otherPerson && contagious !== otherContagious) {\n        return {\n          contagiousPerson: contagious ? person.id : otherPerson.id,\n          quarantinedPerson: contagious ? otherPerson.id : person.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    props.inHouseExposureEventsState.merge(compact(newExposureEvents));\n  }\n\n  const meaningfulInHouseExposures = members.filter(\n    (otherPerson: PersonData) =>\n      person !== otherPerson && contagious !== isContagious(otherPerson)\n  );\n\n  function removeFromMembers() {\n    relevantInHouseExposureEventsState.map(e => e.set(none)); // Remove all current exposures\n    props.personState.set(none);\n  }\n\n  function renderGuidance() {\n    if (editingHousehold) {\n      return null;\n    } else {\n      return isValid(props.guidance.endDate) && props.guidance.infected\n        ? \" - Isolate\"\n        : \" - Quarantine\";\n    }\n  }\n\n  function guidanceMessage(result: CalculationResult) {\n    const date = format(result.endDate, \"MM/dd/yyyy\");\n    if (result.infected) {\n      if (result.person.noSymptomsFor24Hours) {\n        return `Until ${date}`;\n      } else {\n        return `Until at least ${date} and 24 hours after symptoms improve`;\n      }\n    } else {\n      if (result.peopleWithOngoingExposureWithSymptoms?.length) {\n        const names = result.peopleWithOngoingExposureWithSymptoms?.join(\", \");\n        return `Until at least ${date} and 14 days after isolation period ends for ${names}`;\n      } else {\n        return `Until ${date}`;\n      }\n    }\n  }\n\n  function renderFeedback() {\n    return (\n      <div className=\"\">\n        {Object.entries(person.covidEvents).map(\n          ([name, date]: [string, string]) => {\n            if (date !== \"\") {\n              return (\n                <div className=\"f5\">\n                  {name}\n                  {\": \"} {date}\n                </div>\n              );\n            }\n          }\n        )}\n        {Object.values(relevantInHouseExposureEvents).map(\n          (event: InHouseExposureEvent) => {\n            if (event.exposed) {\n              const quarantinedPersonName = members.find(\n                member => member.id === event.quarantinedPerson\n              )?.name;\n              const contagiousPersonName = members.find(\n                member => member.id === event.contagiousPerson\n              )?.name;\n              if (event.ongoing) {\n                return (\n                  <div className=\"f5\">\n                    {quarantinedPersonName} has an ongoing exposure to{\" \"}\n                    {contagiousPersonName}{\" \"}\n                  </div>\n                );\n              } else {\n                return (\n                  <div className=\"f5\">\n                    {quarantinedPersonName} exposed to {contagiousPersonName} at{\" \"}\n                    {event.date}\n                  </div>\n                );\n              }\n            }\n          }\n        )}\n      </div>\n    );\n  }\n\n  function renderEditing() {\n    return (\n      <div className={\"card shadow-sm mb-2\"}>\n        <div className=\"p-2\">\n          <div className=\"mb-3\">\n            <label htmlFor={`${person.id}-name`}>Name</label>\n            <input\n              className=\"form-control\"\n              value={person.name}\n              name=\"name\"\n              id={`${person.id}-name`}\n              type=\"text\"\n              onChange={(e: React.BaseSyntheticEvent) =>\n                props.personState.name.set(e.target.value)\n              }\n            />\n          </div>\n          <div className=\"mb-3\">\n            {buildCovidEventQuestion(\n              CovidEventName.LastCloseContact,\n              `${person.name} has had close contact to someone presumed covid positive (outside the household)`,\n              <div>\n                Close contact means any of the following:\n                <ul className=\"mx-3 mb-1\">\n                  <li>\n                    You were within 6 feet of them for a total of 15 minutes or\n                    more\n                  </li>\n                  <li>You provided care at home to the person</li>\n                  <li>\n                    You had direct physical contact with the person (hugged or\n                    kissed them)\n                  </li>\n                  <li>You shared eating or drinking utensils</li>\n                  <li>\n                    They sneezed, coughed, or somehow got respiratory droplets\n                    on you\n                  </li>\n                </ul>{\" \"}\n                <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n                  Link.\n                </a>\n              </div>\n            )}\n            <hr />\n          </div>\n          <div className=\"mb-3\">\n            {buildCovidEventQuestion(\n              CovidEventName.PositiveTest,\n              `${person.name} has received a positive test result`\n            )}\n            <hr />\n          </div>\n          <div className=\"mb-3\">\n            {buildSymptomsQuestion()}\n            <hr />\n          </div>\n          <InHouseExposureQuestions\n            person={person}\n            meaningfulInHouseExposures={meaningfulInHouseExposures}\n            relevantInHouseExposureEventsState={\n              relevantInHouseExposureEventsState\n            }\n            eventSetterState={props.eventSetterState}\n          />\n          <div className={\"d-flex justify-content-between align-items-center\"}>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => {\n                removeFromMembers();\n                props.editingPersonState.set(undefined);\n              }}\n            >\n              <span className=\"visually-hidden\">Remove</span>\n              Remove\n              <i\n                aria-hidden=\"true\"\n                className=\"pl2 fas fa-times-circle white\"\n              ></i>\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleSubmit}>\n              {person.isNewPerson ? \"Submit\" : \"Update\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderNonEditing() {\n    return (\n      <div className={\"card shadow-sm mb-2\"}>\n        <div className=\"card-body\">\n          <div className={\"\"}>\n            <h4 className=\"d-flex justify-content-between align-items-center\">\n              <span className=\"\">\n                {person.name + \"\"}\n                {renderGuidance()}\n              </span>\n              <span>\n                {!editingPerson && (\n                  <button\n                    onClick={() => {\n                      props.editingHouseholdState.set(true);\n                      props.editingPersonState.set(person.id);\n                    }}\n                  >\n                    <span className=\"visually-hidden\">Edit Person</span>\n                    <span aria-hidden=\"true\" className=\"f5 fas fa-pen\"></span>\n                  </button>\n                )}\n              </span>\n            </h4>\n            {!editingHousehold && isValid(props.guidance.endDate) && (\n              <p className=\"lead text-muted\">\n                {guidanceMessage(props.guidance)}\n              </p>\n            )}\n          </div>\n          <div className={\"my-3\"} />\n          {editingHousehold && renderFeedback()}\n        </div>\n      </div>\n    );\n  }\n\n  return editingPerson === person.id ? renderEditing() : renderNonEditing();\n}\n","import {\n  CalculationResult,\n  CovidEventName,\n  InHouseExposureEvent,\n  PersonData\n} from \"./types\";\nimport { addDays, max, min, isValid, parse } from \"date-fns\";\nimport { flow, compact, map, thru, partition, filter } from \"lodash/fp\";\n\nexport function computeHouseHoldQuarantinePeriod(\n  household: PersonData[],\n  inHouseExposureEvents: InHouseExposureEvent[]\n): CalculationResult[] {\n  const [infected, quarantined] = flow(\n    map((person: PersonData) => {\n      const isolationEndDate = computeIsolationPeriod(person);\n      if (isValid(isolationEndDate)) {\n        return {\n          person: person,\n          endDate: isolationEndDate,\n          infected: true\n        };\n      } else {\n        return {\n          person: person,\n          endDate: new Date(),\n          infected: false\n        };\n      }\n    }),\n    partition(c => c.infected)\n  )(household);\n  const quarantinedCalculations: CalculationResult[] = quarantined.map(\n    calculation => {\n      const person = calculation.person;\n      const relevantInHouseExposureEvents = filter(\n        (event: InHouseExposureEvent) =>\n          event.quarantinedPerson === person.id && event.exposed\n      )(inHouseExposureEvents);\n      const lastExposureDate = map((event: InHouseExposureEvent) => {\n        if (event.ongoing) {\n          return infected.find(\n            calculation => calculation.person.id === event.contagiousPerson\n          )?.endDate;\n        } else {\n          return parse(event.date, \"M/dd/yyyy\", new Date());\n        }\n      });\n      const outHouseExposureDateString =\n        person.covidEvents[CovidEventName.LastCloseContact];\n      const outHouseExposureDate = outHouseExposureDateString\n        ? parse(outHouseExposureDateString, \"M/dd/yyyy\", new Date())\n        : undefined;\n      const latestExposureDate = max(\n        compact([\n          ...lastExposureDate(relevantInHouseExposureEvents),\n          outHouseExposureDate\n        ])\n      );\n      const peopleWithOngoingExposureWithSymptoms = flow(\n        map((event: InHouseExposureEvent) => {\n          if (event.ongoing) {\n            const personWithOngoingExposure = infected.find(\n              calculation => calculation.person.id === event.contagiousPerson\n            )?.person;\n            if (!personWithOngoingExposure?.noSymptomsFor24Hours) {\n              return personWithOngoingExposure?.name;\n            }\n          }\n        }),\n        compact\n      )(relevantInHouseExposureEvents);\n      const fourteenDaysFromLastExposure = addDays(latestExposureDate, 14);\n      return {\n        person: person,\n        endDate: fourteenDaysFromLastExposure,\n        peopleWithOngoingExposureWithSymptoms: peopleWithOngoingExposureWithSymptoms,\n        infected: false\n      };\n    }\n  );\n  return [...infected, ...quarantinedCalculations];\n}\n\nexport function computeIsolationPeriod(person: PersonData): Date {\n  const covidPositiveEvents = [\n    person.covidEvents[CovidEventName.SymptomsStart],\n    person.covidEvents[CovidEventName.PositiveTest]\n  ];\n  const illnessOnset = flow(\n    compact,\n    map((date: string) => parse(date, \"M/dd/yyyy\", new Date())),\n    thru((dates: Date[]) => min(dates))\n  )(covidPositiveEvents);\n  const tenDaysAfterOnset = illnessOnset && addDays(illnessOnset, 10);\n  const symptomsEnd = person.noSymptomsFor24Hours ? undefined : new Date(); // TODO: Rethink\n  const isolationEndDate = flow(\n    compact,\n    thru((dates: Date[]) => max(dates))\n  )([tenDaysAfterOnset, symptomsEnd]);\n  return isolationEndDate;\n}\n","import React from \"react\";\nimport { InHouseExposureEvent, PersonData } from \"./types\";\nimport Person from \"./Person\";\nimport { State } from \"@hookstate/core\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  editingHouseholdState: State<boolean>;\n  editingPersonState: State<number | undefined>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n  height: State<number>;\n}\n\nexport default function Household(props: Props) {\n  const editingHousehold = props.editingHouseholdState.get();\n  const editingPerson = props.editingPersonState.get();\n  const members = props.membersState.get();\n  const inHouseExposureEvents = props.inHouseExposureEventsState.get();\n  const guidance = computeHouseHoldQuarantinePeriod(\n    members,\n    inHouseExposureEvents\n  );\n\n  function renderTitle() {\n    if (editingHousehold) {\n      return (\n        <>\n          <h2>Add your household</h2>\n          <p className=\"lead text-muted\">\n            Be sure to add everyone in your household.\n          </p>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h2>Our recommendation</h2>\n          <p className=\"lead text-muted\">\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n        </>\n      );\n    }\n  }\n\n  function renderAction() {\n    if (editingHousehold) {\n      return (\n        <button\n          className=\"btn btn-primary my-3\"\n          onClick={() => props.editingHouseholdState.set(false)}\n        >\n          Get recommendation\n        </button>\n      );\n    } else {\n      return (\n        <Link to=\"/\">\n          <button className=\"btn btn-primary my-3\">See on calendar</button>\n        </Link>\n      );\n    }\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          minHeight: props.height.get() + \"px\"\n        }}\n      >\n        <div className={\"col-md-6\"}>\n          <header>\n            <div className=\"navbar household\">\n              <div className=\"container d-flex justify-content-between\">\n                <div />\n                <Link to=\"/\" className={\"my-2\"}>\n                  Close\n                </Link>\n              </div>\n            </div>\n          </header>\n          <div className={\"container\"}>\n            <div className={\"my-3\"} />\n            {renderTitle()}\n            <div>\n              {props.membersState.map((personState: State<PersonData>) => {\n                const person = personState.get();\n                const id = person.id;\n                const personGuidance = guidance.find(c => c.person.id === id);\n                if (personGuidance) {\n                  return (\n                    <Person\n                      key={id}\n                      personState={personState}\n                      membersState={props.membersState}\n                      inHouseExposureEventsState={\n                        props.inHouseExposureEventsState\n                      }\n                      editingHouseholdState={props.editingHouseholdState}\n                      editingPersonState={props.editingPersonState}\n                      eventSetterState={props.eventSetterState}\n                      guidance={personGuidance}\n                    />\n                  );\n                }\n              })}\n            </div>\n            {!editingPerson && (\n              <div\n                className={\"card shadow-sm mb-2\"}\n                onClick={() => {\n                  props.editingHouseholdState.set(true);\n                  props.addNewPerson();\n                }}\n              >\n                <button className={\"card-body\"}>\n                  <h4 className={\"\"}>\n                    Add Person &nbsp;\n                    <i className=\"fa fa-user-plus\" aria-hidden=\"true\"></i>\n                  </h4>\n                </button>\n              </div>\n            )}\n            {renderAction()}\n          </div>\n        </div>\n        <div className={\"col-md-6 empty\"} />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin, { DateClickArg } from \"@fullcalendar/interaction\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { colors } from \"./types\";\n\nimport { PersonData, CalculationResult, InHouseExposureEvent } from \"./types\";\nimport { format, parseISO } from \"date-fns\";\nimport { State } from \"@hookstate/core/dist\";\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEvents: InHouseExposureEvent[];\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function GridView(props: Props) {\n  const members = props.membersState.get();\n  const eventSetter = props.eventSetterState.get();\n  function computeEvents(\n    members: PersonData[],\n    inHouseExposureEvents: InHouseExposureEvent[]\n  ) {\n    return computeHouseHoldQuarantinePeriod(members, inHouseExposureEvents).map(\n      (result: CalculationResult) => {\n        return {\n          classNames: [\"TODO\"],\n          title: result.person.name,\n          start: parseISO(\"1970-01-01\"),\n          end: result.endDate,\n          color: colors[result.person.id - (1 % colors.length)],\n          textColor: \"#000000\"\n        };\n      }\n    );\n  }\n\n  return (\n    <div className={\"p-3\"}>\n      {\n        <div className={eventSetter ? \"ba bw2 b--light-yellow\" : \"\"}>\n          <FullCalendar\n            plugins={[dayGridPlugin, interactionPlugin]}\n            initialView=\"dayGridMonth\"\n            events={computeEvents(members, props.inHouseExposureEvents)}\n            dateClick={(info: DateClickArg) => {\n              if (eventSetter) {\n                eventSetter(format(info.date, \"MM/dd/yyyy\"));\n              }\n            }}\n          />\n        </div>\n      }\n    </div>\n  );\n}\n","import React from \"react\";\nimport GridView from \"./GridView\";\nimport { Link } from \"react-router-dom\";\nimport { InHouseExposureEvent, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposureEvent[]>;\n  eventSetterState: State<((date: string) => void) | undefined>;\n}\n\nexport default function Home(props: Props) {\n  const members = props.membersState.get();\n\n  function renderTitle() {\n    if (members.length) {\n      return (\n        <>\n          <h1>Here is our recommendation for your household</h1>\n          <p className=\"lead text-muted\">\n            The guidance given in this app is based on the latest CDC guidelines\n            for protecting yourself and others from the spread of COVID-19. The\n            same information is available on their{\" \"}\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/index.html\">\n              COVID-19 webpage\n            </a>\n            .\n          </p>\n          <p>\n            <Link to=\"/household\" className=\"btn btn-primary my-2\">\n              Edit Answers\n            </Link>\n          </p>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h1>Get quarantine and isolation guidance for your household</h1>\n          <p className=\"lead text-muted\">\n            We'll let you know who should quarantine or isolate, and for how\n            long.\n          </p>\n          <p>\n            <Link to=\"/household\" className=\"btn btn-primary my-2\">\n              Get Started\n            </Link>\n          </p>\n        </>\n      );\n    }\n  }\n\n  return (\n    <>\n      <header>\n        <div className=\"navbar\">\n          <div className=\"container d-flex justify-content-between\">\n            <div className=\"navbar-brand d-flex align-items-center\">\n              COVID Quarantine Calculator (Work in Progress)\n            </div>\n            <div>English</div>\n          </div>\n        </div>\n      </header>\n      <main className={\"main\"} role={\"main\"}>\n        <section className={\"jumbotron\"}>\n          <div className=\"container\">{renderTitle()}</div>\n        </section>\n      </main>\n      {members.length ? (\n        <GridView\n          membersState={props.membersState}\n          eventSetterState={props.eventSetterState}\n          inHouseExposureEvents={props.inHouseExposureEventsState.get()}\n        />\n      ) : null}\n      <footer className={\"mb-3\"}>\n        <div className={\"container d-flex justify-content-between\"}>\n          <a href={\"https://www.codeforpdx.org/\"}>Code For PDX</a>\n          <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/isolation.html\">\n            CDC guidelines on isolation\n          </a>\n          <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/if-you-are-sick/quarantine.html\">\n            CDC guidelines on quarantine\n          </a>\n        </div>\n      </footer>\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useState } from \"@hookstate/core\";\nimport Household from \"./Household\";\nimport Home from \"./Home\";\nimport { CovidEventName, InHouseExposureEvent, PersonData } from \"./types\";\nimport { compact } from \"lodash/fp\";\nimport { getRandomInt, isContagious } from \"./util\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  const height = useState(window.innerHeight);\n  const updateHeight = () => {\n    height.set(window.innerHeight);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateHeight);\n    return () => window.removeEventListener(\"resize\", updateHeight);\n  }, []);\n  const members = useState([] as PersonData[]);\n  const inHouseExposureEvents = useState<InHouseExposureEvent[]>([]);\n  const id = useState(members.length + 1);\n  const editingHouseholdState = useState(true);\n  const editingPersonState = useState<number | undefined>(undefined);\n  const eventSetterState = useState<((date: string) => void) | undefined>(\n    undefined\n  );\n\n  function addNewPerson() {\n    const currentId = id.get();\n    const newPerson = {\n      id: currentId,\n      name: `Person ${getRandomInt(1000)}`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      noSymptomsFor24Hours: true,\n      isNewPerson: true,\n      editing: true\n    };\n    id.set(id => id + 1);\n    members.set(members => [...members, newPerson]);\n    editingPersonState.set(currentId);\n    const newExposureEvents = members.get().map((person: PersonData) => {\n      if (isContagious(person)) {\n        return {\n          contagiousPerson: person.id,\n          quarantinedPerson: newPerson.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    inHouseExposureEvents.merge(compact(newExposureEvents));\n  }\n\n  return (\n    <Router basename={`/${process.env.PUBLIC_URL}`}>\n      <Switch>\n        <Route path=\"/household\">\n          <Household\n            addNewPerson={addNewPerson}\n            editingHouseholdState={editingHouseholdState}\n            editingPersonState={editingPersonState}\n            eventSetterState={eventSetterState}\n            height={height}\n            inHouseExposureEventsState={inHouseExposureEvents}\n            membersState={members}\n          />\n        </Route>\n        <Route path=\"/\">\n          <Home\n            membersState={members}\n            inHouseExposureEventsState={inHouseExposureEvents}\n            eventSetterState={eventSetterState}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}